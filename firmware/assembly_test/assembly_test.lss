
assembly_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f60  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         000004dc  10000020  00001f60  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000217c  100004fc  0000243c  000104fc  2**2
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000104fc  2**0
                  CONTENTS, READONLY
  5 .comment      00000070  00000000  00000000  00010525  2**0
                  CONTENTS, READONLY
  6 .debug_frame  00000c04  00000000  00000000  00010598  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004684  00000000  00000000  0001119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001403  00000000  00000000  00015820  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002199  00000000  00000000  00016c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000003f0  00000000  00000000  00018dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000420  00000000  00000000  000191ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000015e8  00000000  00000000  000195cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001859  00000000  00000000  0001abb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_NVIC_Handler_Functions>:
       0:	e0 3f 00 10 81 11 00 00 d5 11 00 00 d5 11 00 00     .?..............
      10:	d5 11 00 00 d5 11 00 00 d5 11 00 00 00 00 00 00     ................
      20:	00 00 00 00 00 00 00 00 00 00 00 00 d5 11 00 00     ................
      30:	d5 11 00 00 00 00 00 00 d5 11 00 00 d5 11 00 00     ................
      40:	d5 11 00 00 45 07 00 00 d5 11 00 00 d5 11 00 00     ....E...........
      50:	d5 11 00 00 d5 11 00 00 d5 11 00 00 d5 11 00 00     ................
      60:	d5 11 00 00 d5 11 00 00 d5 11 00 00 d5 11 00 00     ................
      70:	d5 11 00 00 d5 11 00 00 d5 11 00 00 d5 11 00 00     ................
      80:	d5 11 00 00 d5 11 00 00 d5 11 00 00 d5 11 00 00     ................
      90:	d5 11 00 00 d5 11 00 00 d5 11 00 00 d5 11 00 00     ................
      a0:	7d 11 00 00 d5 11 00 00 69 07 00 00 d5 11 00 00     }.......i.......
      b0:	d5 11 00 00 d5 11 00 00 d5 11 00 00 d5 11 00 00     ................
      c0:	d5 11 00 00 d5 11 00 00 d5 11 00 00                 ............

000000cc <__do_global_dtors_aux>:
      cc:	b510      	push	{r4, lr}
      ce:	4c05      	ldr	r4, [pc, #20]	; (e4 <__do_global_dtors_aux+0x18>)
      d0:	7823      	ldrb	r3, [r4, #0]
      d2:	b933      	cbnz	r3, e2 <__do_global_dtors_aux+0x16>
      d4:	4b04      	ldr	r3, [pc, #16]	; (e8 <__do_global_dtors_aux+0x1c>)
      d6:	b113      	cbz	r3, de <__do_global_dtors_aux+0x12>
      d8:	4804      	ldr	r0, [pc, #16]	; (ec <__do_global_dtors_aux+0x20>)
      da:	f3af 8000 	nop.w
      de:	2301      	movs	r3, #1
      e0:	7023      	strb	r3, [r4, #0]
      e2:	bd10      	pop	{r4, pc}
      e4:	100004fc 	.word	0x100004fc
      e8:	00000000 	.word	0x00000000
      ec:	00001f3c 	.word	0x00001f3c

000000f0 <frame_dummy>:
      f0:	4b08      	ldr	r3, [pc, #32]	; (114 <frame_dummy+0x24>)
      f2:	b510      	push	{r4, lr}
      f4:	b11b      	cbz	r3, fe <frame_dummy+0xe>
      f6:	4808      	ldr	r0, [pc, #32]	; (118 <frame_dummy+0x28>)
      f8:	4908      	ldr	r1, [pc, #32]	; (11c <frame_dummy+0x2c>)
      fa:	f3af 8000 	nop.w
      fe:	4808      	ldr	r0, [pc, #32]	; (120 <frame_dummy+0x30>)
     100:	6803      	ldr	r3, [r0, #0]
     102:	b903      	cbnz	r3, 106 <frame_dummy+0x16>
     104:	bd10      	pop	{r4, pc}
     106:	4b07      	ldr	r3, [pc, #28]	; (124 <frame_dummy+0x34>)
     108:	2b00      	cmp	r3, #0
     10a:	d0fb      	beq.n	104 <frame_dummy+0x14>
     10c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     110:	4718      	bx	r3
     112:	bf00      	nop
     114:	00000000 	.word	0x00000000
     118:	00001f3c 	.word	0x00001f3c
     11c:	10000500 	.word	0x10000500
     120:	100004fc 	.word	0x100004fc
     124:	00000000 	.word	0x00000000

00000128 <__libc_init_array>:
     128:	b570      	push	{r4, r5, r6, lr}
     12a:	4e0f      	ldr	r6, [pc, #60]	; (168 <__libc_init_array+0x40>)
     12c:	4d0f      	ldr	r5, [pc, #60]	; (16c <__libc_init_array+0x44>)
     12e:	1b76      	subs	r6, r6, r5
     130:	10b6      	asrs	r6, r6, #2
     132:	bf18      	it	ne
     134:	2400      	movne	r4, #0
     136:	d005      	beq.n	144 <__libc_init_array+0x1c>
     138:	3401      	adds	r4, #1
     13a:	f855 3b04 	ldr.w	r3, [r5], #4
     13e:	4798      	blx	r3
     140:	42a6      	cmp	r6, r4
     142:	d1f9      	bne.n	138 <__libc_init_array+0x10>
     144:	4e0a      	ldr	r6, [pc, #40]	; (170 <__libc_init_array+0x48>)
     146:	4d0b      	ldr	r5, [pc, #44]	; (174 <__libc_init_array+0x4c>)
     148:	f001 fef8 	bl	1f3c <_init>
     14c:	1b76      	subs	r6, r6, r5
     14e:	10b6      	asrs	r6, r6, #2
     150:	bf18      	it	ne
     152:	2400      	movne	r4, #0
     154:	d006      	beq.n	164 <__libc_init_array+0x3c>
     156:	3401      	adds	r4, #1
     158:	f855 3b04 	ldr.w	r3, [r5], #4
     15c:	4798      	blx	r3
     15e:	42a6      	cmp	r6, r4
     160:	d1f9      	bne.n	156 <__libc_init_array+0x2e>
     162:	bd70      	pop	{r4, r5, r6, pc}
     164:	bd70      	pop	{r4, r5, r6, pc}
     166:	bf00      	nop
     168:	00001f48 	.word	0x00001f48
     16c:	00001f48 	.word	0x00001f48
     170:	00001f50 	.word	0x00001f50
     174:	00001f48 	.word	0x00001f48

00000178 <register_fini>:
     178:	4b02      	ldr	r3, [pc, #8]	; (184 <register_fini+0xc>)
     17a:	b113      	cbz	r3, 182 <register_fini+0xa>
     17c:	4802      	ldr	r0, [pc, #8]	; (188 <register_fini+0x10>)
     17e:	f000 b805 	b.w	18c <atexit>
     182:	4770      	bx	lr
     184:	00000000 	.word	0x00000000
     188:	00000199 	.word	0x00000199

0000018c <atexit>:
     18c:	4601      	mov	r1, r0
     18e:	2000      	movs	r0, #0
     190:	4602      	mov	r2, r0
     192:	4603      	mov	r3, r0
     194:	f000 b816 	b.w	1c4 <__register_exitproc>

00000198 <__libc_fini_array>:
     198:	b538      	push	{r3, r4, r5, lr}
     19a:	4b08      	ldr	r3, [pc, #32]	; (1bc <__libc_fini_array+0x24>)
     19c:	4d08      	ldr	r5, [pc, #32]	; (1c0 <__libc_fini_array+0x28>)
     19e:	1aed      	subs	r5, r5, r3
     1a0:	10ac      	asrs	r4, r5, #2
     1a2:	bf18      	it	ne
     1a4:	18ed      	addne	r5, r5, r3
     1a6:	d005      	beq.n	1b4 <__libc_fini_array+0x1c>
     1a8:	3c01      	subs	r4, #1
     1aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
     1ae:	4798      	blx	r3
     1b0:	2c00      	cmp	r4, #0
     1b2:	d1f9      	bne.n	1a8 <__libc_fini_array+0x10>
     1b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     1b8:	f001 beca 	b.w	1f50 <_fini>
     1bc:	00001f5c 	.word	0x00001f5c
     1c0:	00001f60 	.word	0x00001f60

000001c4 <__register_exitproc>:
     1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1c8:	4c25      	ldr	r4, [pc, #148]	; (260 <__register_exitproc+0x9c>)
     1ca:	4606      	mov	r6, r0
     1cc:	6825      	ldr	r5, [r4, #0]
     1ce:	4688      	mov	r8, r1
     1d0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
     1d4:	4692      	mov	sl, r2
     1d6:	4699      	mov	r9, r3
     1d8:	b3c4      	cbz	r4, 24c <__register_exitproc+0x88>
     1da:	6860      	ldr	r0, [r4, #4]
     1dc:	281f      	cmp	r0, #31
     1de:	dc17      	bgt.n	210 <__register_exitproc+0x4c>
     1e0:	1c41      	adds	r1, r0, #1
     1e2:	b176      	cbz	r6, 202 <__register_exitproc+0x3e>
     1e4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
     1e8:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
     1ec:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
     1f0:	2201      	movs	r2, #1
     1f2:	4082      	lsls	r2, r0
     1f4:	4315      	orrs	r5, r2
     1f6:	2e02      	cmp	r6, #2
     1f8:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
     1fc:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
     200:	d01e      	beq.n	240 <__register_exitproc+0x7c>
     202:	1c83      	adds	r3, r0, #2
     204:	6061      	str	r1, [r4, #4]
     206:	2000      	movs	r0, #0
     208:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
     20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     210:	4b14      	ldr	r3, [pc, #80]	; (264 <__register_exitproc+0xa0>)
     212:	b303      	cbz	r3, 256 <__register_exitproc+0x92>
     214:	f44f 70c8 	mov.w	r0, #400	; 0x190
     218:	f3af 8000 	nop.w
     21c:	4604      	mov	r4, r0
     21e:	b1d0      	cbz	r0, 256 <__register_exitproc+0x92>
     220:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
     224:	2700      	movs	r7, #0
     226:	e884 0088 	stmia.w	r4, {r3, r7}
     22a:	4638      	mov	r0, r7
     22c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
     230:	2101      	movs	r1, #1
     232:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
     236:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
     23a:	2e00      	cmp	r6, #0
     23c:	d0e1      	beq.n	202 <__register_exitproc+0x3e>
     23e:	e7d1      	b.n	1e4 <__register_exitproc+0x20>
     240:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
     244:	431a      	orrs	r2, r3
     246:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
     24a:	e7da      	b.n	202 <__register_exitproc+0x3e>
     24c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
     250:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
     254:	e7c1      	b.n	1da <__register_exitproc+0x16>
     256:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25e:	bf00      	nop
     260:	00001e08 	.word	0x00001e08
     264:	00000000 	.word	0x00000000

00000268 <dma_init>:
		T0IR |= TIR_MR0_Interrupt;
	}
}

static void dma_init()
{
     268:	b510      	push	{r4, lr}
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
     26a:	4a24      	ldr	r2, [pc, #144]	; (2fc <dma_init+0x94>)

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
     26c:	4924      	ldr	r1, [pc, #144]	; (300 <dma_init+0x98>)
}

static void dma_init()
{
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
     26e:	6813      	ldr	r3, [r2, #0]
	DMACC7Config = 0;
	DMACIntTCClear = 0xFF;
	DMACIntErrClr = 0xFF;

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
     270:	4c24      	ldr	r4, [pc, #144]	; (304 <dma_init+0x9c>)
}

static void dma_init()
{
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
     272:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     276:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
	DMACC1Config = 0;
     278:	4a23      	ldr	r2, [pc, #140]	; (308 <dma_init+0xa0>)
{
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
     27a:	2300      	movs	r3, #0
     27c:	600b      	str	r3, [r1, #0]
	DMACC3Config = 0;
	DMACC4Config = 0;
	DMACC5Config = 0;
	DMACC6Config = 0;
	DMACC7Config = 0;
	DMACIntTCClear = 0xFF;
     27e:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
	DMACC1Config = 0;
     282:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
	DMACC2Config = 0;
     286:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
	DMACC3Config = 0;
     28a:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
	DMACC4Config = 0;
     28e:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
	DMACC5Config = 0;
     292:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
	DMACC6Config = 0;
     296:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
	DMACC7Config = 0;
     29a:	f8c2 31e8 	str.w	r3, [r2, #488]	; 0x1e8
	DMACIntTCClear = 0xFF;
     29e:	23ff      	movs	r3, #255	; 0xff
     2a0:	6013      	str	r3, [r2, #0]
	DMACIntErrClr = 0xFF;
     2a2:	6093      	str	r3, [r2, #8]

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
     2a4:	4b19      	ldr	r3, [pc, #100]	; (30c <dma_init+0xa4>)
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
     2a6:	4a1a      	ldr	r2, [pc, #104]	; (310 <dma_init+0xa8>)
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
	rx_dma_lli1.control = (DMA_SIZE) |
     2a8:	481a      	ldr	r0, [pc, #104]	; (314 <dma_init+0xac>)
	DMACIntTCClear = 0xFF;
	DMACIntErrClr = 0xFF;

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
     2aa:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
     2ac:	4a1a      	ldr	r2, [pc, #104]	; (318 <dma_init+0xb0>)
	DMACC7Config = 0;
	DMACIntTCClear = 0xFF;
	DMACIntErrClr = 0xFF;

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
     2ae:	601c      	str	r4, [r3, #0]
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
     2b0:	6014      	str	r4, [r2, #0]
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
     2b2:	4c1a      	ldr	r4, [pc, #104]	; (31c <dma_init+0xb4>)

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
	rx_dma_lli1.control = (DMA_SIZE) |
     2b4:	60d8      	str	r0, [r3, #12]
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
	rx_dma_lli2.next_lli = (u32)&rx_dma_lli1;
	rx_dma_lli2.control = (DMA_SIZE) |
     2b6:	60d0      	str	r0, [r2, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* disable DMA interrupts */
	ISER0 &= ~ISER0_ISE_DMA;
     2b8:	4819      	ldr	r0, [pc, #100]	; (320 <dma_init+0xb8>)
	DMACIntErrClr = 0xFF;

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
     2ba:	609a      	str	r2, [r3, #8]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
     2bc:	6054      	str	r4, [r2, #4]
	rx_dma_lli2.next_lli = (u32)&rx_dma_lli1;
     2be:	6093      	str	r3, [r2, #8]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* disable DMA interrupts */
	ISER0 &= ~ISER0_ISE_DMA;
     2c0:	6802      	ldr	r2, [r0, #0]
     2c2:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
     2c6:	6002      	str	r2, [r0, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
     2c8:	4a16      	ldr	r2, [pc, #88]	; (324 <dma_init+0xbc>)
     2ca:	2001      	movs	r0, #1
     2cc:	6010      	str	r0, [r2, #0]
	while (!(DMACConfig & DMACConfig_E));
     2ce:	6810      	ldr	r0, [r2, #0]
     2d0:	07c0      	lsls	r0, r0, #31
     2d2:	d5fc      	bpl.n	2ce <dma_init+0x66>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
     2d4:	6818      	ldr	r0, [r3, #0]
     2d6:	4a14      	ldr	r2, [pc, #80]	; (328 <dma_init+0xc0>)
     2d8:	6010      	str	r0, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
     2da:	6858      	ldr	r0, [r3, #4]
     2dc:	6050      	str	r0, [r2, #4]
	DMACC0LLI = rx_dma_lli1.next_lli;
     2de:	6898      	ldr	r0, [r3, #8]
     2e0:	6090      	str	r0, [r2, #8]
	DMACC0Control = rx_dma_lli1.control;
     2e2:	68da      	ldr	r2, [r3, #12]
     2e4:	4b11      	ldr	r3, [pc, #68]	; (32c <dma_init+0xc4>)
     2e6:	601a      	str	r2, [r3, #0]
	DMACC0Config =
     2e8:	f24d 0306 	movw	r3, #53254	; 0xd006
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	/* reset interrupt counters */
	rx_tc = 0;
     2ec:	4a10      	ldr	r2, [pc, #64]	; (330 <dma_init+0xc8>)
	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
	DMACC0DestAddr = rx_dma_lli1.dest;
	DMACC0LLI = rx_dma_lli1.next_lli;
	DMACC0Control = rx_dma_lli1.control;
	DMACC0Config =
     2ee:	600b      	str	r3, [r1, #0]
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	/* reset interrupt counters */
	rx_tc = 0;
     2f0:	2300      	movs	r3, #0
     2f2:	6013      	str	r3, [r2, #0]
	rx_err = 0;
     2f4:	4a0f      	ldr	r2, [pc, #60]	; (334 <dma_init+0xcc>)
     2f6:	6013      	str	r3, [r2, #0]
     2f8:	bd10      	pop	{r4, pc}
     2fa:	bf00      	nop
     2fc:	400fc0c4 	.word	0x400fc0c4
     300:	50004110 	.word	0x50004110
     304:	40030008 	.word	0x40030008
     308:	50004130 	.word	0x50004130
     30c:	1000262c 	.word	0x1000262c
     310:	10002641 	.word	0x10002641
     314:	88009032 	.word	0x88009032
     318:	100005e4 	.word	0x100005e4
     31c:	100025f8 	.word	0x100025f8
     320:	e000e100 	.word	0xe000e100
     324:	50004030 	.word	0x50004030
     328:	50004100 	.word	0x50004100
     32c:	5000410c 	.word	0x5000410c
     330:	100005e0 	.word	0x100005e0
     334:	10002674 	.word	0x10002674

00000338 <dio_ssp_start>:
}

static void dio_ssp_start()
{
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
     338:	4b0d      	ldr	r3, [pc, #52]	; (370 <dio_ssp_start+0x38>)

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
     33a:	490e      	ldr	r1, [pc, #56]	; (374 <dio_ssp_start+0x3c>)
}

static void dio_ssp_start()
{
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
     33c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     340:	601a      	str	r2, [r3, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
     342:	680b      	ldr	r3, [r1, #0]
     344:	f043 0301 	orr.w	r3, r3, #1
     348:	600b      	str	r3, [r1, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
     34a:	f851 3c20 	ldr.w	r3, [r1, #-32]
     34e:	f043 0302 	orr.w	r3, r3, #2
     352:	f841 3c20 	str.w	r3, [r1, #-32]
	
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
     356:	4908      	ldr	r1, [pc, #32]	; (378 <dio_ssp_start+0x40>)
     358:	680b      	ldr	r3, [r1, #0]
     35a:	f043 0301 	orr.w	r3, r3, #1
     35e:	600b      	str	r3, [r1, #0]
	ISER0 |= ISER0_ISE_DMA;
     360:	4906      	ldr	r1, [pc, #24]	; (37c <dio_ssp_start+0x44>)
     362:	680b      	ldr	r3, [r1, #0]
     364:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     368:	600b      	str	r3, [r1, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
     36a:	4b05      	ldr	r3, [pc, #20]	; (380 <dio_ssp_start+0x48>)
     36c:	601a      	str	r2, [r3, #0]
     36e:	4770      	bx	lr
     370:	2009c098 	.word	0x2009c098
     374:	40030024 	.word	0x40030024
     378:	50004110 	.word	0x50004110
     37c:	e000e100 	.word	0xe000e100
     380:	2009c09c 	.word	0x2009c09c

00000384 <usb_vendor_request_handler>:
static void usb_bulk_out_handler(u8 bEP, u8 bEPStatus)
{
}

static BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
     384:	b570      	push	{r4, r5, r6, lr}
     386:	b08a      	sub	sp, #40	; 0x28
	u8 *pbData = *ppbData;
	u32 command[5];
	u32 result[5];
	u8 length; // string length

	switch (pSetup->bRequest) {
     388:	7843      	ldrb	r3, [r0, #1]
static void usb_bulk_out_handler(u8 bEP, u8 bEPStatus)
{
}

static BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
     38a:	460d      	mov	r5, r1
	u8 *pbData = *ppbData;
     38c:	6814      	ldr	r4, [r2, #0]
	u32 command[5];
	u32 result[5];
	u8 length; // string length

	switch (pSetup->bRequest) {
     38e:	2b21      	cmp	r3, #33	; 0x21
     390:	f200 8143 	bhi.w	61a <usb_vendor_request_handler+0x296>
     394:	e8df f013 	tbh	[pc, r3, lsl #1]
     398:	0022012d 	.word	0x0022012d
     39c:	002f0141 	.word	0x002f0141
     3a0:	00370034 	.word	0x00370034
     3a4:	003f003c 	.word	0x003f003c
     3a8:	00450041 	.word	0x00450041
     3ac:	00e6004a 	.word	0x00e6004a
     3b0:	011400ef 	.word	0x011400ef
     3b4:	00530068 	.word	0x00530068
     3b8:	00a500a0 	.word	0x00a500a0
     3bc:	00ad00a8 	.word	0x00ad00a8
     3c0:	00d800b5 	.word	0x00d800b5
     3c4:	00e200dc 	.word	0x00e200dc
     3c8:	01110108 	.word	0x01110108
     3cc:	01170141 	.word	0x01170141
     3d0:	00be00b7 	.word	0x00be00b7
     3d4:	00c700c9 	.word	0x00c700c9
     3d8:	013100cb 	.word	0x013100cb
	case UBERTOOTH_PING:
		*piLen = 0;
		break;

	case UBERTOOTH_RX_SYMBOLS:
		rx_pkts += pSetup->wValue;
     3dc:	4b90      	ldr	r3, [pc, #576]	; (620 <usb_vendor_request_handler+0x29c>)
     3de:	8841      	ldrh	r1, [r0, #2]
     3e0:	681a      	ldr	r2, [r3, #0]
     3e2:	440a      	add	r2, r1
     3e4:	601a      	str	r2, [r3, #0]
		if (rx_pkts == 0)
     3e6:	681a      	ldr	r2, [r3, #0]
     3e8:	2a00      	cmp	r2, #0
     3ea:	f040 8102 	bne.w	5f2 <usb_vendor_request_handler+0x26e>
			rx_pkts = 0xFFFFFFFF;
     3ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     3f2:	601a      	str	r2, [r3, #0]
     3f4:	e0fd      	b.n	5f2 <usb_vendor_request_handler+0x26e>
		*piLen = 0;
		break;

	case UBERTOOTH_GET_USRLED:
		pbData[0] = (USRLED) ? 1 : 0;
     3f6:	4b8b      	ldr	r3, [pc, #556]	; (624 <usb_vendor_request_handler+0x2a0>)
     3f8:	681b      	ldr	r3, [r3, #0]
     3fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
     3fe:	e0a9      	b.n	554 <usb_vendor_request_handler+0x1d0>
		*piLen = 1;
		break;

	case UBERTOOTH_SET_USRLED:
		if (pSetup->wValue)
     400:	8842      	ldrh	r2, [r0, #2]
     402:	2302      	movs	r3, #2
     404:	e015      	b.n	432 <usb_vendor_request_handler+0xae>
		else
			USRLED_CLR;
		break;

	case UBERTOOTH_GET_RXLED:
		pbData[0] = (RXLED) ? 1 : 0;
     406:	4b87      	ldr	r3, [pc, #540]	; (624 <usb_vendor_request_handler+0x2a0>)
     408:	681b      	ldr	r3, [r3, #0]
     40a:	f3c3 1300 	ubfx	r3, r3, #4, #1
     40e:	e0a1      	b.n	554 <usb_vendor_request_handler+0x1d0>
		*piLen = 1;
		break;

	case UBERTOOTH_SET_RXLED:
		if (pSetup->wValue)
     410:	8842      	ldrh	r2, [r0, #2]
     412:	2310      	movs	r3, #16
     414:	e00d      	b.n	432 <usb_vendor_request_handler+0xae>
		else
			RXLED_CLR;
		break;

	case UBERTOOTH_GET_TXLED:
		pbData[0] = (TXLED) ? 1 : 0;
     416:	4b83      	ldr	r3, [pc, #524]	; (624 <usb_vendor_request_handler+0x2a0>)
     418:	e067      	b.n	4ea <usb_vendor_request_handler+0x166>
		*piLen = 1;
		break;

	case UBERTOOTH_SET_TXLED:
		if (pSetup->wValue)
     41a:	8842      	ldrh	r2, [r0, #2]
     41c:	f44f 7380 	mov.w	r3, #256	; 0x100
     420:	e007      	b.n	432 <usb_vendor_request_handler+0xae>
		else
			TXLED_CLR;
		break;

	case UBERTOOTH_GET_1V8:
		pbData[0] = (CC1V8) ? 1 : 0;
     422:	4b80      	ldr	r3, [pc, #512]	; (624 <usb_vendor_request_handler+0x2a0>)
     424:	681b      	ldr	r3, [r3, #0]
     426:	f3c3 2340 	ubfx	r3, r3, #9, #1
     42a:	e093      	b.n	554 <usb_vendor_request_handler+0x1d0>
		*piLen = 1;
		break;

	case UBERTOOTH_SET_1V8:
		if (pSetup->wValue)
     42c:	8842      	ldrh	r2, [r0, #2]
     42e:	f44f 7300 	mov.w	r3, #512	; 0x200
     432:	b912      	cbnz	r2, 43a <usb_vendor_request_handler+0xb6>

	case UBERTOOTH_SET_RXLED:
		if (pSetup->wValue)
			RXLED_SET;
		else
			RXLED_CLR;
     434:	4a7c      	ldr	r2, [pc, #496]	; (628 <usb_vendor_request_handler+0x2a4>)
     436:	6013      	str	r3, [r2, #0]
     438:	e0dd      	b.n	5f6 <usb_vendor_request_handler+0x272>
		*piLen = 1;
		break;

	case UBERTOOTH_SET_1V8:
		if (pSetup->wValue)
			CC1V8_SET;
     43a:	4a7c      	ldr	r2, [pc, #496]	; (62c <usb_vendor_request_handler+0x2a8>)
     43c:	e7fb      	b.n	436 <usb_vendor_request_handler+0xb2>
		else
			CC1V8_CLR;
		break;

	case UBERTOOTH_GET_PARTNUM:
		command[0] = 54; /* read part number */
     43e:	a80a      	add	r0, sp, #40	; 0x28
     440:	2336      	movs	r3, #54	; 0x36
     442:	f840 3d28 	str.w	r3, [r0, #-40]!
		iap_entry(command, result);
     446:	4b7a      	ldr	r3, [pc, #488]	; (630 <usb_vendor_request_handler+0x2ac>)
     448:	a905      	add	r1, sp, #20
     44a:	681b      	ldr	r3, [r3, #0]
     44c:	4798      	blx	r3
		pbData[0] = result[0] & 0xFF; /* status */
     44e:	9b05      	ldr	r3, [sp, #20]
     450:	7023      	strb	r3, [r4, #0]
		pbData[1] = result[1] & 0xFF;
     452:	9b06      	ldr	r3, [sp, #24]
     454:	7063      	strb	r3, [r4, #1]
		pbData[2] = (result[1] >> 8) & 0xFF;
     456:	9b06      	ldr	r3, [sp, #24]
     458:	0a1b      	lsrs	r3, r3, #8
     45a:	70a3      	strb	r3, [r4, #2]
		pbData[3] = (result[1] >> 16) & 0xFF;
     45c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
     460:	70e3      	strb	r3, [r4, #3]
		pbData[4] = (result[1] >> 24) & 0xFF;
     462:	f89d 301b 	ldrb.w	r3, [sp, #27]
     466:	e06c      	b.n	542 <usb_vendor_request_handler+0x1be>
	case UBERTOOTH_RESET:
		reset();
		break;

	case UBERTOOTH_GET_SERIAL:
		command[0] = 58; /* read device serial number */
     468:	a80a      	add	r0, sp, #40	; 0x28
     46a:	233a      	movs	r3, #58	; 0x3a
     46c:	f840 3d28 	str.w	r3, [r0, #-40]!
		iap_entry(command, result);
     470:	4b6f      	ldr	r3, [pc, #444]	; (630 <usb_vendor_request_handler+0x2ac>)
     472:	a905      	add	r1, sp, #20
     474:	681b      	ldr	r3, [r3, #0]
     476:	4798      	blx	r3
		pbData[0] = result[0] & 0xFF; /* status */
     478:	9b05      	ldr	r3, [sp, #20]
     47a:	7023      	strb	r3, [r4, #0]
		pbData[1] = result[1] & 0xFF;
     47c:	9b06      	ldr	r3, [sp, #24]
     47e:	7063      	strb	r3, [r4, #1]
		pbData[2] = (result[1] >> 8) & 0xFF;
     480:	9b06      	ldr	r3, [sp, #24]
     482:	0a1b      	lsrs	r3, r3, #8
     484:	70a3      	strb	r3, [r4, #2]
		pbData[3] = (result[1] >> 16) & 0xFF;
     486:	f8bd 301a 	ldrh.w	r3, [sp, #26]
     48a:	70e3      	strb	r3, [r4, #3]
		pbData[4] = (result[1] >> 24) & 0xFF;
     48c:	f89d 301b 	ldrb.w	r3, [sp, #27]
     490:	7123      	strb	r3, [r4, #4]
		pbData[5] = result[2] & 0xFF;
     492:	9b07      	ldr	r3, [sp, #28]
     494:	7163      	strb	r3, [r4, #5]
		pbData[6] = (result[2] >> 8) & 0xFF;
     496:	9b07      	ldr	r3, [sp, #28]
     498:	0a1b      	lsrs	r3, r3, #8
     49a:	71a3      	strb	r3, [r4, #6]
		pbData[7] = (result[2] >> 16) & 0xFF;
     49c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
     4a0:	71e3      	strb	r3, [r4, #7]
		pbData[8] = (result[2] >> 24) & 0xFF;
     4a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
     4a6:	7223      	strb	r3, [r4, #8]
		pbData[9] = result[3] & 0xFF;
     4a8:	9b08      	ldr	r3, [sp, #32]
     4aa:	7263      	strb	r3, [r4, #9]
		pbData[10] = (result[3] >> 8) & 0xFF;
     4ac:	9b08      	ldr	r3, [sp, #32]
     4ae:	0a1b      	lsrs	r3, r3, #8
     4b0:	72a3      	strb	r3, [r4, #10]
		pbData[11] = (result[3] >> 16) & 0xFF;
     4b2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
     4b6:	72e3      	strb	r3, [r4, #11]
		pbData[12] = (result[3] >> 24) & 0xFF;
     4b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
     4bc:	7323      	strb	r3, [r4, #12]
		pbData[13] = result[4] & 0xFF;
     4be:	9b09      	ldr	r3, [sp, #36]	; 0x24
     4c0:	7363      	strb	r3, [r4, #13]
		pbData[14] = (result[4] >> 8) & 0xFF;
     4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     4c4:	0a1b      	lsrs	r3, r3, #8
     4c6:	73a3      	strb	r3, [r4, #14]
		pbData[15] = (result[4] >> 16) & 0xFF;
     4c8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
     4cc:	73e3      	strb	r3, [r4, #15]
		pbData[16] = (result[4] >> 24) & 0xFF;
     4ce:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
     4d2:	7423      	strb	r3, [r4, #16]
		*piLen = 17;
     4d4:	2311      	movs	r3, #17
     4d6:	e08d      	b.n	5f4 <usb_vendor_request_handler+0x270>
		break;

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		pbData[0] = (PAEN) ? 1 : 0;
     4d8:	4b56      	ldr	r3, [pc, #344]	; (634 <usb_vendor_request_handler+0x2b0>)
     4da:	681b      	ldr	r3, [r3, #0]
     4dc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
     4e0:	e038      	b.n	554 <usb_vendor_request_handler+0x1d0>
		*piLen = 1;
		break;

	case UBERTOOTH_SET_PAEN:
		if (pSetup->wValue)
     4e2:	8842      	ldrh	r2, [r0, #2]
     4e4:	2380      	movs	r3, #128	; 0x80
     4e6:	e007      	b.n	4f8 <usb_vendor_request_handler+0x174>
		else
			PAEN_CLR;
		break;

	case UBERTOOTH_GET_HGM:
		pbData[0] = (HGM) ? 1 : 0;
     4e8:	4b52      	ldr	r3, [pc, #328]	; (634 <usb_vendor_request_handler+0x2b0>)
     4ea:	681b      	ldr	r3, [r3, #0]
     4ec:	f3c3 2300 	ubfx	r3, r3, #8, #1
     4f0:	e030      	b.n	554 <usb_vendor_request_handler+0x1d0>
		*piLen = 1;
		break;

	case UBERTOOTH_SET_HGM:
		if (pSetup->wValue)
     4f2:	8842      	ldrh	r2, [r0, #2]
     4f4:	f44f 7380 	mov.w	r3, #256	; 0x100
     4f8:	b10a      	cbz	r2, 4fe <usb_vendor_request_handler+0x17a>
			HGM_SET;
     4fa:	4a4f      	ldr	r2, [pc, #316]	; (638 <usb_vendor_request_handler+0x2b4>)
     4fc:	e79b      	b.n	436 <usb_vendor_request_handler+0xb2>
		else
			HGM_CLR;
     4fe:	4a4f      	ldr	r2, [pc, #316]	; (63c <usb_vendor_request_handler+0x2b8>)
     500:	e799      	b.n	436 <usb_vendor_request_handler+0xb2>
		break;
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
     502:	2203      	movs	r2, #3
     504:	e021      	b.n	54a <usb_vendor_request_handler+0x1c6>
		break;

	case UBERTOOTH_GET_PALEVEL:
		pbData[0] = cc2400_get(FREND) & 0x7;
     506:	2005      	movs	r0, #5
     508:	f000 ff4c 	bl	13a4 <cc2400_get>
     50c:	f000 0007 	and.w	r0, r0, #7
     510:	7020      	strb	r0, [r4, #0]
     512:	e020      	b.n	556 <usb_vendor_request_handler+0x1d2>
		*piLen = 1;
		break;

	case UBERTOOTH_SET_PALEVEL:
		if( pSetup->wValue < 8 ) {
     514:	8841      	ldrh	r1, [r0, #2]
     516:	2907      	cmp	r1, #7
     518:	d87f      	bhi.n	61a <usb_vendor_request_handler+0x296>
			cc2400_set(FREND, 8 | pSetup->wValue);
     51a:	2005      	movs	r0, #5
     51c:	f041 0108 	orr.w	r1, r1, #8
     520:	f000 ff49 	bl	13b6 <cc2400_set>
     524:	e067      	b.n	5f6 <usb_vendor_request_handler+0x272>
			return FALSE;
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
     526:	2205      	movs	r2, #5
     528:	e00f      	b.n	54a <usb_vendor_request_handler+0x1c6>
		break;

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
     52a:	2206      	movs	r2, #6
     52c:	e00d      	b.n	54a <usb_vendor_request_handler+0x1c6>
		break;
#endif

	case UBERTOOTH_RANGE_CHECK:
		pbData[0] = rr.valid;
     52e:	4b44      	ldr	r3, [pc, #272]	; (640 <usb_vendor_request_handler+0x2bc>)
     530:	781a      	ldrb	r2, [r3, #0]
     532:	7022      	strb	r2, [r4, #0]
		pbData[1] = rr.request_pa;
     534:	785a      	ldrb	r2, [r3, #1]
     536:	7062      	strb	r2, [r4, #1]
		pbData[2] = rr.request_num;
     538:	789a      	ldrb	r2, [r3, #2]
     53a:	70a2      	strb	r2, [r4, #2]
		pbData[3] = rr.reply_pa;
     53c:	78da      	ldrb	r2, [r3, #3]
     53e:	70e2      	strb	r2, [r4, #3]
		pbData[4] = rr.reply_num;
     540:	791b      	ldrb	r3, [r3, #4]
     542:	7123      	strb	r3, [r4, #4]
		*piLen = 5;
     544:	2305      	movs	r3, #5
     546:	e055      	b.n	5f4 <usb_vendor_request_handler+0x270>
		break;

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
     548:	2200      	movs	r2, #0
     54a:	4b35      	ldr	r3, [pc, #212]	; (620 <usb_vendor_request_handler+0x29c>)
     54c:	605a      	str	r2, [r3, #4]
     54e:	e052      	b.n	5f6 <usb_vendor_request_handler+0x272>
		break;

	case UBERTOOTH_GET_MOD:
		pbData[0] = modulation;
     550:	4b33      	ldr	r3, [pc, #204]	; (620 <usb_vendor_request_handler+0x29c>)
     552:	689b      	ldr	r3, [r3, #8]
     554:	7023      	strb	r3, [r4, #0]
		*piLen = 1;
     556:	2001      	movs	r0, #1
     558:	6028      	str	r0, [r5, #0]
		break;
     55a:	e05f      	b.n	61c <usb_vendor_request_handler+0x298>

	case UBERTOOTH_SET_MOD:
		modulation = pSetup->wValue;
     55c:	8842      	ldrh	r2, [r0, #2]
     55e:	4b30      	ldr	r3, [pc, #192]	; (620 <usb_vendor_request_handler+0x29c>)
     560:	609a      	str	r2, [r3, #8]
     562:	e048      	b.n	5f6 <usb_vendor_request_handler+0x272>
		break;

	case UBERTOOTH_GET_CHANNEL:
		pbData[0] = channel & 0xFF;
     564:	4b37      	ldr	r3, [pc, #220]	; (644 <usb_vendor_request_handler+0x2c0>)
     566:	881a      	ldrh	r2, [r3, #0]
     568:	7022      	strb	r2, [r4, #0]
		pbData[1] = (channel >> 8) & 0xFF;
     56a:	881b      	ldrh	r3, [r3, #0]
     56c:	f3c3 2307 	ubfx	r3, r3, #8, #8
     570:	7063      	strb	r3, [r4, #1]
		*piLen = 2;
     572:	2302      	movs	r3, #2
     574:	e03e      	b.n	5f4 <usb_vendor_request_handler+0x270>
		break;

    case UBERTOOTH_SET_CHANNEL:
		channel = pSetup->wValue;
     576:	4b33      	ldr	r3, [pc, #204]	; (644 <usb_vendor_request_handler+0x2c0>)
     578:	8842      	ldrh	r2, [r0, #2]
     57a:	801a      	strh	r2, [r3, #0]
		channel = MAX(channel, MIN_FREQ);
     57c:	f640 02dc 	movw	r2, #2268	; 0x8dc
     580:	8819      	ldrh	r1, [r3, #0]
     582:	b289      	uxth	r1, r1
     584:	4291      	cmp	r1, r2
		channel = MIN(channel, MAX_FREQ);
     586:	f640 21e9 	movw	r1, #2793	; 0xae9
		*piLen = 2;
		break;

    case UBERTOOTH_SET_CHANNEL:
		channel = pSetup->wValue;
		channel = MAX(channel, MIN_FREQ);
     58a:	bf84      	itt	hi
     58c:	881a      	ldrhhi	r2, [r3, #0]
     58e:	b292      	uxthhi	r2, r2
     590:	801a      	strh	r2, [r3, #0]
		channel = MIN(channel, MAX_FREQ);
     592:	881a      	ldrh	r2, [r3, #0]
     594:	b292      	uxth	r2, r2
     596:	428a      	cmp	r2, r1
     598:	bf8f      	iteee	hi
     59a:	f640 22ea 	movwhi	r2, #2794	; 0xaea
     59e:	4a29      	ldrls	r2, [pc, #164]	; (644 <usb_vendor_request_handler+0x2c0>)
     5a0:	8812      	ldrhls	r2, [r2, #0]
     5a2:	b292      	uxthls	r2, r2
     5a4:	801a      	strh	r2, [r3, #0]
     5a6:	e026      	b.n	5f6 <usb_vendor_request_handler+0x272>
		break;

	case UBERTOOTH_SET_ISP:
		command[0] = 57;
     5a8:	a80a      	add	r0, sp, #40	; 0x28
     5aa:	2339      	movs	r3, #57	; 0x39
     5ac:	f840 3d28 	str.w	r3, [r0, #-40]!
		iap_entry(command, result);
     5b0:	4b1f      	ldr	r3, [pc, #124]	; (630 <usb_vendor_request_handler+0x2ac>)
     5b2:	a905      	add	r1, sp, #20
     5b4:	681b      	ldr	r3, [r3, #0]
     5b6:	4798      	blx	r3
     5b8:	e01b      	b.n	5f2 <usb_vendor_request_handler+0x26e>
		*piLen = 0; /* should never return */
		break;

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
     5ba:	4a23      	ldr	r2, [pc, #140]	; (648 <usb_vendor_request_handler+0x2c4>)
     5bc:	4b23      	ldr	r3, [pc, #140]	; (64c <usb_vendor_request_handler+0x2c8>)
     5be:	601a      	str	r2, [r3, #0]
		reset();
     5c0:	f000 ffce 	bl	1560 <reset>
     5c4:	e017      	b.n	5f6 <usb_vendor_request_handler+0x272>
		break;

	case UBERTOOTH_SPECAN:
		if (pSetup->wValue < 2049 || pSetup->wValue > 3072 || 
     5c6:	8842      	ldrh	r2, [r0, #2]
     5c8:	f46f 6400 	mvn.w	r4, #2048	; 0x800
     5cc:	1913      	adds	r3, r2, r4
     5ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     5d2:	d222      	bcs.n	61a <usb_vendor_request_handler+0x296>
				pSetup->wIndex < 2049 || pSetup->wIndex > 3072 ||
     5d4:	8883      	ldrh	r3, [r0, #4]
		bootloader_ctrl = DFU_MODE;
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (pSetup->wValue < 2049 || pSetup->wValue > 3072 || 
     5d6:	f46f 6100 	mvn.w	r1, #2048	; 0x800
     5da:	1859      	adds	r1, r3, r1
     5dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
     5e0:	d21b      	bcs.n	61a <usb_vendor_request_handler+0x296>
				pSetup->wIndex < 2049 || pSetup->wIndex > 3072 ||
     5e2:	4293      	cmp	r3, r2
     5e4:	d319      	bcc.n	61a <usb_vendor_request_handler+0x296>
				pSetup->wIndex < pSetup->wValue)
			return FALSE;
		low_freq = pSetup->wValue;
     5e6:	4917      	ldr	r1, [pc, #92]	; (644 <usb_vendor_request_handler+0x2c0>)
     5e8:	804a      	strh	r2, [r1, #2]
		high_freq = pSetup->wIndex;
     5ea:	808b      	strh	r3, [r1, #4]
		requested_mode = MODE_SPECAN;
     5ec:	4b0c      	ldr	r3, [pc, #48]	; (620 <usb_vendor_request_handler+0x29c>)
     5ee:	2204      	movs	r2, #4
     5f0:	605a      	str	r2, [r3, #4]
		*piLen = 0;
     5f2:	2300      	movs	r3, #0
     5f4:	602b      	str	r3, [r5, #0]
		break;

	default:
		return FALSE;
	}
	return TRUE;
     5f6:	2001      	movs	r0, #1
			return FALSE;
		low_freq = pSetup->wValue;
		high_freq = pSetup->wIndex;
		requested_mode = MODE_SPECAN;
		*piLen = 0;
		break;
     5f8:	e010      	b.n	61c <usb_vendor_request_handler+0x298>

	case UBERTOOTH_GET_REV_NUM:
		pbData[0] = 0x00;
     5fa:	2300      	movs	r3, #0
     5fc:	7023      	strb	r3, [r4, #0]
		pbData[1] = 0x00;
     5fe:	7063      	strb	r3, [r4, #1]

		length = (u8)strlen(GIT_REVISION);
     600:	4813      	ldr	r0, [pc, #76]	; (650 <usb_vendor_request_handler+0x2cc>)
     602:	f001 fbd1 	bl	1da8 <strlen>
		pbData[2] = length;

		memcpy(&pbData[3], GIT_REVISION, length);
     606:	b2c6      	uxtb	r6, r0

	case UBERTOOTH_GET_REV_NUM:
		pbData[0] = 0x00;
		pbData[1] = 0x00;

		length = (u8)strlen(GIT_REVISION);
     608:	70a0      	strb	r0, [r4, #2]
		pbData[2] = length;

		memcpy(&pbData[3], GIT_REVISION, length);
     60a:	4632      	mov	r2, r6
     60c:	1ce0      	adds	r0, r4, #3
     60e:	4910      	ldr	r1, [pc, #64]	; (650 <usb_vendor_request_handler+0x2cc>)

		*piLen = 2 + 1 + length;
     610:	3603      	adds	r6, #3
		pbData[1] = 0x00;

		length = (u8)strlen(GIT_REVISION);
		pbData[2] = length;

		memcpy(&pbData[3], GIT_REVISION, length);
     612:	f001 fb53 	bl	1cbc <memcpy>

		*piLen = 2 + 1 + length;
     616:	602e      	str	r6, [r5, #0]
     618:	e7ed      	b.n	5f6 <usb_vendor_request_handler+0x272>

	case UBERTOOTH_SET_PALEVEL:
		if( pSetup->wValue < 8 ) {
			cc2400_set(FREND, 8 | pSetup->wValue);
		} else {
			return FALSE;
     61a:	2000      	movs	r0, #0

	default:
		return FALSE;
	}
	return TRUE;
}
     61c:	b00a      	add	sp, #40	; 0x28
     61e:	bd70      	pop	{r4, r5, r6, pc}
     620:	10000518 	.word	0x10000518
     624:	2009c034 	.word	0x2009c034
     628:	2009c03c 	.word	0x2009c03c
     62c:	2009c038 	.word	0x2009c038
     630:	00001f10 	.word	0x00001f10
     634:	2009c054 	.word	0x2009c054
     638:	2009c058 	.word	0x2009c058
     63c:	2009c05c 	.word	0x2009c05c
     640:	1000263c 	.word	0x1000263c
     644:	10000448 	.word	0x10000448
     648:	4305bb21 	.word	0x4305bb21
     64c:	1000001c 	.word	0x1000001c
     650:	00001f01 	.word	0x00001f01

00000654 <queue_init>:
volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init()
{
	head = 0;
     654:	4b02      	ldr	r3, [pc, #8]	; (660 <queue_init+0xc>)
     656:	2200      	movs	r2, #0
     658:	60da      	str	r2, [r3, #12]
	tail = 0;
     65a:	611a      	str	r2, [r3, #16]
     65c:	4770      	bx	lr
     65e:	bf00      	nop
     660:	10000518 	.word	0x10000518

00000664 <enqueue>:
}

int enqueue(u8 *buf)
{
     664:	b570      	push	{r4, r5, r6, lr}
	int i;
	u8 h = head & 0x7F;
     666:	4c16      	ldr	r4, [pc, #88]	; (6c0 <enqueue+0x5c>)
     668:	68e1      	ldr	r1, [r4, #12]
	u8 t = tail & 0x7F;
     66a:	6923      	ldr	r3, [r4, #16]
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n)
     66c:	f001 017f 	and.w	r1, r1, #127	; 0x7f

int enqueue(u8 *buf)
{
	int i;
	u8 h = head & 0x7F;
	u8 t = tail & 0x7F;
     670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	u8 n = (t + 1) & 0x7F;
     674:	1c5a      	adds	r2, r3, #1

	/* fail if queue is full */
	if (h == n)
     676:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     67a:	4291      	cmp	r1, r2
     67c:	d01e      	beq.n	6bc <enqueue+0x58>
		return 0;

	fifo[t].clkn_high = clkn_high;
     67e:	4a11      	ldr	r2, [pc, #68]	; (6c4 <enqueue+0x60>)
     680:	4911      	ldr	r1, [pc, #68]	; (6c8 <enqueue+0x64>)
     682:	7815      	ldrb	r5, [r2, #0]
     684:	019b      	lsls	r3, r3, #6
     686:	18ca      	adds	r2, r1, r3
     688:	70d5      	strb	r5, [r2, #3]
	fifo[t].clk100ns = CLK100NS;
     68a:	4d10      	ldr	r5, [pc, #64]	; (6cc <enqueue+0x68>)
     68c:	682d      	ldr	r5, [r5, #0]
     68e:	6055      	str	r5, [r2, #4]

	USRLED_SET;
     690:	4a0f      	ldr	r2, [pc, #60]	; (6d0 <enqueue+0x6c>)
     692:	2502      	movs	r5, #2
     694:	6015      	str	r5, [r2, #0]
	for (i = 0; i < DMA_SIZE; i++)
     696:	2200      	movs	r2, #0
		fifo[t].data[i] = buf[i];
     698:	5c86      	ldrb	r6, [r0, r2]
     69a:	18d5      	adds	r5, r2, r3

	fifo[t].clkn_high = clkn_high;
	fifo[t].clk100ns = CLK100NS;

	USRLED_SET;
	for (i = 0; i < DMA_SIZE; i++)
     69c:	3201      	adds	r2, #1
     69e:	440d      	add	r5, r1
     6a0:	2a32      	cmp	r2, #50	; 0x32
		fifo[t].data[i] = buf[i];
     6a2:	73ae      	strb	r6, [r5, #14]

	fifo[t].clkn_high = clkn_high;
	fifo[t].clk100ns = CLK100NS;

	USRLED_SET;
	for (i = 0; i < DMA_SIZE; i++)
     6a4:	d1f8      	bne.n	698 <enqueue+0x34>
		fifo[t].data[i] = buf[i];
	fifo[t].status = status;
     6a6:	4908      	ldr	r1, [pc, #32]	; (6c8 <enqueue+0x64>)
     6a8:	7d22      	ldrb	r2, [r4, #20]
     6aa:	440b      	add	r3, r1
     6ac:	705a      	strb	r2, [r3, #1]
	status = 0;
     6ae:	2300      	movs	r3, #0
     6b0:	7523      	strb	r3, [r4, #20]
	++tail;
     6b2:	6923      	ldr	r3, [r4, #16]

	return 1;
     6b4:	2001      	movs	r0, #1
	USRLED_SET;
	for (i = 0; i < DMA_SIZE; i++)
		fifo[t].data[i] = buf[i];
	fifo[t].status = status;
	status = 0;
	++tail;
     6b6:	3301      	adds	r3, #1
     6b8:	6123      	str	r3, [r4, #16]

	return 1;
     6ba:	bd70      	pop	{r4, r5, r6, pc}
	u8 t = tail & 0x7F;
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n)
		return 0;
     6bc:	2000      	movs	r0, #0
	fifo[t].status = status;
	status = 0;
	++tail;

	return 1;
}
     6be:	bd70      	pop	{r4, r5, r6, pc}
     6c0:	10000518 	.word	0x10000518
     6c4:	100005f4 	.word	0x100005f4
     6c8:	100005f8 	.word	0x100005f8
     6cc:	40004008 	.word	0x40004008
     6d0:	2009c038 	.word	0x2009c038

000006d4 <dequeue>:

int dequeue()
{
     6d4:	b510      	push	{r4, lr}
	u8 h = head & 0x7F;
     6d6:	4c0d      	ldr	r4, [pc, #52]	; (70c <dequeue+0x38>)
     6d8:	68e3      	ldr	r3, [r4, #12]
	u8 t = tail & 0x7F;
     6da:	6922      	ldr	r2, [r4, #16]
	return 1;
}

int dequeue()
{
	u8 h = head & 0x7F;
     6dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	u8 t = tail & 0x7F;

	/* fail if queue is empty */
	if (h == t) {
     6e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     6e4:	4293      	cmp	r3, r2
     6e6:	d104      	bne.n	6f2 <dequeue+0x1e>
		USRLED_CLR;
     6e8:	4b09      	ldr	r3, [pc, #36]	; (710 <dequeue+0x3c>)
     6ea:	2202      	movs	r2, #2
     6ec:	601a      	str	r2, [r3, #0]
		return 0;
     6ee:	2000      	movs	r0, #0
     6f0:	bd10      	pop	{r4, pc}
	}

	USBHwEPWrite(BULK_IN_EP, (u8 *)&fifo[h], sizeof(usb_pkt_rx));
     6f2:	4908      	ldr	r1, [pc, #32]	; (714 <dequeue+0x40>)
     6f4:	2240      	movs	r2, #64	; 0x40
     6f6:	eb01 1183 	add.w	r1, r1, r3, lsl #6
     6fa:	2082      	movs	r0, #130	; 0x82
     6fc:	f001 f8ae 	bl	185c <USBHwEPWrite>
	++head;
     700:	68e3      	ldr	r3, [r4, #12]

	return 1;
     702:	2001      	movs	r0, #1
		USRLED_CLR;
		return 0;
	}

	USBHwEPWrite(BULK_IN_EP, (u8 *)&fifo[h], sizeof(usb_pkt_rx));
	++head;
     704:	3301      	adds	r3, #1
     706:	60e3      	str	r3, [r4, #12]

	return 1;
}
     708:	bd10      	pop	{r4, pc}
     70a:	bf00      	nop
     70c:	10000518 	.word	0x10000518
     710:	2009c03c 	.word	0x2009c03c
     714:	100005f8 	.word	0x100005f8

00000718 <ubertooth_usb_init>:
	}
	return TRUE;
}

int ubertooth_usb_init()
{
     718:	b508      	push	{r3, lr}
	// initialise stack
	USBInit();
     71a:	f000 ffd7 	bl	16cc <USBInit>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
     71e:	4806      	ldr	r0, [pc, #24]	; (738 <ubertooth_usb_init+0x20>)
     720:	f001 f9fe 	bl	1b20 <USBRegisterDescriptors>

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
     724:	4905      	ldr	r1, [pc, #20]	; (73c <ubertooth_usb_init+0x24>)
     726:	4a06      	ldr	r2, [pc, #24]	; (740 <ubertooth_usb_init+0x28>)
     728:	2002      	movs	r0, #2
     72a:	f000 ffc5 	bl	16b8 <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 |= ISER0_ISE_USB;
	
	// connect to bus
	USBHwConnect(TRUE);
     72e:	2001      	movs	r0, #1
     730:	f001 f863 	bl	17fa <USBHwConnect>

	return 0;
}
     734:	2000      	movs	r0, #0
     736:	bd08      	pop	{r3, pc}
     738:	00001e0c 	.word	0x00001e0c
     73c:	00000385 	.word	0x00000385
     740:	1000052d 	.word	0x1000052d

00000744 <TIMER0_IRQHandler>:
}

/* clkn_high is incremented each time CLK100NS rolls over */
void TIMER0_IRQHandler()
{
	if (T0IR & TIR_MR0_Interrupt) {
     744:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
     748:	6813      	ldr	r3, [r2, #0]
     74a:	07db      	lsls	r3, r3, #31
     74c:	d508      	bpl.n	760 <TIMER0_IRQHandler+0x1c>
		++clkn_high;
     74e:	4905      	ldr	r1, [pc, #20]	; (764 <TIMER0_IRQHandler+0x20>)
     750:	780b      	ldrb	r3, [r1, #0]
     752:	3301      	adds	r3, #1
     754:	b2db      	uxtb	r3, r3
     756:	700b      	strb	r3, [r1, #0]
		T0IR |= TIR_MR0_Interrupt;
     758:	6813      	ldr	r3, [r2, #0]
     75a:	f043 0301 	orr.w	r3, r3, #1
     75e:	6013      	str	r3, [r2, #0]
     760:	4770      	bx	lr
     762:	bf00      	nop
     764:	100005f4 	.word	0x100005f4

00000768 <DMA_IRQHandler>:
}

void DMA_IRQHandler()
{
	/* interrupt on channel 0 */
	if (DMACIntStat & (1 << 0)) {
     768:	4b0f      	ldr	r3, [pc, #60]	; (7a8 <DMA_IRQHandler+0x40>)
     76a:	681b      	ldr	r3, [r3, #0]
     76c:	07d9      	lsls	r1, r3, #31
     76e:	d519      	bpl.n	7a4 <DMA_IRQHandler+0x3c>
		if (DMACIntTCStat & (1 << 0)) {
     770:	4b0e      	ldr	r3, [pc, #56]	; (7ac <DMA_IRQHandler+0x44>)
     772:	681b      	ldr	r3, [r3, #0]
     774:	07da      	lsls	r2, r3, #31
     776:	d508      	bpl.n	78a <DMA_IRQHandler+0x22>
			DMACIntTCClear |= (1 << 0);
     778:	4a0d      	ldr	r2, [pc, #52]	; (7b0 <DMA_IRQHandler+0x48>)
     77a:	6813      	ldr	r3, [r2, #0]
     77c:	f043 0301 	orr.w	r3, r3, #1
     780:	6013      	str	r3, [r2, #0]
			++rx_tc;
     782:	4a0c      	ldr	r2, [pc, #48]	; (7b4 <DMA_IRQHandler+0x4c>)
     784:	6813      	ldr	r3, [r2, #0]
     786:	3301      	adds	r3, #1
     788:	6013      	str	r3, [r2, #0]
		}
		if (DMACIntErrStat & (1 << 0)) {
     78a:	4b0b      	ldr	r3, [pc, #44]	; (7b8 <DMA_IRQHandler+0x50>)
     78c:	681b      	ldr	r3, [r3, #0]
     78e:	07db      	lsls	r3, r3, #31
     790:	d508      	bpl.n	7a4 <DMA_IRQHandler+0x3c>
			DMACIntErrClr |= (1 << 0);
     792:	4a0a      	ldr	r2, [pc, #40]	; (7bc <DMA_IRQHandler+0x54>)
     794:	6813      	ldr	r3, [r2, #0]
     796:	f043 0301 	orr.w	r3, r3, #1
     79a:	6013      	str	r3, [r2, #0]
			++rx_err;
     79c:	4a08      	ldr	r2, [pc, #32]	; (7c0 <DMA_IRQHandler+0x58>)
     79e:	6813      	ldr	r3, [r2, #0]
     7a0:	3301      	adds	r3, #1
     7a2:	6013      	str	r3, [r2, #0]
     7a4:	4770      	bx	lr
     7a6:	bf00      	nop
     7a8:	50004000 	.word	0x50004000
     7ac:	50004004 	.word	0x50004004
     7b0:	50004008 	.word	0x50004008
     7b4:	100005e0 	.word	0x100005e0
     7b8:	5000400c 	.word	0x5000400c
     7bc:	50004010 	.word	0x50004010
     7c0:	10002674 	.word	0x10002674

000007c4 <cc2400_rx>:
	DIO_SSEL_CLR;
}

/* start un-buffered rx */
void cc2400_rx()
{
     7c4:	b508      	push	{r3, lr}
	if (modulation == MOD_BT_BASIC_RATE) {
     7c6:	4b2c      	ldr	r3, [pc, #176]	; (878 <cc2400_rx+0xb4>)
     7c8:	689a      	ldr	r2, [r3, #8]
     7ca:	b9ea      	cbnz	r2, 808 <cc2400_rx+0x44>
		cc2400_set(MANAND,  0x7fff);
     7cc:	200d      	movs	r0, #13
     7ce:	f647 71ff 	movw	r1, #32767	; 0x7fff
     7d2:	f000 fdf0 	bl	13b6 <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
     7d6:	2012      	movs	r0, #18
     7d8:	f642 3122 	movw	r1, #11042	; 0x2b22
     7dc:	f000 fdeb 	bl	13b6 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b); // without PRNG
     7e0:	2014      	movs	r0, #20
     7e2:	f241 314b 	movw	r1, #4939	; 0x134b
     7e6:	f000 fde6 	bl	13b6 <cc2400_set>
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
     7ea:	2020      	movs	r0, #32
     7ec:	f240 1101 	movw	r1, #257	; 0x101
     7f0:	f000 fde1 	bl	13b6 <cc2400_set>
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
     7f4:	4b21      	ldr	r3, [pc, #132]	; (87c <cc2400_rx+0xb8>)
     7f6:	2002      	movs	r0, #2
     7f8:	8819      	ldrh	r1, [r3, #0]
     7fa:	3901      	subs	r1, #1
     7fc:	b289      	uxth	r1, r1
     7fe:	f000 fdda 	bl	13b6 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
     802:	2003      	movs	r0, #3
     804:	2129      	movs	r1, #41	; 0x29
     806:	e01f      	b.n	848 <cc2400_rx+0x84>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
     808:	689b      	ldr	r3, [r3, #8]
     80a:	2b01      	cmp	r3, #1
     80c:	d132      	bne.n	874 <cc2400_rx+0xb0>
		cc2400_set(MANAND,  0x7fff);
     80e:	200d      	movs	r0, #13
     810:	f647 71ff 	movw	r1, #32767	; 0x7fff
     814:	f000 fdcf 	bl	13b6 <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
     818:	2012      	movs	r0, #18
     81a:	f642 3122 	movw	r1, #11042	; 0x2b22
     81e:	f000 fdca 	bl	13b6 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b); // without PRNG
     822:	2014      	movs	r0, #20
     824:	f241 314b 	movw	r1, #4939	; 0x134b
     828:	f000 fdc5 	bl	13b6 <cc2400_set>
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
     82c:	2020      	movs	r0, #32
     82e:	f240 1101 	movw	r1, #257	; 0x101
     832:	f000 fdc0 	bl	13b6 <cc2400_set>
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
     836:	4b11      	ldr	r3, [pc, #68]	; (87c <cc2400_rx+0xb8>)
     838:	2002      	movs	r0, #2
     83a:	8819      	ldrh	r1, [r3, #0]
     83c:	3901      	subs	r1, #1
     83e:	b289      	uxth	r1, r1
     840:	f000 fdb9 	bl	13b6 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0040); // 250 kHz frequency deviation
     844:	2003      	movs	r0, #3
     846:	2140      	movs	r1, #64	; 0x40
     848:	f000 fdb5 	bl	13b6 <cc2400_set>
	} else {
		/* oops */
		return;
	}
	while (!(cc2400_status() & XOSC16M_STABLE));
     84c:	f000 fdc6 	bl	13dc <cc2400_status>
     850:	0642      	lsls	r2, r0, #25
     852:	d5fb      	bpl.n	84c <cc2400_rx+0x88>
	cc2400_strobe(SFSON);
     854:	2061      	movs	r0, #97	; 0x61
     856:	f000 fdc8 	bl	13ea <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
     85a:	f000 fdbf 	bl	13dc <cc2400_status>
     85e:	0743      	lsls	r3, r0, #29
     860:	d5fb      	bpl.n	85a <cc2400_rx+0x96>
	cc2400_strobe(SRX);
     862:	2062      	movs	r0, #98	; 0x62
     864:	f000 fdc1 	bl	13ea <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
     868:	4b05      	ldr	r3, [pc, #20]	; (880 <cc2400_rx+0xbc>)
     86a:	2280      	movs	r2, #128	; 0x80
     86c:	601a      	str	r2, [r3, #0]
	HGM_SET;
     86e:	f44f 7280 	mov.w	r2, #256	; 0x100
     872:	601a      	str	r2, [r3, #0]
     874:	bd08      	pop	{r3, pc}
     876:	bf00      	nop
     878:	10000518 	.word	0x10000518
     87c:	10000448 	.word	0x10000448
     880:	2009c058 	.word	0x2009c058

00000884 <cc2400_txtest>:
#endif
}

void cc2400_txtest()
{
     884:	b510      	push	{r4, lr}
#ifdef TX_ENABLE
	if (modulation == MOD_BT_BASIC_RATE) {
     886:	4c27      	ldr	r4, [pc, #156]	; (924 <cc2400_txtest+0xa0>)
     888:	68a3      	ldr	r3, [r4, #8]
     88a:	b9bb      	cbnz	r3, 8bc <cc2400_txtest+0x38>
		cc2400_set(MANAND,  0x7fff);
     88c:	200d      	movs	r0, #13
     88e:	f647 71ff 	movw	r1, #32767	; 0x7fff
     892:	f000 fd90 	bl	13b6 <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
     896:	2012      	movs	r0, #18
     898:	f642 3122 	movw	r1, #11042	; 0x2b22
     89c:	f000 fd8b 	bl	13b6 <cc2400_set>
		cc2400_set(MDMTST0, 0x334b); // with PRNG
     8a0:	2014      	movs	r0, #20
     8a2:	f243 314b 	movw	r1, #13131	; 0x334b
     8a6:	f000 fd86 	bl	13b6 <cc2400_set>
		cc2400_set(FSDIV,   channel);
     8aa:	4b1f      	ldr	r3, [pc, #124]	; (928 <cc2400_txtest+0xa4>)
     8ac:	2002      	movs	r0, #2
     8ae:	8819      	ldrh	r1, [r3, #0]
     8b0:	b289      	uxth	r1, r1
     8b2:	f000 fd80 	bl	13b6 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
     8b6:	2003      	movs	r0, #3
     8b8:	2129      	movs	r1, #41	; 0x29
     8ba:	e019      	b.n	8f0 <cc2400_txtest+0x6c>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
     8bc:	68a3      	ldr	r3, [r4, #8]
     8be:	2b01      	cmp	r3, #1
     8c0:	d12f      	bne.n	922 <cc2400_txtest+0x9e>
		cc2400_set(MANAND,  0x7fff);
     8c2:	200d      	movs	r0, #13
     8c4:	f647 71ff 	movw	r1, #32767	; 0x7fff
     8c8:	f000 fd75 	bl	13b6 <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
     8cc:	2012      	movs	r0, #18
     8ce:	f642 3122 	movw	r1, #11042	; 0x2b22
     8d2:	f000 fd70 	bl	13b6 <cc2400_set>
		cc2400_set(MDMTST0, 0x334b); // with PRNG
     8d6:	2014      	movs	r0, #20
     8d8:	f243 314b 	movw	r1, #13131	; 0x334b
     8dc:	f000 fd6b 	bl	13b6 <cc2400_set>
		cc2400_set(FSDIV,   channel);
     8e0:	4b11      	ldr	r3, [pc, #68]	; (928 <cc2400_txtest+0xa4>)
     8e2:	2002      	movs	r0, #2
     8e4:	8819      	ldrh	r1, [r3, #0]
     8e6:	b289      	uxth	r1, r1
     8e8:	f000 fd65 	bl	13b6 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0040); // 250 kHz frequency deviation
     8ec:	2003      	movs	r0, #3
     8ee:	2140      	movs	r1, #64	; 0x40
     8f0:	f000 fd61 	bl	13b6 <cc2400_set>
	} else {
		/* oops */
		return;
	}
	while (!(cc2400_status() & XOSC16M_STABLE));
     8f4:	f000 fd72 	bl	13dc <cc2400_status>
     8f8:	0642      	lsls	r2, r0, #25
     8fa:	d5fb      	bpl.n	8f4 <cc2400_txtest+0x70>
	cc2400_strobe(SFSON);
     8fc:	2061      	movs	r0, #97	; 0x61
     8fe:	f000 fd74 	bl	13ea <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
     902:	f000 fd6b 	bl	13dc <cc2400_status>
     906:	0743      	lsls	r3, r0, #29
     908:	d5fb      	bpl.n	902 <cc2400_txtest+0x7e>
	TXLED_SET;
     90a:	4b08      	ldr	r3, [pc, #32]	; (92c <cc2400_txtest+0xa8>)
     90c:	f44f 7280 	mov.w	r2, #256	; 0x100
     910:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
     912:	2063      	movs	r0, #99	; 0x63
     914:	f000 fd69 	bl	13ea <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
     918:	4b05      	ldr	r3, [pc, #20]	; (930 <cc2400_txtest+0xac>)
     91a:	2280      	movs	r2, #128	; 0x80
     91c:	601a      	str	r2, [r3, #0]
#endif
	mode = MODE_TX_TEST;
     91e:	2303      	movs	r3, #3
     920:	62a3      	str	r3, [r4, #40]	; 0x28
     922:	bd10      	pop	{r4, pc}
     924:	10000518 	.word	0x10000518
     928:	10000448 	.word	0x10000448
     92c:	2009c038 	.word	0x2009c038
     930:	2009c058 	.word	0x2009c058

00000934 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest()
{
     934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     938:	b098      	sub	sp, #96	; 0x60
     93a:	af00      	add	r7, sp, #0
	u8 len = 22;
	u8 pa = 0;
	u8 txbuf[len];
	u8 rxbuf[len];

	mode = MODE_RANGE_TEST;
     93c:	4ba2      	ldr	r3, [pc, #648]	; (bc8 <cc2400_rangetest+0x294>)
     93e:	2405      	movs	r4, #5
     940:	629c      	str	r4, [r3, #40]	; 0x28

	txbuf[0] = len - 1; // length of data (rest of payload)
     942:	2315      	movs	r3, #21
     944:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	txbuf[1] = 0; // request
     948:	2300      	movs	r3, #0
     94a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	// read device serial number
	command[0] = 58;
     94e:	f107 0060 	add.w	r0, r7, #96	; 0x60
     952:	233a      	movs	r3, #58	; 0x3a
     954:	f840 3d58 	str.w	r3, [r0, #-88]!
	iap_entry(command, result);
     958:	4b9c      	ldr	r3, [pc, #624]	; (bcc <cc2400_rangetest+0x298>)
     95a:	f107 011c 	add.w	r1, r7, #28
     95e:	681b      	ldr	r3, [r3, #0]
     960:	f8c7 d004 	str.w	sp, [r7, #4]
     964:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
     966:	7f3a      	ldrb	r2, [r7, #28]
     968:	2a00      	cmp	r2, #0
     96a:	f040 8128 	bne.w	bbe <cc2400_rangetest+0x28a>
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
     96e:	6a3b      	ldr	r3, [r7, #32]
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
     970:	200d      	movs	r0, #13
	// read device serial number
	command[0] = 58;
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
     972:	0e19      	lsrs	r1, r3, #24
     974:	f887 104a 	strb.w	r1, [r7, #74]	; 0x4a
	txbuf[3] = (result[1] >> 16) & 0xFF;
     978:	0c19      	lsrs	r1, r3, #16
     97a:	f887 104b 	strb.w	r1, [r7, #75]	; 0x4b
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
     97e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
     982:	0a19      	lsrs	r1, r3, #8
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
     984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
     986:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
     98a:	0e19      	lsrs	r1, r3, #24
     98c:	f887 104e 	strb.w	r1, [r7, #78]	; 0x4e
	txbuf[7] = (result[2] >> 16) & 0xFF;
     990:	0c19      	lsrs	r1, r3, #16
     992:	f887 104f 	strb.w	r1, [r7, #79]	; 0x4f
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
     996:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
     99a:	0a19      	lsrs	r1, r3, #8
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
     99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
     99e:	f887 1050 	strb.w	r1, [r7, #80]	; 0x50
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
     9a2:	0e19      	lsrs	r1, r3, #24
     9a4:	f887 1052 	strb.w	r1, [r7, #82]	; 0x52
	txbuf[11] = (result[3] >> 16) & 0xFF;
     9a8:	0c19      	lsrs	r1, r3, #16
     9aa:	f887 1053 	strb.w	r1, [r7, #83]	; 0x53
	txbuf[12] = (result[3] >> 8) & 0xFF;
	txbuf[13] = result[3] & 0xFF;
     9ae:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
	txbuf[11] = (result[3] >> 16) & 0xFF;
	txbuf[12] = (result[3] >> 8) & 0xFF;
     9b2:	0a19      	lsrs	r1, r3, #8
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
     9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
	txbuf[11] = (result[3] >> 16) & 0xFF;
	txbuf[12] = (result[3] >> 8) & 0xFF;
     9b6:	f887 1054 	strb.w	r1, [r7, #84]	; 0x54
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
     9ba:	0e19      	lsrs	r1, r3, #24
     9bc:	f887 1056 	strb.w	r1, [r7, #86]	; 0x56
	txbuf[15] = (result[4] >> 16) & 0xFF;
     9c0:	0c19      	lsrs	r1, r3, #16
     9c2:	f887 1057 	strb.w	r1, [r7, #87]	; 0x57
	txbuf[16] = (result[4] >> 8) & 0xFF;
     9c6:	0a19      	lsrs	r1, r3, #8
     9c8:	f887 1058 	strb.w	r1, [r7, #88]	; 0x58
	txbuf[17] = result[4] & 0xFF;
     9cc:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
     9d0:	f647 71ff 	movw	r1, #32767	; 0x7fff
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
     9d4:	23ff      	movs	r3, #255	; 0xff
	txbuf[14] = (result[4] >> 24) & 0xFF;
	txbuf[15] = (result[4] >> 16) & 0xFF;
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
     9d6:	f887 205a 	strb.w	r2, [r7, #90]	; 0x5a
	txbuf[19] = 0; // request number
     9da:	f887 205b 	strb.w	r2, [r7, #91]	; 0x5b
	txbuf[20] = 0xff; // reply pa
     9de:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	txbuf[21] = 0xff; // reply number
     9e2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
	cc2400_set(LMTST,   0x2b22);
	cc2400_set(MDMTST0, 0x134b);
	cc2400_set(FSDIV,   channel);
     9e6:	4e7a      	ldr	r6, [pc, #488]	; (bd0 <cc2400_rangetest+0x29c>)
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
     9e8:	f000 fce5 	bl	13b6 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
     9ec:	2012      	movs	r0, #18
     9ee:	f642 3122 	movw	r1, #11042	; 0x2b22
     9f2:	f000 fce0 	bl	13b6 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
     9f6:	2014      	movs	r0, #20
     9f8:	f241 314b 	movw	r1, #4939	; 0x134b
     9fc:	f000 fcdb 	bl	13b6 <cc2400_set>
	cc2400_set(FSDIV,   channel);
     a00:	8831      	ldrh	r1, [r6, #0]
     a02:	2002      	movs	r0, #2
     a04:	b289      	uxth	r1, r1
     a06:	f000 fcd6 	bl	13b6 <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
     a0a:	202d      	movs	r0, #45	; 0x2d
     a0c:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
     a10:	f000 fcd1 	bl	13b6 <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
     a14:	202c      	movs	r0, #44	; 0x2c
     a16:	f241 5184 	movw	r1, #5508	; 0x1584
     a1a:	f000 fccc 	bl	13b6 <cc2400_set>
	cc2400_set(FREND,   8 | pa);
     a1e:	4620      	mov	r0, r4
     a20:	2108      	movs	r1, #8
     a22:	f000 fcc8 	bl	13b6 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
     a26:	2003      	movs	r0, #3
     a28:	2129      	movs	r1, #41	; 0x29
     a2a:	f000 fcc4 	bl	13b6 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
     a2e:	f000 fcd5 	bl	13dc <cc2400_status>
     a32:	0641      	lsls	r1, r0, #25
     a34:	d5fb      	bpl.n	a2e <cc2400_rangetest+0xfa>
	cc2400_strobe(SFSON);
     a36:	2061      	movs	r0, #97	; 0x61
     a38:	f000 fcd7 	bl	13ea <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
     a3c:	f000 fcce 	bl	13dc <cc2400_status>
     a40:	0742      	lsls	r2, r0, #29
     a42:	d5fb      	bpl.n	a3c <cc2400_rangetest+0x108>
	TXLED_SET;
     a44:	4b63      	ldr	r3, [pc, #396]	; (bd4 <cc2400_rangetest+0x2a0>)
     a46:	f44f 7280 	mov.w	r2, #256	; 0x100
     a4a:	4698      	mov	r8, r3
     a4c:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
     a4e:	4a62      	ldr	r2, [pc, #392]	; (bd8 <cc2400_rangetest+0x2a4>)
     a50:	2180      	movs	r1, #128	; 0x80
     a52:	6011      	str	r1, [r2, #0]
     a54:	2400      	movs	r4, #0
     a56:	b2e5      	uxtb	r5, r4
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
     a58:	2005      	movs	r0, #5
     a5a:	f045 0108 	orr.w	r1, r5, #8
     a5e:	f000 fcaa 	bl	13b6 <cc2400_set>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
     a62:	f04f 0900 	mov.w	r9, #0
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
     a66:	f887 505a 	strb.w	r5, [r7, #90]	; 0x5a
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
     a6a:	f887 905b 	strb.w	r9, [r7, #91]	; 0x5b
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     a6e:	200e      	movs	r0, #14
     a70:	f000 fc98 	bl	13a4 <cc2400_get>
     a74:	f000 001f 	and.w	r0, r0, #31
     a78:	280f      	cmp	r0, #15
     a7a:	d1f8      	bne.n	a6e <cc2400_rangetest+0x13a>
     a7c:	f04f 0a00 	mov.w	sl, #0
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
     a80:	f107 0548 	add.w	r5, r7, #72	; 0x48
     a84:	f815 100a 	ldrb.w	r1, [r5, sl]
     a88:	2070      	movs	r0, #112	; 0x70
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
     a8a:	f10a 0a01 	add.w	sl, sl, #1
				cc2400_set8(FIFOREG, txbuf[j]);
     a8e:	f000 fca0 	bl	13d2 <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
     a92:	f1ba 0f16 	cmp.w	sl, #22
     a96:	d1f3      	bne.n	a80 <cc2400_rangetest+0x14c>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
     a98:	2063      	movs	r0, #99	; 0x63
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
     a9a:	f109 0901 	add.w	r9, r9, #1
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
     a9e:	f000 fca4 	bl	13ea <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
     aa2:	f1b9 0f10 	cmp.w	r9, #16
     aa6:	d1e0      	bne.n	a6a <cc2400_rangetest+0x136>
     aa8:	3401      	adds	r4, #1
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
     aaa:	2c08      	cmp	r4, #8
     aac:	d1d3      	bne.n	a56 <cc2400_rangetest+0x122>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     aae:	200e      	movs	r0, #14
     ab0:	f000 fc78 	bl	13a4 <cc2400_get>
     ab4:	f000 001f 	and.w	r0, r0, #31
     ab8:	280f      	cmp	r0, #15
     aba:	d1f8      	bne.n	aae <cc2400_rangetest+0x17a>
	TXLED_CLR;
     abc:	4c47      	ldr	r4, [pc, #284]	; (bdc <cc2400_rangetest+0x2a8>)
     abe:	f44f 7380 	mov.w	r3, #256	; 0x100
     ac2:	6023      	str	r3, [r4, #0]
	cc2400_strobe(SRFOFF);
     ac4:	2064      	movs	r0, #100	; 0x64
     ac6:	f000 fc90 	bl	13ea <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
     aca:	f000 fc87 	bl	13dc <cc2400_status>
     ace:	0743      	lsls	r3, r0, #29
     ad0:	d4fb      	bmi.n	aca <cc2400_rangetest+0x196>
	cc2400_set(FSDIV, channel - 1);
     ad2:	8831      	ldrh	r1, [r6, #0]
     ad4:	2002      	movs	r0, #2
     ad6:	3901      	subs	r1, #1
     ad8:	b289      	uxth	r1, r1
     ada:	f000 fc6c 	bl	13b6 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
     ade:	f000 fc7d 	bl	13dc <cc2400_status>
     ae2:	0640      	lsls	r0, r0, #25
     ae4:	d5fb      	bpl.n	ade <cc2400_rangetest+0x1aa>
	cc2400_strobe(SFSON);
     ae6:	2061      	movs	r0, #97	; 0x61
     ae8:	f000 fc7f 	bl	13ea <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
     aec:	f000 fc76 	bl	13dc <cc2400_status>
     af0:	0741      	lsls	r1, r0, #29
     af2:	d5fb      	bpl.n	aec <cc2400_rangetest+0x1b8>
	RXLED_SET;
     af4:	2310      	movs	r3, #16
     af6:	f8c8 3000 	str.w	r3, [r8]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     afa:	200e      	movs	r0, #14
     afc:	f000 fc52 	bl	13a4 <cc2400_get>
     b00:	f000 001f 	and.w	r0, r0, #31
     b04:	280f      	cmp	r0, #15
     b06:	d1f8      	bne.n	afa <cc2400_rangetest+0x1c6>
		cc2400_strobe(SRX);
     b08:	2062      	movs	r0, #98	; 0x62
     b0a:	f000 fc6e 	bl	13ea <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
     b0e:	f000 fc65 	bl	13dc <cc2400_status>
     b12:	06c2      	lsls	r2, r0, #27
     b14:	d5fb      	bpl.n	b0e <cc2400_rangetest+0x1da>
		USRLED_SET;
     b16:	2302      	movs	r3, #2
     b18:	f8c8 3000 	str.w	r3, [r8]
		for (j = 0; j < len; j++)
     b1c:	f04f 0900 	mov.w	r9, #0
			rxbuf[j] = cc2400_get8(FIFOREG);
     b20:	2070      	movs	r0, #112	; 0x70
     b22:	f000 fc4d 	bl	13c0 <cc2400_get8>
     b26:	f107 0630 	add.w	r6, r7, #48	; 0x30
     b2a:	f806 0009 	strb.w	r0, [r6, r9]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
     b2e:	f109 0901 	add.w	r9, r9, #1
     b32:	f1b9 0f16 	cmp.w	r9, #22
     b36:	d1f3      	bne.n	b20 <cc2400_rangetest+0x1ec>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
     b38:	f000 fc50 	bl	13dc <cc2400_status>
     b3c:	0703      	lsls	r3, r0, #28
     b3e:	d402      	bmi.n	b46 <cc2400_rangetest+0x212>
			break;
		USRLED_CLR;
     b40:	2302      	movs	r3, #2
     b42:	6023      	str	r3, [r4, #0]
	}
     b44:	e7d9      	b.n	afa <cc2400_rangetest+0x1c6>

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     b46:	200e      	movs	r0, #14
     b48:	f000 fc2c 	bl	13a4 <cc2400_get>
     b4c:	f000 001f 	and.w	r0, r0, #31
     b50:	280f      	cmp	r0, #15
     b52:	d1f8      	bne.n	b46 <cc2400_rangetest+0x212>
	cc2400_strobe(SRFOFF);
     b54:	2064      	movs	r0, #100	; 0x64
     b56:	f000 fc48 	bl	13ea <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
     b5a:	f000 fc3f 	bl	13dc <cc2400_status>
     b5e:	f000 0004 	and.w	r0, r0, #4
     b62:	f000 02ff 	and.w	r2, r0, #255	; 0xff
     b66:	2800      	cmp	r0, #0
     b68:	d1f7      	bne.n	b5a <cc2400_rangetest+0x226>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
     b6a:	4b1d      	ldr	r3, [pc, #116]	; (be0 <cc2400_rangetest+0x2ac>)
     b6c:	2180      	movs	r1, #128	; 0x80
     b6e:	6019      	str	r1, [r3, #0]
#endif
	RXLED_CLR;
     b70:	2310      	movs	r3, #16
     b72:	6023      	str	r3, [r4, #0]

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
     b74:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
	PAEN_CLR;
#endif
	RXLED_CLR;

	// get test result
	rr.valid       = 1;
     b78:	4b1a      	ldr	r3, [pc, #104]	; (be4 <cc2400_rangetest+0x2b0>)
     b7a:	2101      	movs	r1, #1
	rr.request_pa  = rxbuf[18];
     b7c:	7058      	strb	r0, [r3, #1]
	rr.request_num = rxbuf[19];
     b7e:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
     b82:	f887 1049 	strb.w	r1, [r7, #73]	; 0x49
	RXLED_CLR;

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
	rr.request_num = rxbuf[19];
     b86:	7098      	strb	r0, [r3, #2]
	rr.reply_pa    = rxbuf[20];
     b88:	f897 0044 	ldrb.w	r0, [r7, #68]	; 0x44
     b8c:	70d8      	strb	r0, [r3, #3]
	rr.reply_num   = rxbuf[21];
     b8e:	f897 0045 	ldrb.w	r0, [r7, #69]	; 0x45
     b92:	7118      	strb	r0, [r3, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
		if (rxbuf[i] != txbuf[i])
     b94:	f816 e002 	ldrb.w	lr, [r6, r2]
     b98:	5ca8      	ldrb	r0, [r5, r2]
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
     b9a:	3201      	adds	r2, #1
		if (rxbuf[i] != txbuf[i])
			rr.valid = 0;
     b9c:	4586      	cmp	lr, r0
     b9e:	bf18      	it	ne
     ba0:	2100      	movne	r1, #0
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
     ba2:	2a12      	cmp	r2, #18
     ba4:	d1f6      	bne.n	b94 <cc2400_rangetest+0x260>
     ba6:	7019      	strb	r1, [r3, #0]
		if (rxbuf[i] != txbuf[i])
			rr.valid = 0;

	USRLED_CLR;
     ba8:	2302      	movs	r3, #2
     baa:	6023      	str	r3, [r4, #0]
	mode = MODE_IDLE;
     bac:	4b06      	ldr	r3, [pc, #24]	; (bc8 <cc2400_rangetest+0x294>)
     bae:	2200      	movs	r2, #0
     bb0:	629a      	str	r2, [r3, #40]	; 0x28
	if (requested_mode == MODE_RANGE_TEST)
     bb2:	6859      	ldr	r1, [r3, #4]
     bb4:	2905      	cmp	r1, #5
		requested_mode = MODE_IDLE;
     bb6:	bf08      	it	eq
     bb8:	605a      	streq	r2, [r3, #4]
     bba:	f8d7 d004 	ldr.w	sp, [r7, #4]
#endif
}
     bbe:	3760      	adds	r7, #96	; 0x60
     bc0:	46bd      	mov	sp, r7
     bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bc6:	bf00      	nop
     bc8:	10000518 	.word	0x10000518
     bcc:	00001f10 	.word	0x00001f10
     bd0:	10000448 	.word	0x10000448
     bd4:	2009c038 	.word	0x2009c038
     bd8:	2009c058 	.word	0x2009c058
     bdc:	2009c03c 	.word	0x2009c03c
     be0:	2009c05c 	.word	0x2009c05c
     be4:	1000263c 	.word	0x1000263c

00000be8 <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater()
{
     be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     bec:	b087      	sub	sp, #28
	int j;
	u8 len = 22;
	u8 pa = 0;
	u8 buf[len];

	mode = MODE_REPEATER;
     bee:	4b5c      	ldr	r3, [pc, #368]	; (d60 <cc2400_repeater+0x178>)
     bf0:	2206      	movs	r2, #6
     bf2:	629a      	str	r2, [r3, #40]	; 0x28

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(MANAND,  0x7fff);
     bf4:	200d      	movs	r0, #13
     bf6:	f647 71ff 	movw	r1, #32767	; 0x7fff
     bfa:	f000 fbdc 	bl	13b6 <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
		cc2400_set(MDMTST0, 0x134b);
		cc2400_set(FSDIV,   channel - 1);
     bfe:	4f59      	ldr	r7, [pc, #356]	; (d64 <cc2400_repeater+0x17c>)
	mode = MODE_REPEATER;

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(MANAND,  0x7fff);
		cc2400_set(LMTST,   0x2b22);
     c00:	2012      	movs	r0, #18
     c02:	f642 3122 	movw	r1, #11042	; 0x2b22
     c06:	f000 fbd6 	bl	13b6 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
     c0a:	2014      	movs	r0, #20
     c0c:	f241 314b 	movw	r1, #4939	; 0x134b
     c10:	f000 fbd1 	bl	13b6 <cc2400_set>
		cc2400_set(FSDIV,   channel - 1);
     c14:	8839      	ldrh	r1, [r7, #0]
     c16:	2002      	movs	r0, #2
     c18:	3901      	subs	r1, #1
     c1a:	b289      	uxth	r1, r1
     c1c:	f000 fbcb 	bl	13b6 <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
     c20:	202d      	movs	r0, #45	; 0x2d
     c22:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
     c26:	f000 fbc6 	bl	13b6 <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
     c2a:	202c      	movs	r0, #44	; 0x2c
     c2c:	f241 5184 	movw	r1, #5508	; 0x1584
     c30:	f000 fbc1 	bl	13b6 <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
     c34:	2005      	movs	r0, #5
     c36:	2108      	movs	r1, #8
     c38:	f000 fbbd 	bl	13b6 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
     c3c:	2003      	movs	r0, #3
     c3e:	2129      	movs	r1, #41	; 0x29
     c40:	f000 fbb9 	bl	13b6 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
     c44:	f000 fbca 	bl	13dc <cc2400_status>
     c48:	0641      	lsls	r1, r0, #25
     c4a:	d5fb      	bpl.n	c44 <cc2400_repeater+0x5c>
		cc2400_strobe(SFSON);
     c4c:	2061      	movs	r0, #97	; 0x61
     c4e:	f000 fbcc 	bl	13ea <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
     c52:	f000 fbc3 	bl	13dc <cc2400_status>
     c56:	0742      	lsls	r2, r0, #29
     c58:	d5fb      	bpl.n	c52 <cc2400_repeater+0x6a>
		RXLED_SET;
		TXLED_CLR;
     c5a:	4c43      	ldr	r4, [pc, #268]	; (d68 <cc2400_repeater+0x180>)
		cc2400_set(FREND,   0x0008); // minimum tx power
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		while (!(cc2400_status() & FS_LOCK));
		RXLED_SET;
     c5c:	4e43      	ldr	r6, [pc, #268]	; (d6c <cc2400_repeater+0x184>)
     c5e:	46a1      	mov	r9, r4
     c60:	46b0      	mov	r8, r6
     c62:	2310      	movs	r3, #16
     c64:	6033      	str	r3, [r6, #0]
		TXLED_CLR;
     c66:	f44f 7380 	mov.w	r3, #256	; 0x100
     c6a:	6023      	str	r3, [r4, #0]
		USRLED_CLR;
     c6c:	2302      	movs	r3, #2
     c6e:	6023      	str	r3, [r4, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
     c70:	4b3f      	ldr	r3, [pc, #252]	; (d70 <cc2400_repeater+0x188>)
     c72:	2280      	movs	r2, #128	; 0x80
     c74:	601a      	str	r2, [r3, #0]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     c76:	200e      	movs	r0, #14
     c78:	f000 fb94 	bl	13a4 <cc2400_get>
     c7c:	f000 001f 	and.w	r0, r0, #31
     c80:	280f      	cmp	r0, #15
     c82:	d1f8      	bne.n	c76 <cc2400_repeater+0x8e>
			USRLED_CLR;
     c84:	2302      	movs	r3, #2
     c86:	f8c9 3000 	str.w	r3, [r9]
			cc2400_strobe(SRX);
     c8a:	2062      	movs	r0, #98	; 0x62
     c8c:	f000 fbad 	bl	13ea <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
     c90:	f000 fba4 	bl	13dc <cc2400_status>
     c94:	06c3      	lsls	r3, r0, #27
     c96:	d5fb      	bpl.n	c90 <cc2400_repeater+0xa8>
			USRLED_SET;
     c98:	2302      	movs	r3, #2
     c9a:	f8c8 3000 	str.w	r3, [r8]
			for (i = 0; i < len; i++)
     c9e:	2500      	movs	r5, #0
				buf[i] = cc2400_get8(FIFOREG);
     ca0:	2070      	movs	r0, #112	; 0x70
     ca2:	f000 fb8d 	bl	13c0 <cc2400_get8>
     ca6:	f80d 0005 	strb.w	r0, [sp, r5]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
     caa:	3501      	adds	r5, #1
     cac:	2d16      	cmp	r5, #22
     cae:	d1f7      	bne.n	ca0 <cc2400_repeater+0xb8>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
     cb0:	f000 fb94 	bl	13dc <cc2400_status>
     cb4:	0705      	lsls	r5, r0, #28
     cb6:	d5de      	bpl.n	c76 <cc2400_repeater+0x8e>
				break;
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
		USRLED_CLR;
     cb8:	2302      	movs	r3, #2
     cba:	6023      	str	r3, [r4, #0]
		RXLED_CLR;
     cbc:	2310      	movs	r3, #16
     cbe:	6023      	str	r3, [r4, #0]
		cc2400_strobe(SRFOFF);
     cc0:	2064      	movs	r0, #100	; 0x64
     cc2:	f000 fb92 	bl	13ea <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
     cc6:	f000 fb89 	bl	13dc <cc2400_status>
     cca:	0740      	lsls	r0, r0, #29
     ccc:	d4fb      	bmi.n	cc6 <cc2400_repeater+0xde>
		while (!(cc2400_status() & XOSC16M_STABLE));
     cce:	f000 fb85 	bl	13dc <cc2400_status>
     cd2:	0641      	lsls	r1, r0, #25
     cd4:	d5fb      	bpl.n	cce <cc2400_repeater+0xe6>
		cc2400_set(FSDIV, channel);
     cd6:	8839      	ldrh	r1, [r7, #0]
     cd8:	2002      	movs	r0, #2
     cda:	b289      	uxth	r1, r1
     cdc:	f000 fb6b 	bl	13b6 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
     ce0:	f000 fb7c 	bl	13dc <cc2400_status>
     ce4:	0642      	lsls	r2, r0, #25
     ce6:	d5fb      	bpl.n	ce0 <cc2400_repeater+0xf8>
		cc2400_strobe(SFSON);
     ce8:	2061      	movs	r0, #97	; 0x61
     cea:	f000 fb7e 	bl	13ea <cc2400_strobe>
		TXLED_SET;
     cee:	f44f 7380 	mov.w	r3, #256	; 0x100
     cf2:	6033      	str	r3, [r6, #0]
		buf[0] = len - 1; // length of data (rest of payload)
     cf4:	2315      	movs	r3, #21
     cf6:	f88d 3000 	strb.w	r3, [sp]
		buf[1] = 1; // reply
     cfa:	2301      	movs	r3, #1
     cfc:	f88d 3001 	strb.w	r3, [sp, #1]
     d00:	2500      	movs	r5, #0
     d02:	b2ee      	uxtb	r6, r5
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
     d04:	f046 0108 	orr.w	r1, r6, #8
     d08:	2005      	movs	r0, #5
     d0a:	f000 fb54 	bl	13b6 <cc2400_set>
			buf[20] = pa;
     d0e:	f88d 6014 	strb.w	r6, [sp, #20]
			for (i = 0; i < 16; i++) {
     d12:	2600      	movs	r6, #0
				buf[21] = i;
     d14:	f88d 6015 	strb.w	r6, [sp, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
     d18:	200e      	movs	r0, #14
     d1a:	f000 fb43 	bl	13a4 <cc2400_get>
     d1e:	f000 001f 	and.w	r0, r0, #31
     d22:	280f      	cmp	r0, #15
     d24:	d1f8      	bne.n	d18 <cc2400_repeater+0x130>
     d26:	2700      	movs	r7, #0
					for (j = 0; j < len; j++)
						cc2400_set8(FIFOREG, buf[j]);
     d28:	f81d 1007 	ldrb.w	r1, [sp, r7]
     d2c:	2070      	movs	r0, #112	; 0x70
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
					for (j = 0; j < len; j++)
     d2e:	3701      	adds	r7, #1
						cc2400_set8(FIFOREG, buf[j]);
     d30:	f000 fb4f 	bl	13d2 <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
					for (j = 0; j < len; j++)
     d34:	2f16      	cmp	r7, #22
     d36:	d1f7      	bne.n	d28 <cc2400_repeater+0x140>
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
     d38:	2063      	movs	r0, #99	; 0x63
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
     d3a:	3601      	adds	r6, #1
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
					for (j = 0; j < len; j++)
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
     d3c:	f000 fb55 	bl	13ea <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
     d40:	2e10      	cmp	r6, #16
     d42:	d1e7      	bne.n	d14 <cc2400_repeater+0x12c>
     d44:	3501      	adds	r5, #1
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
     d46:	2d08      	cmp	r5, #8
     d48:	d1db      	bne.n	d02 <cc2400_repeater+0x11a>
					for (j = 0; j < len; j++)
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
     d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
     d4e:	6023      	str	r3, [r4, #0]
		cc2400_strobe(SRFOFF);
     d50:	2064      	movs	r0, #100	; 0x64
     d52:	f000 fb4a 	bl	13ea <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
     d56:	f000 fb41 	bl	13dc <cc2400_status>
     d5a:	0743      	lsls	r3, r0, #29
     d5c:	d4fb      	bmi.n	d56 <cc2400_repeater+0x16e>
     d5e:	e749      	b.n	bf4 <cc2400_repeater+0xc>
     d60:	10000518 	.word	0x10000518
     d64:	10000448 	.word	0x10000448
     d68:	2009c03c 	.word	0x2009c03c
     d6c:	2009c038 	.word	0x2009c038
     d70:	2009c058 	.word	0x2009c058

00000d74 <bt_stream_rx>:
	}
#endif
}

void bt_stream_rx()
{
     d74:	b570      	push	{r4, r5, r6, lr}
	u8 *tmp = NULL;
	u8 epstat;
	int i;

	RXLED_SET;
     d76:	4b2a      	ldr	r3, [pc, #168]	; (e20 <bt_stream_rx+0xac>)
     d78:	2210      	movs	r2, #16
     d7a:	601a      	str	r2, [r3, #0]

	queue_init();
     d7c:	f7ff fc6a 	bl	654 <queue_init>
	dio_ssp_init();
     d80:	f000 fa8a 	bl	1298 <dio_ssp_init>
	dma_init();
     d84:	f7ff fa70 	bl	268 <dma_init>
	dio_ssp_start();
     d88:	f7ff fad6 	bl	338 <dio_ssp_start>
	cc2400_rx();
     d8c:	f7ff fd1a 	bl	7c4 <cc2400_rx>

	while (rx_pkts) {
     d90:	4c24      	ldr	r4, [pc, #144]	; (e24 <bt_stream_rx+0xb0>)
     d92:	6823      	ldr	r3, [r4, #0]
     d94:	2b00      	cmp	r3, #0
     d96:	d03e      	beq.n	e16 <bt_stream_rx+0xa2>
		/* wait for DMA transfer */
		while ((rx_tc == 0) && (rx_err == 0));
     d98:	4d23      	ldr	r5, [pc, #140]	; (e28 <bt_stream_rx+0xb4>)
     d9a:	4e24      	ldr	r6, [pc, #144]	; (e2c <bt_stream_rx+0xb8>)
     d9c:	682b      	ldr	r3, [r5, #0]
     d9e:	b913      	cbnz	r3, da6 <bt_stream_rx+0x32>
     da0:	6833      	ldr	r3, [r6, #0]
     da2:	2b00      	cmp	r3, #0
     da4:	d0f8      	beq.n	d98 <bt_stream_rx+0x24>
		if (rx_tc % 2) {
     da6:	682b      	ldr	r3, [r5, #0]
     da8:	07d9      	lsls	r1, r3, #31
			/* swap buffers */
			tmp = active_rxbuf;
     daa:	bf41      	itttt	mi
     dac:	4b20      	ldrmi	r3, [pc, #128]	; (e30 <bt_stream_rx+0xbc>)
     dae:	689a      	ldrmi	r2, [r3, #8]
			active_rxbuf = idle_rxbuf;
     db0:	68d9      	ldrmi	r1, [r3, #12]
			idle_rxbuf = tmp;
     db2:	60da      	strmi	r2, [r3, #12]
		/* wait for DMA transfer */
		while ((rx_tc == 0) && (rx_err == 0));
		if (rx_tc % 2) {
			/* swap buffers */
			tmp = active_rxbuf;
			active_rxbuf = idle_rxbuf;
     db4:	bf48      	it	mi
     db6:	6099      	strmi	r1, [r3, #8]
			idle_rxbuf = tmp;
		}
		if (rx_err)
     db8:	6833      	ldr	r3, [r6, #0]
     dba:	b11b      	cbz	r3, dc4 <bt_stream_rx+0x50>
			status |= DMA_ERROR;
     dbc:	7d23      	ldrb	r3, [r4, #20]
     dbe:	f043 0302 	orr.w	r3, r3, #2
     dc2:	7523      	strb	r3, [r4, #20]
		if (rx_tc) {
     dc4:	682b      	ldr	r3, [r5, #0]
     dc6:	b1a3      	cbz	r3, df2 <bt_stream_rx+0x7e>
			if (rx_tc > 1)
     dc8:	4b17      	ldr	r3, [pc, #92]	; (e28 <bt_stream_rx+0xb4>)
     dca:	681b      	ldr	r3, [r3, #0]
     dcc:	2b01      	cmp	r3, #1
				status |= DMA_OVERFLOW;
     dce:	bf82      	ittt	hi
     dd0:	7d23      	ldrbhi	r3, [r4, #20]
     dd2:	f043 0301 	orrhi.w	r3, r3, #1
     dd6:	7523      	strbhi	r3, [r4, #20]
			if (enqueue(idle_rxbuf))
     dd8:	4b15      	ldr	r3, [pc, #84]	; (e30 <bt_stream_rx+0xbc>)
     dda:	68d8      	ldr	r0, [r3, #12]
     ddc:	f7ff fc42 	bl	664 <enqueue>
     de0:	b118      	cbz	r0, dea <bt_stream_rx+0x76>
				--rx_pkts;
     de2:	6823      	ldr	r3, [r4, #0]
     de4:	3b01      	subs	r3, #1
     de6:	6023      	str	r3, [r4, #0]
     de8:	e003      	b.n	df2 <bt_stream_rx+0x7e>
			else
				status |= FIFO_OVERFLOW;
     dea:	7d23      	ldrb	r3, [r4, #20]
     dec:	f043 0304 	orr.w	r3, r3, #4
     df0:	7523      	strb	r3, [r4, #20]
		}

		/* send via USB */
		epstat = USBHwEPGetStatus(BULK_IN_EP);
     df2:	2082      	movs	r0, #130	; 0x82
     df4:	f000 fd0c 	bl	1810 <USBHwEPGetStatus>
		if (!(epstat & EPSTAT_B1FULL))
     df8:	0682      	lsls	r2, r0, #26
			else
				status |= FIFO_OVERFLOW;
		}

		/* send via USB */
		epstat = USBHwEPGetStatus(BULK_IN_EP);
     dfa:	4604      	mov	r4, r0
		if (!(epstat & EPSTAT_B1FULL))
     dfc:	d401      	bmi.n	e02 <bt_stream_rx+0x8e>
			dequeue();
     dfe:	f7ff fc69 	bl	6d4 <dequeue>
		if (!(epstat & EPSTAT_B2FULL))
     e02:	0663      	lsls	r3, r4, #25
     e04:	d401      	bmi.n	e0a <bt_stream_rx+0x96>
			dequeue();
     e06:	f7ff fc65 	bl	6d4 <dequeue>
		USBHwISR();
     e0a:	f000 fd97 	bl	193c <USBHwISR>

		rx_tc = 0;
     e0e:	2300      	movs	r3, #0
     e10:	602b      	str	r3, [r5, #0]
		rx_err = 0;
     e12:	6033      	str	r3, [r6, #0]
     e14:	e7bc      	b.n	d90 <bt_stream_rx+0x1c>
	}
	//FIXME turn off rx
	RXLED_CLR;
     e16:	4b07      	ldr	r3, [pc, #28]	; (e34 <bt_stream_rx+0xc0>)
     e18:	2210      	movs	r2, #16
     e1a:	601a      	str	r2, [r3, #0]
     e1c:	bd70      	pop	{r4, r5, r6, pc}
     e1e:	bf00      	nop
     e20:	2009c038 	.word	0x2009c038
     e24:	10000518 	.word	0x10000518
     e28:	100005e0 	.word	0x100005e0
     e2c:	10002674 	.word	0x10002674
     e30:	10000448 	.word	0x10000448
     e34:	2009c03c 	.word	0x2009c03c

00000e38 <specan>:
}

/* spectrum analysis */
void specan()
{
     e38:	b5f0      	push	{r4, r5, r6, r7, lr}
     e3a:	b08f      	sub	sp, #60	; 0x3c
	u8 epstat;
	u16 f;
	u8 i = 0;
	u8 buf[DMA_SIZE];

	RXLED_SET;
     e3c:	4b3d      	ldr	r3, [pc, #244]	; (f34 <specan+0xfc>)
     e3e:	2210      	movs	r2, #16
     e40:	601a      	str	r2, [r3, #0]

	queue_init();
     e42:	f7ff fc07 	bl	654 <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
     e46:	4b3c      	ldr	r3, [pc, #240]	; (f38 <specan+0x100>)
     e48:	2280      	movs	r2, #128	; 0x80
     e4a:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(MANAND,  0x7fff);
     e4c:	200d      	movs	r0, #13
     e4e:	f647 71ff 	movw	r1, #32767	; 0x7fff
     e52:	f000 fab0 	bl	13b6 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
     e56:	2012      	movs	r0, #18
     e58:	f642 3122 	movw	r1, #11042	; 0x2b22
     e5c:	f000 faab 	bl	13b6 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
     e60:	2014      	movs	r0, #20
     e62:	f241 314b 	movw	r1, #4939	; 0x134b
     e66:	f000 faa6 	bl	13b6 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
     e6a:	2020      	movs	r0, #32
     e6c:	f240 1101 	movw	r1, #257	; 0x101
     e70:	f000 faa1 	bl	13b6 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
     e74:	2003      	movs	r0, #3
     e76:	2129      	movs	r1, #41	; 0x29
     e78:	f000 fa9d 	bl	13b6 <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
     e7c:	f000 faae 	bl	13dc <cc2400_status>
     e80:	0644      	lsls	r4, r0, #25
     e82:	d5fb      	bpl.n	e7c <specan+0x44>
	while ((cc2400_status() & FS_LOCK));
     e84:	f000 faaa 	bl	13dc <cc2400_status>
     e88:	f000 0004 	and.w	r0, r0, #4
     e8c:	f000 04ff 	and.w	r4, r0, #255	; 0xff
     e90:	2800      	cmp	r0, #0
     e92:	d1f7      	bne.n	e84 <specan+0x4c>

	while (requested_mode == MODE_SPECAN) {
     e94:	4b29      	ldr	r3, [pc, #164]	; (f3c <specan+0x104>)
     e96:	685a      	ldr	r2, [r3, #4]
     e98:	2a04      	cmp	r2, #4
     e9a:	d143      	bne.n	f24 <specan+0xec>
		for (f = low_freq; f < high_freq + 1; f++) {
     e9c:	4f28      	ldr	r7, [pc, #160]	; (f40 <specan+0x108>)
     e9e:	887d      	ldrh	r5, [r7, #2]
     ea0:	88bb      	ldrh	r3, [r7, #4]
     ea2:	b2ad      	uxth	r5, r5
     ea4:	b29b      	uxth	r3, r3
     ea6:	42ab      	cmp	r3, r5
     ea8:	dbf4      	blt.n	e94 <specan+0x5c>
     eaa:	1e69      	subs	r1, r5, #1
			cc2400_set(FSDIV, f - 1);
     eac:	2002      	movs	r0, #2
     eae:	b289      	uxth	r1, r1
     eb0:	f000 fa81 	bl	13b6 <cc2400_set>
			cc2400_strobe(SFSON);
     eb4:	2061      	movs	r0, #97	; 0x61
     eb6:	f000 fa98 	bl	13ea <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
     eba:	f000 fa8f 	bl	13dc <cc2400_status>
     ebe:	0740      	lsls	r0, r0, #29
     ec0:	d5fb      	bpl.n	eba <specan+0x82>
			cc2400_strobe(SRX);
     ec2:	2062      	movs	r0, #98	; 0x62
     ec4:	f000 fa91 	bl	13ea <cc2400_strobe>

			//u32 j = 100; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
     ec8:	eb04 0644 	add.w	r6, r4, r4, lsl #1
     ecc:	ab0e      	add	r3, sp, #56	; 0x38
     ece:	441e      	add	r6, r3
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
     ed0:	2006      	movs	r0, #6
			cc2400_strobe(SFSON);
			while (!(cc2400_status() & FS_LOCK));
			cc2400_strobe(SRX);

			//u32 j = 100; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
     ed2:	0a2b      	lsrs	r3, r5, #8
     ed4:	f806 3c34 	strb.w	r3, [r6, #-52]
			buf[(3 * i) + 1] = f  & 0xFF;
     ed8:	f806 5c33 	strb.w	r5, [r6, #-51]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
     edc:	f000 fa62 	bl	13a4 <cc2400_get>
			i++;
     ee0:	3401      	adds	r4, #1
     ee2:	b2e4      	uxtb	r4, r4
			cc2400_strobe(SRX);

			//u32 j = 100; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
     ee4:	0a00      	lsrs	r0, r0, #8
			i++;
			if (i == 16) {
     ee6:	2c10      	cmp	r4, #16
			cc2400_strobe(SRX);

			//u32 j = 100; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
     ee8:	f806 0c32 	strb.w	r0, [r6, #-50]
			i++;
			if (i == 16) {
     eec:	d111      	bne.n	f12 <specan+0xda>
				//FIXME ought to use different packet type
				enqueue(buf);
     eee:	a801      	add	r0, sp, #4
     ef0:	f7ff fbb8 	bl	664 <enqueue>
				i = 0;
				/* send via USB */
				epstat = USBHwEPGetStatus(BULK_IN_EP);
     ef4:	2082      	movs	r0, #130	; 0x82
     ef6:	f000 fc8b 	bl	1810 <USBHwEPGetStatus>
				if (!(epstat & EPSTAT_B1FULL))
     efa:	0681      	lsls	r1, r0, #26
			if (i == 16) {
				//FIXME ought to use different packet type
				enqueue(buf);
				i = 0;
				/* send via USB */
				epstat = USBHwEPGetStatus(BULK_IN_EP);
     efc:	4604      	mov	r4, r0
				if (!(epstat & EPSTAT_B1FULL))
     efe:	d401      	bmi.n	f04 <specan+0xcc>
					dequeue();
     f00:	f7ff fbe8 	bl	6d4 <dequeue>
				if (!(epstat & EPSTAT_B2FULL))
     f04:	0662      	lsls	r2, r4, #25
     f06:	d401      	bmi.n	f0c <specan+0xd4>
					dequeue();
     f08:	f7ff fbe4 	bl	6d4 <dequeue>
				USBHwISR();
     f0c:	f000 fd16 	bl	193c <USBHwISR>
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
			i++;
			if (i == 16) {
				//FIXME ought to use different packet type
				enqueue(buf);
				i = 0;
     f10:	2400      	movs	r4, #0
				if (!(epstat & EPSTAT_B2FULL))
					dequeue();
				USBHwISR();
			}

			cc2400_strobe(SRFOFF);
     f12:	2064      	movs	r0, #100	; 0x64
     f14:	f000 fa69 	bl	13ea <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
     f18:	f000 fa60 	bl	13dc <cc2400_status>
     f1c:	0743      	lsls	r3, r0, #29
     f1e:	d4fb      	bmi.n	f18 <specan+0xe0>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
     f20:	3501      	adds	r5, #1
     f22:	e7bd      	b.n	ea0 <specan+0x68>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	mode = MODE_IDLE;
     f24:	2200      	movs	r2, #0
     f26:	629a      	str	r2, [r3, #40]	; 0x28
	RXLED_CLR;
     f28:	4b06      	ldr	r3, [pc, #24]	; (f44 <specan+0x10c>)
     f2a:	2210      	movs	r2, #16
     f2c:	601a      	str	r2, [r3, #0]
}
     f2e:	b00f      	add	sp, #60	; 0x3c
     f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f32:	bf00      	nop
     f34:	2009c038 	.word	0x2009c038
     f38:	2009c058 	.word	0x2009c058
     f3c:	10000518 	.word	0x10000518
     f40:	10000448 	.word	0x10000448
     f44:	2009c03c 	.word	0x2009c03c

00000f48 <find_giac>:

/* an ugly but effective way to identify a GIAC (inquiry packet) */
int find_giac(u8 *buf)
{
     f48:	b570      	push	{r4, r5, r6, lr}
     f4a:	b08e      	sub	sp, #56	; 0x38
     f4c:	4605      	mov	r5, r0
	int i, j;
	const uint8_t giac[8][7] = {
     f4e:	466c      	mov	r4, sp
     f50:	4b1c      	ldr	r3, [pc, #112]	; (fc4 <find_giac+0x7c>)
     f52:	f103 0638 	add.w	r6, r3, #56	; 0x38
     f56:	4622      	mov	r2, r4
     f58:	6818      	ldr	r0, [r3, #0]
     f5a:	6859      	ldr	r1, [r3, #4]
     f5c:	3308      	adds	r3, #8
     f5e:	c203      	stmia	r2!, {r0, r1}
     f60:	42b3      	cmp	r3, r6
     f62:	4614      	mov	r4, r2
     f64:	d1f7      	bne.n	f56 <find_giac+0xe>
     f66:	4628      	mov	r0, r5
     f68:	f105 042c 	add.w	r4, r5, #44	; 0x2c
			{0x1d, 0x71, 0x63, 0x31, 0xcc, 0xd1, 0x79},
			{0x3a, 0xe2, 0xc6, 0x63, 0x99, 0xa2, 0xf3}};

    for (i = 0; i < (DMA_SIZE - 6); i++)
			for (j = 0; j < 8; j++)
	        	if (buf[i] == giac[j][0]
     f6c:	f810 1b01 	ldrb.w	r1, [r0], #1
     f70:	f10d 0301 	add.w	r3, sp, #1
     f74:	f10d 0239 	add.w	r2, sp, #57	; 0x39
     f78:	f813 5c01 	ldrb.w	r5, [r3, #-1]
     f7c:	428d      	cmp	r5, r1
     f7e:	d117      	bne.n	fb0 <find_giac+0x68>
						&& buf[i + 1] == giac[j][1]
     f80:	7806      	ldrb	r6, [r0, #0]
     f82:	781d      	ldrb	r5, [r3, #0]
     f84:	42ae      	cmp	r6, r5
     f86:	d113      	bne.n	fb0 <find_giac+0x68>
						&& buf[i + 2] == giac[j][2]
     f88:	7846      	ldrb	r6, [r0, #1]
     f8a:	785d      	ldrb	r5, [r3, #1]
     f8c:	42ae      	cmp	r6, r5
     f8e:	d10f      	bne.n	fb0 <find_giac+0x68>
						&& buf[i + 3] == giac[j][3]
     f90:	7886      	ldrb	r6, [r0, #2]
     f92:	789d      	ldrb	r5, [r3, #2]
     f94:	42ae      	cmp	r6, r5
     f96:	d10b      	bne.n	fb0 <find_giac+0x68>
						&& buf[i + 4] == giac[j][4]
     f98:	78c6      	ldrb	r6, [r0, #3]
     f9a:	78dd      	ldrb	r5, [r3, #3]
     f9c:	42ae      	cmp	r6, r5
     f9e:	d107      	bne.n	fb0 <find_giac+0x68>
						&& buf[i + 5] == giac[j][5]
     fa0:	7906      	ldrb	r6, [r0, #4]
     fa2:	791d      	ldrb	r5, [r3, #4]
     fa4:	42ae      	cmp	r6, r5
     fa6:	d103      	bne.n	fb0 <find_giac+0x68>
						&& buf[i + 6] == giac[j][6])
     fa8:	7946      	ldrb	r6, [r0, #5]
     faa:	795d      	ldrb	r5, [r3, #5]
     fac:	42ae      	cmp	r6, r5
     fae:	d006      	beq.n	fbe <find_giac+0x76>
     fb0:	3307      	adds	r3, #7
			{0xeb, 0x8b, 0x19, 0x8e, 0x66, 0x8b, 0xce},
			{0x1d, 0x71, 0x63, 0x31, 0xcc, 0xd1, 0x79},
			{0x3a, 0xe2, 0xc6, 0x63, 0x99, 0xa2, 0xf3}};

    for (i = 0; i < (DMA_SIZE - 6); i++)
			for (j = 0; j < 8; j++)
     fb2:	4293      	cmp	r3, r2
     fb4:	d1e0      	bne.n	f78 <find_giac+0x30>
			{0x75, 0xc5, 0x8c, 0xc7, 0x33, 0x45, 0xe7},
			{0xeb, 0x8b, 0x19, 0x8e, 0x66, 0x8b, 0xce},
			{0x1d, 0x71, 0x63, 0x31, 0xcc, 0xd1, 0x79},
			{0x3a, 0xe2, 0xc6, 0x63, 0x99, 0xa2, 0xf3}};

    for (i = 0; i < (DMA_SIZE - 6); i++)
     fb6:	42a0      	cmp	r0, r4
     fb8:	d1d8      	bne.n	f6c <find_giac+0x24>
						&& buf[i + 4] == giac[j][4]
						&& buf[i + 5] == giac[j][5]
						&& buf[i + 6] == giac[j][6])
					return 1;

	return 0;
     fba:	2000      	movs	r0, #0
     fbc:	e000      	b.n	fc0 <find_giac+0x78>
						&& buf[i + 2] == giac[j][2]
						&& buf[i + 3] == giac[j][3]
						&& buf[i + 4] == giac[j][4]
						&& buf[i + 5] == giac[j][5]
						&& buf[i + 6] == giac[j][6])
					return 1;
     fbe:	2001      	movs	r0, #1

	return 0;
}
     fc0:	b00e      	add	sp, #56	; 0x38
     fc2:	bd70      	pop	{r4, r5, r6, pc}
     fc4:	00001ec9 	.word	0x00001ec9

00000fc8 <bt_test_rx>:

void bt_test_rx()
{
     fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8 *tmp = NULL;
	int i;
	int countdown = 0;
	int num_giacs = 0;
     fca:	2400      	movs	r4, #0

	dio_ssp_init();
     fcc:	f000 f964 	bl	1298 <dio_ssp_init>

void bt_test_rx()
{
	u8 *tmp = NULL;
	int i;
	int countdown = 0;
     fd0:	4625      	mov	r5, r4
	int num_giacs = 0;

	dio_ssp_init();
	dma_init();
     fd2:	f7ff f949 	bl	268 <dma_init>
	dio_ssp_start();
     fd6:	f7ff f9af 	bl	338 <dio_ssp_start>
	cc2400_rx();
     fda:	f7ff fbf3 	bl	7c4 <cc2400_rx>

	while (num_giacs < 20) {
		/* wait for DMA transfer */
		while ((rx_tc == 0) && (rx_err == 0));
     fde:	4e1b      	ldr	r6, [pc, #108]	; (104c <bt_test_rx+0x84>)
     fe0:	4f1b      	ldr	r7, [pc, #108]	; (1050 <bt_test_rx+0x88>)
     fe2:	6833      	ldr	r3, [r6, #0]
     fe4:	b913      	cbnz	r3, fec <bt_test_rx+0x24>
     fe6:	683b      	ldr	r3, [r7, #0]
     fe8:	2b00      	cmp	r3, #0
     fea:	d0f8      	beq.n	fde <bt_test_rx+0x16>
		if (rx_tc % 2) {
     fec:	6833      	ldr	r3, [r6, #0]
     fee:	07db      	lsls	r3, r3, #31
			/* swap buffers */
			tmp = active_rxbuf;
     ff0:	bf41      	itttt	mi
     ff2:	4b18      	ldrmi	r3, [pc, #96]	; (1054 <bt_test_rx+0x8c>)
     ff4:	689a      	ldrmi	r2, [r3, #8]
			active_rxbuf = idle_rxbuf;
     ff6:	68d9      	ldrmi	r1, [r3, #12]
			idle_rxbuf = tmp;
     ff8:	60da      	strmi	r2, [r3, #12]
		/* wait for DMA transfer */
		while ((rx_tc == 0) && (rx_err == 0));
		if (rx_tc % 2) {
			/* swap buffers */
			tmp = active_rxbuf;
			active_rxbuf = idle_rxbuf;
     ffa:	bf48      	it	mi
     ffc:	6099      	strmi	r1, [r3, #8]
			idle_rxbuf = tmp;
		}
		if (rx_err)
     ffe:	683b      	ldr	r3, [r7, #0]
    1000:	b113      	cbz	r3, 1008 <bt_test_rx+0x40>
			RXLED_CLR;
    1002:	4b15      	ldr	r3, [pc, #84]	; (1058 <bt_test_rx+0x90>)
    1004:	2210      	movs	r2, #16
    1006:	601a      	str	r2, [r3, #0]
		if (rx_tc) {
    1008:	6833      	ldr	r3, [r6, #0]
    100a:	b1cb      	cbz	r3, 1040 <bt_test_rx+0x78>
			if (rx_tc > 1)
    100c:	4b0f      	ldr	r3, [pc, #60]	; (104c <bt_test_rx+0x84>)
    100e:	681b      	ldr	r3, [r3, #0]
    1010:	2b01      	cmp	r3, #1
				TXLED_CLR;
    1012:	bf82      	ittt	hi
    1014:	4b10      	ldrhi	r3, [pc, #64]	; (1058 <bt_test_rx+0x90>)
    1016:	f44f 7280 	movhi.w	r2, #256	; 0x100
    101a:	601a      	strhi	r2, [r3, #0]
			if (find_giac(idle_rxbuf)) {
    101c:	4b0d      	ldr	r3, [pc, #52]	; (1054 <bt_test_rx+0x8c>)
    101e:	68d8      	ldr	r0, [r3, #12]
    1020:	f7ff ff92 	bl	f48 <find_giac>
    1024:	b128      	cbz	r0, 1032 <bt_test_rx+0x6a>
				USRLED_SET;
    1026:	4b0d      	ldr	r3, [pc, #52]	; (105c <bt_test_rx+0x94>)
    1028:	2202      	movs	r2, #2
    102a:	601a      	str	r2, [r3, #0]
				countdown = 100;
				num_giacs++;
    102c:	3401      	adds	r4, #1
		if (rx_tc) {
			if (rx_tc > 1)
				TXLED_CLR;
			if (find_giac(idle_rxbuf)) {
				USRLED_SET;
				countdown = 100;
    102e:	2564      	movs	r5, #100	; 0x64
    1030:	e006      	b.n	1040 <bt_test_rx+0x78>
				num_giacs++;
			} else {
				if (countdown == 0) {
    1032:	b925      	cbnz	r5, 103e <bt_test_rx+0x76>
					/* win if more than 32 GIACs seen during this countdown */
					//if (num_giacs > 32)
						//break;
					USRLED_CLR;
    1034:	4b08      	ldr	r3, [pc, #32]	; (1058 <bt_test_rx+0x90>)
    1036:	2202      	movs	r2, #2
    1038:	601a      	str	r2, [r3, #0]
					num_giacs = 0;
    103a:	462c      	mov	r4, r5
    103c:	e000      	b.n	1040 <bt_test_rx+0x78>
				} else {
					--countdown;
    103e:	3d01      	subs	r5, #1
				}
			}
		}

		rx_tc = 0;
    1040:	2300      	movs	r3, #0
	dio_ssp_init();
	dma_init();
	dio_ssp_start();
	cc2400_rx();

	while (num_giacs < 20) {
    1042:	2c13      	cmp	r4, #19
					--countdown;
				}
			}
		}

		rx_tc = 0;
    1044:	6033      	str	r3, [r6, #0]
		rx_err = 0;
    1046:	603b      	str	r3, [r7, #0]
	dio_ssp_init();
	dma_init();
	dio_ssp_start();
	cc2400_rx();

	while (num_giacs < 20) {
    1048:	ddc9      	ble.n	fde <bt_test_rx+0x16>

		rx_tc = 0;
		rx_err = 0;
	}
	//FIXME turn off rx
}
    104a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    104c:	100005e0 	.word	0x100005e0
    1050:	10002674 	.word	0x10002674
    1054:	10000448 	.word	0x10000448
    1058:	2009c03c 	.word	0x2009c03c
    105c:	2009c038 	.word	0x2009c038

00001060 <main>:
	u32 i = 400 * ms;
	while (--i);
}

int main()
{
    1060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	gpio_init();

	/* blinky */
	for (i = 0; i < 2; i++) {
		TXLED_SET;
    1064:	4c3d      	ldr	r4, [pc, #244]	; (115c <main+0xfc>)
		RXLED_SET;
		USRLED_SET;
		waitms(200);
		TXLED_CLR;
    1066:	4d3e      	ldr	r5, [pc, #248]	; (1160 <main+0x100>)

int main()
{
	int i;

	gpio_init();
    1068:	f000 f8fc 	bl	1264 <gpio_init>

	/* blinky */
	for (i = 0; i < 2; i++) {
		TXLED_SET;
    106c:	f44f 7680 	mov.w	r6, #256	; 0x100
		RXLED_SET;
    1070:	2210      	movs	r2, #16
		USRLED_SET;
    1072:	2302      	movs	r3, #2

	gpio_init();

	/* blinky */
	for (i = 0; i < 2; i++) {
		TXLED_SET;
    1074:	6026      	str	r6, [r4, #0]
		RXLED_SET;
    1076:	6022      	str	r2, [r4, #0]
		USRLED_SET;
    1078:	6023      	str	r3, [r4, #0]
		waitms(200);
		TXLED_CLR;
    107a:	602e      	str	r6, [r5, #0]
		RXLED_CLR;
    107c:	602a      	str	r2, [r5, #0]
		USRLED_CLR;
    107e:	602b      	str	r3, [r5, #0]

	gpio_init();

	/* blinky */
	for (i = 0; i < 2; i++) {
		TXLED_SET;
    1080:	6026      	str	r6, [r4, #0]
		RXLED_SET;
    1082:	6022      	str	r2, [r4, #0]
		USRLED_SET;
    1084:	6023      	str	r3, [r4, #0]
		waitms(200);
		TXLED_CLR;
    1086:	602e      	str	r6, [r5, #0]
		RXLED_CLR;
    1088:	602a      	str	r2, [r5, #0]
		USRLED_CLR;
    108a:	602b      	str	r3, [r5, #0]
		waitms(200);
	}

	/* cc2400_test */
	cc2400_init();
    108c:	f000 f96e 	bl	136c <cc2400_init>
	TXLED_SET;
    1090:	6026      	str	r6, [r4, #0]
	waitms(200);
	TXLED_CLR;
    1092:	602e      	str	r6, [r5, #0]
	waitms(200);
	cc2400_reset();
    1094:	f000 f9b0 	bl	13f8 <cc2400_reset>
	TXLED_SET;
    1098:	6026      	str	r6, [r4, #0]
	waitms(200);
	TXLED_CLR;
	waitms(200);
	if (cc2400_get(AGCCTRL) != 0xf700)
    109a:	2004      	movs	r0, #4
	TXLED_CLR;
	waitms(200);
	cc2400_reset();
	TXLED_SET;
	waitms(200);
	TXLED_CLR;
    109c:	602e      	str	r6, [r5, #0]
	waitms(200);
	if (cc2400_get(AGCCTRL) != 0xf700)
    109e:	f000 f981 	bl	13a4 <cc2400_get>
    10a2:	f5b0 4f77 	cmp.w	r0, #63232	; 0xf700
    10a6:	d000      	beq.n	10aa <main+0x4a>
		while(1);
    10a8:	e7fe      	b.n	10a8 <main+0x48>
	TXLED_SET;
    10aa:	6026      	str	r6, [r4, #0]
	waitms(200);

	/* clock_test */
	clock_start();
    10ac:	f000 f9ba 	bl	1424 <clock_start>
    10b0:	2604      	movs	r6, #4
	for (i = 0; i < 4; i++) {
		RXLED_SET;
    10b2:	2710      	movs	r7, #16
		wait(2);
    10b4:	2002      	movs	r0, #2
	waitms(200);

	/* clock_test */
	clock_start();
	for (i = 0; i < 4; i++) {
		RXLED_SET;
    10b6:	6027      	str	r7, [r4, #0]
		wait(2);
    10b8:	f000 f8a4 	bl	1204 <wait>
		RXLED_CLR;
    10bc:	602f      	str	r7, [r5, #0]
		wait(2);
    10be:	2002      	movs	r0, #2
    10c0:	f000 f8a0 	bl	1204 <wait>
	TXLED_SET;
	waitms(200);

	/* clock_test */
	clock_start();
	for (i = 0; i < 4; i++) {
    10c4:	3e01      	subs	r6, #1
		RXLED_SET;
    10c6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 115c <main+0xfc>
	TXLED_SET;
	waitms(200);

	/* clock_test */
	clock_start();
	for (i = 0; i < 4; i++) {
    10ca:	d1f2      	bne.n	10b2 <main+0x52>
	 * and in timer mode.  The TIMER0 peripheral clock should have been set to
	 * cclk/2 (50 MHz) by clock_start().
	 */

	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    10cc:	4a25      	ldr	r2, [pc, #148]	; (1164 <main+0x104>)
	clkn_high = 0;
    10ce:	4b26      	ldr	r3, [pc, #152]	; (1168 <main+0x108>)
	 * and in timer mode.  The TIMER0 peripheral clock should have been set to
	 * cclk/2 (50 MHz) by clock_start().
	 */

	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    10d0:	2402      	movs	r4, #2
		RXLED_SET;
		wait(2);
		RXLED_CLR;
		wait(2);
	}
	RXLED_SET;
    10d2:	f8c8 7000 	str.w	r7, [r8]
	 * and in timer mode.  The TIMER0 peripheral clock should have been set to
	 * cclk/2 (50 MHz) by clock_start().
	 */

	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    10d6:	6014      	str	r4, [r2, #0]
	clkn_high = 0;
    10d8:	701e      	strb	r6, [r3, #0]
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods makes one
	 * CLK100NS period (100ns).  CLK100NS resets every 2^15 * 10^5 (3276800000)
	 * steps, roughly 5.5 minutes.
	 */
	T0PR = 4;
    10da:	4b24      	ldr	r3, [pc, #144]	; (116c <main+0x10c>)
    10dc:	2104      	movs	r1, #4
    10de:	6019      	str	r1, [r3, #0]
	T0MR0 = 3276799999;
    10e0:	4923      	ldr	r1, [pc, #140]	; (1170 <main+0x110>)
    10e2:	60d9      	str	r1, [r3, #12]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    10e4:	2103      	movs	r1, #3
    10e6:	6099      	str	r1, [r3, #8]
	ISER0 |= ISER0_ISE_TIMER0;
    10e8:	4922      	ldr	r1, [pc, #136]	; (1174 <main+0x114>)
    10ea:	680b      	ldr	r3, [r1, #0]
    10ec:	4323      	orrs	r3, r4
    10ee:	600b      	str	r3, [r1, #0]

	/* start timer */
	T0TCR = TCR_Counter_Enable;
    10f0:	2301      	movs	r3, #1
    10f2:	6013      	str	r3, [r2, #0]
		wait(2);
	}
	RXLED_SET;

	clkn_init();
	bt_test_rx();
    10f4:	f7ff ff68 	bl	fc8 <bt_test_rx>
	USRLED_SET;
    10f8:	f8c8 4000 	str.w	r4, [r8]

	/*
	 * Now we function like bluetooth_rxtx so that the USB interface can be
	 * tested.
	 */
	ubertooth_usb_init();
    10fc:	f7ff fb0c 	bl	718 <ubertooth_usb_init>

	while (1) {
		USBHwISR();
    1100:	f000 fc1c 	bl	193c <USBHwISR>
		if (rx_pkts)
    1104:	4b1c      	ldr	r3, [pc, #112]	; (1178 <main+0x118>)
    1106:	681a      	ldr	r2, [r3, #0]
    1108:	b112      	cbz	r2, 1110 <main+0xb0>
			bt_stream_rx();
    110a:	f7ff fe33 	bl	d74 <bt_stream_rx>
    110e:	e7f7      	b.n	1100 <main+0xa0>
		else if (requested_mode == MODE_TX_TEST && mode != MODE_TX_TEST)
    1110:	685a      	ldr	r2, [r3, #4]
    1112:	2a03      	cmp	r2, #3
    1114:	d105      	bne.n	1122 <main+0xc2>
    1116:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1118:	2a03      	cmp	r2, #3
    111a:	d002      	beq.n	1122 <main+0xc2>
			cc2400_txtest();
    111c:	f7ff fbb2 	bl	884 <cc2400_txtest>
    1120:	e7ee      	b.n	1100 <main+0xa0>
		else if (requested_mode == MODE_RANGE_TEST && mode != MODE_RANGE_TEST)
    1122:	685a      	ldr	r2, [r3, #4]
    1124:	2a05      	cmp	r2, #5
    1126:	d106      	bne.n	1136 <main+0xd6>
    1128:	4a13      	ldr	r2, [pc, #76]	; (1178 <main+0x118>)
    112a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    112c:	2a05      	cmp	r2, #5
    112e:	d002      	beq.n	1136 <main+0xd6>
			cc2400_rangetest();
    1130:	f7ff fc00 	bl	934 <cc2400_rangetest>
    1134:	e7e4      	b.n	1100 <main+0xa0>
		else if (requested_mode == MODE_REPEATER && mode != MODE_REPEATER)
    1136:	685a      	ldr	r2, [r3, #4]
    1138:	2a06      	cmp	r2, #6
    113a:	d105      	bne.n	1148 <main+0xe8>
    113c:	4a0e      	ldr	r2, [pc, #56]	; (1178 <main+0x118>)
    113e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    1140:	2a06      	cmp	r2, #6
    1142:	d001      	beq.n	1148 <main+0xe8>
			cc2400_repeater();
    1144:	f7ff fd50 	bl	be8 <cc2400_repeater>
		else if (requested_mode == MODE_SPECAN && mode != MODE_SPECAN)
    1148:	685b      	ldr	r3, [r3, #4]
    114a:	2b04      	cmp	r3, #4
    114c:	d1d8      	bne.n	1100 <main+0xa0>
    114e:	4b0a      	ldr	r3, [pc, #40]	; (1178 <main+0x118>)
    1150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1152:	2b04      	cmp	r3, #4
    1154:	d0d4      	beq.n	1100 <main+0xa0>
			specan();
    1156:	f7ff fe6f 	bl	e38 <specan>
    115a:	e7d1      	b.n	1100 <main+0xa0>
    115c:	2009c038 	.word	0x2009c038
    1160:	2009c03c 	.word	0x2009c03c
    1164:	40004004 	.word	0x40004004
    1168:	100005f4 	.word	0x100005f4
    116c:	4000400c 	.word	0x4000400c
    1170:	c34fffff 	.word	0xc34fffff
    1174:	e000e100 	.word	0xe000e100
    1178:	10000518 	.word	0x10000518

0000117c <USB_IRQHandler>:
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
	USBHwISR();
    117c:	f000 bbde 	b.w	193c <USBHwISR>

00001180 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    1180:	b508      	push	{r3, lr}
    1182:	4a0d      	ldr	r2, [pc, #52]	; (11b8 <Reset_Handler+0x38>)
    1184:	4b0d      	ldr	r3, [pc, #52]	; (11bc <Reset_Handler+0x3c>)
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    1186:	490e      	ldr	r1, [pc, #56]	; (11c0 <Reset_Handler+0x40>)
    1188:	428b      	cmp	r3, r1
    118a:	d204      	bcs.n	1196 <Reset_Handler+0x16>
	{
		*dest++ = *src++;
    118c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1190:	f843 1b04 	str.w	r1, [r3], #4
    1194:	e7f7      	b.n	1186 <Reset_Handler+0x6>
    1196:	4b0b      	ldr	r3, [pc, #44]	; (11c4 <Reset_Handler+0x44>)
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    1198:	4a0b      	ldr	r2, [pc, #44]	; (11c8 <Reset_Handler+0x48>)
    119a:	4293      	cmp	r3, r2
    119c:	d203      	bcs.n	11a6 <Reset_Handler+0x26>
	{
		*src++ = 0;
    119e:	2200      	movs	r2, #0
    11a0:	f843 2b04 	str.w	r2, [r3], #4
    11a4:	e7f8      	b.n	1198 <Reset_Handler+0x18>
	}

	__libc_init_array();
    11a6:	f7fe ffbf 	bl	128 <__libc_init_array>

	// Set the vector table location.
	SCB_VTOR = (uint32_t)&_interrupt_vector_table;
    11aa:	4b08      	ldr	r3, [pc, #32]	; (11cc <Reset_Handler+0x4c>)
    11ac:	4a08      	ldr	r2, [pc, #32]	; (11d0 <Reset_Handler+0x50>)
    11ae:	601a      	str	r2, [r3, #0]

	main();
    11b0:	f7ff ff56 	bl	1060 <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    11b4:	e7fe      	b.n	11b4 <Reset_Handler+0x34>
    11b6:	bf00      	nop
    11b8:	00001f5c 	.word	0x00001f5c
    11bc:	10000020 	.word	0x10000020
    11c0:	100004fc 	.word	0x100004fc
    11c4:	100004fc 	.word	0x100004fc
    11c8:	10002678 	.word	0x10002678
    11cc:	e000ed08 	.word	0xe000ed08
    11d0:	00000000 	.word	0x00000000

000011d4 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    11d4:	e7fe      	b.n	11d4 <ADC_IRQHandler>
    11d6:	0000      	movs	r0, r0

000011d8 <wait_us>:
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    11d8:	0883      	lsrs	r3, r0, #2
    11da:	eb03 03d0 	add.w	r3, r3, r0, lsr #3
    11de:	eb03 1390 	add.w	r3, r3, r0, lsr #6
    11e2:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
    11e6:	eb03 2390 	add.w	r3, r3, r0, lsr #10
    11ea:	eb03 20d0 	add.w	r0, r3, r0, lsr #11
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    11ee:	4b04      	ldr	r3, [pc, #16]	; (1200 <wait_us+0x28>)
    11f0:	6058      	str	r0, [r3, #4]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    11f2:	685a      	ldr	r2, [r3, #4]
    11f4:	3a01      	subs	r2, #1
    11f6:	605a      	str	r2, [r3, #4]
    11f8:	2a00      	cmp	r2, #0
    11fa:	d1fa      	bne.n	11f2 <wait_us+0x1a>
}
    11fc:	4770      	bx	lr
    11fe:	bf00      	nop
    1200:	10000544 	.word	0x10000544

00001204 <wait>:
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    1204:	4b01      	ldr	r3, [pc, #4]	; (120c <wait+0x8>)
    1206:	4358      	muls	r0, r3
    1208:	f7ff bfe6 	b.w	11d8 <wait_us>
    120c:	000f4240 	.word	0x000f4240

00001210 <all_pins_off>:
}

void all_pins_off(void)
{
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    1210:	4a10      	ldr	r2, [pc, #64]	; (1254 <all_pins_off+0x44>)
    1212:	2300      	movs	r3, #0
    1214:	6013      	str	r3, [r2, #0]
	PINSEL1 = 0;
    1216:	6053      	str	r3, [r2, #4]
	PINSEL2 = 0;
    1218:	6093      	str	r3, [r2, #8]
	PINSEL3 = 0;
    121a:	60d3      	str	r3, [r2, #12]
	PINSEL4 = 0;
    121c:	6113      	str	r3, [r2, #16]
	PINSEL7 = 0;
    121e:	61d3      	str	r3, [r2, #28]
	PINSEL9 = 0;
    1220:	6253      	str	r3, [r2, #36]	; 0x24
	PINSEL10 = 0;
    1222:	6293      	str	r3, [r2, #40]	; 0x28

	/* configure all pins as inputs */
	FIO0DIR = 0;
    1224:	4a0c      	ldr	r2, [pc, #48]	; (1258 <all_pins_off+0x48>)
    1226:	6013      	str	r3, [r2, #0]
	FIO1DIR = 0;
    1228:	6213      	str	r3, [r2, #32]
	FIO2DIR = 0;
    122a:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3DIR = 0;
    122c:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = 0;
    122e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/* pull-up on every pin */
	PINMODE0 = 0;
    1232:	4a0a      	ldr	r2, [pc, #40]	; (125c <all_pins_off+0x4c>)
    1234:	6013      	str	r3, [r2, #0]
	PINMODE1 = 0;
    1236:	6053      	str	r3, [r2, #4]
	PINMODE2 = 0;
    1238:	6093      	str	r3, [r2, #8]
	PINMODE3 = 0;
    123a:	60d3      	str	r3, [r2, #12]
	PINMODE4 = 0;
    123c:	6113      	str	r3, [r2, #16]
	PINMODE7 = 0;
    123e:	61d3      	str	r3, [r2, #28]
	PINMODE9 = 0;
    1240:	6253      	str	r3, [r2, #36]	; 0x24

	/* set all outputs low */
	FIO0PIN = 0;
    1242:	4a07      	ldr	r2, [pc, #28]	; (1260 <all_pins_off+0x50>)
    1244:	6013      	str	r3, [r2, #0]
	FIO1PIN = 0;
    1246:	6213      	str	r3, [r2, #32]
	FIO2PIN = 0;
    1248:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3PIN = 0;
    124a:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4PIN = 0;
    124c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    1250:	4770      	bx	lr
    1252:	bf00      	nop
    1254:	4002c000 	.word	0x4002c000
    1258:	2009c000 	.word	0x2009c000
    125c:	4002c040 	.word	0x4002c040
    1260:	2009c014 	.word	0x2009c014

00001264 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    1264:	b508      	push	{r3, lr}
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    1266:	f7ff ffd3 	bl	1210 <all_pins_off>
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    126a:	f24c 7112 	movw	r1, #50962	; 0xc712
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    126e:	4a09      	ldr	r2, [pc, #36]	; (1294 <gpio_init+0x30>)
    1270:	2300      	movs	r3, #0
    1272:	6013      	str	r3, [r2, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    1274:	6211      	str	r1, [r2, #32]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    1276:	f240 11b1 	movw	r1, #433	; 0x1b1
    127a:	6411      	str	r1, [r2, #64]	; 0x40
	FIO3DIR = 0;
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    127c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
	FIO3DIR = 0;
    1280:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    1282:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    1286:	6153      	str	r3, [r2, #20]
	FIO1PIN = 0;
    1288:	6353      	str	r3, [r2, #52]	; 0x34
	FIO2PIN = 0;
    128a:	6553      	str	r3, [r2, #84]	; 0x54
	FIO3PIN = 0;
    128c:	6753      	str	r3, [r2, #116]	; 0x74
	FIO4PIN = 0;
    128e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    1292:	bd08      	pop	{r3, pc}
    1294:	2009c000 	.word	0x2009c000

00001298 <dio_ssp_init>:
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    1298:	4b11      	ldr	r3, [pc, #68]	; (12e0 <dio_ssp_init+0x48>)
    129a:	681a      	ldr	r2, [r3, #0]
    129c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
    12a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    12a4:	601a      	str	r2, [r3, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    12a6:	681a      	ldr	r2, [r3, #0]
    12a8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    12ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    12b0:	601a      	str	r2, [r3, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    12b2:	681a      	ldr	r2, [r3, #0]
    12b4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    12b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    12bc:	601a      	str	r2, [r3, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    12be:	681a      	ldr	r2, [r3, #0]
    12c0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    12c4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    12c8:	601a      	str	r2, [r3, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    12ca:	4b06      	ldr	r3, [pc, #24]	; (12e4 <dio_ssp_init+0x4c>)
    12cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    12d0:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    12d2:	4b05      	ldr	r3, [pc, #20]	; (12e8 <dio_ssp_init+0x50>)
    12d4:	22c7      	movs	r2, #199	; 0xc7
    12d6:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    12d8:	220c      	movs	r2, #12
    12da:	605a      	str	r2, [r3, #4]
    12dc:	4770      	bx	lr
    12de:	bf00      	nop
    12e0:	4002c000 	.word	0x4002c000
    12e4:	2009c098 	.word	0x2009c098
    12e8:	40030000 	.word	0x40030000

000012ec <atest_init>:
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    12ec:	4a09      	ldr	r2, [pc, #36]	; (1314 <atest_init+0x28>)
    12ee:	6813      	ldr	r3, [r2, #0]
    12f0:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    12f4:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    12f6:	4a08      	ldr	r2, [pc, #32]	; (1318 <atest_init+0x2c>)
    12f8:	6813      	ldr	r3, [r2, #0]
    12fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    12fe:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    1300:	4b06      	ldr	r3, [pc, #24]	; (131c <atest_init+0x30>)
    1302:	681a      	ldr	r2, [r3, #0]
    1304:	f442 1220 	orr.w	r2, r2, #2621440	; 0x280000
    1308:	601a      	str	r2, [r3, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    130a:	681a      	ldr	r2, [r3, #0]
    130c:	f422 12a0 	bic.w	r2, r2, #1310720	; 0x140000
    1310:	601a      	str	r2, [r3, #0]
    1312:	4770      	bx	lr
    1314:	4002c004 	.word	0x4002c004
    1318:	2009c000 	.word	0x2009c000
    131c:	4002c044 	.word	0x4002c044

00001320 <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    1320:	b530      	push	{r4, r5, lr}
	u32 msb = 1 << (len - 1);
    1322:	2501      	movs	r5, #1
    1324:	1e43      	subs	r3, r0, #1
    1326:	409d      	lsls	r5, r3

	/* start transaction by dropping CSN */
	CSN_CLR;
    1328:	4b0d      	ldr	r3, [pc, #52]	; (1360 <cc2400_spi+0x40>)
    132a:	2220      	movs	r2, #32

	while (len--) {
    132c:	3801      	subs	r0, #1
    132e:	b2c0      	uxtb	r0, r0
    1330:	28ff      	cmp	r0, #255	; 0xff

		SCLK_SET;
		if (MISO)
			data |= 1;

		SCLK_CLR;
    1332:	601a      	str	r2, [r3, #0]
    1334:	4c0b      	ldr	r4, [pc, #44]	; (1364 <cc2400_spi+0x44>)
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    1336:	d00f      	beq.n	1358 <cc2400_spi+0x38>
		if (data & msb)
    1338:	4229      	tst	r1, r5
    133a:	f04f 0201 	mov.w	r2, #1
			MOSI_SET;
    133e:	bf14      	ite	ne
    1340:	6022      	strne	r2, [r4, #0]
		else
			MOSI_CLR;
    1342:	601a      	streq	r2, [r3, #0]
		data <<= 1;

		SCLK_SET;
    1344:	2210      	movs	r2, #16
    1346:	6022      	str	r2, [r4, #0]
		if (MISO)
    1348:	4c07      	ldr	r4, [pc, #28]	; (1368 <cc2400_spi+0x48>)
	while (len--) {
		if (data & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		data <<= 1;
    134a:	0049      	lsls	r1, r1, #1

		SCLK_SET;
		if (MISO)
    134c:	6824      	ldr	r4, [r4, #0]
    134e:	07a4      	lsls	r4, r4, #30
			data |= 1;
    1350:	bf48      	it	mi
    1352:	f041 0101 	orrmi.w	r1, r1, #1
    1356:	e7e9      	b.n	132c <cc2400_spi+0xc>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    1358:	2320      	movs	r3, #32
    135a:	6023      	str	r3, [r4, #0]

	return data;
}
    135c:	4608      	mov	r0, r1
    135e:	bd30      	pop	{r4, r5, pc}
    1360:	2009c05c 	.word	0x2009c05c
    1364:	2009c058 	.word	0x2009c058
    1368:	2009c054 	.word	0x2009c054

0000136c <cc2400_init>:
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
}

void cc2400_init()
{
    136c:	b510      	push	{r4, lr}
#else
	atest_init();
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    136e:	4c0a      	ldr	r4, [pc, #40]	; (1398 <cc2400_init+0x2c>)
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    1370:	f7ff ffbc 	bl	12ec <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    1374:	f44f 7300 	mov.w	r3, #512	; 0x200
    1378:	6023      	str	r3, [r4, #0]
	wait_us(50);
    137a:	2032      	movs	r0, #50	; 0x32
    137c:	f7ff ff2c 	bl	11d8 <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    1380:	4b06      	ldr	r3, [pc, #24]	; (139c <cc2400_init+0x30>)
    1382:	2220      	movs	r2, #32
    1384:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    1386:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    138a:	6023      	str	r3, [r4, #0]

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    138c:	2018      	movs	r0, #24
    138e:	4904      	ldr	r1, [pc, #16]	; (13a0 <cc2400_init+0x34>)
	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
}
    1390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    1394:	f7ff bfc4 	b.w	1320 <cc2400_spi>
    1398:	2009c038 	.word	0x2009c038
    139c:	2009c058 	.word	0x2009c058
    13a0:	000d7fff 	.word	0x000d7fff

000013a4 <cc2400_get>:
	return data;
}

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    13a4:	b508      	push	{r3, lr}
	u32 in;

	u32 out = (reg | 0x80) << 16;
    13a6:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(24, out);
    13aa:	0409      	lsls	r1, r1, #16
    13ac:	2018      	movs	r0, #24
    13ae:	f7ff ffb7 	bl	1320 <cc2400_spi>
	return in & 0xFFFF;
}
    13b2:	b280      	uxth	r0, r0
    13b4:	bd08      	pop	{r3, pc}

000013b6 <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
    13b6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	cc2400_spi(24, out);
    13ba:	2018      	movs	r0, #24
    13bc:	f7ff bfb0 	b.w	1320 <cc2400_spi>

000013c0 <cc2400_get8>:
}

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    13c0:	b508      	push	{r3, lr}
	u16 in;

	u16 out = (reg | 0x80) << 8;
    13c2:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(16, out);
    13c6:	0209      	lsls	r1, r1, #8
    13c8:	2010      	movs	r0, #16
    13ca:	f7ff ffa9 	bl	1320 <cc2400_spi>
	return in & 0xFF;
}
    13ce:	b2c0      	uxtb	r0, r0
    13d0:	bd08      	pop	{r3, pc}

000013d2 <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
	u32 out = (reg << 8) | val;
    13d2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	cc2400_spi(16, out);
    13d6:	2010      	movs	r0, #16
    13d8:	f7ff bfa2 	b.w	1320 <cc2400_spi>

000013dc <cc2400_status>:
	CSN_SET;
}

/* get the status */
u8 cc2400_status()
{
    13dc:	b508      	push	{r3, lr}
	return cc2400_spi(8, 0);
    13de:	2100      	movs	r1, #0
    13e0:	2008      	movs	r0, #8
    13e2:	f7ff ff9d 	bl	1320 <cc2400_spi>
}
    13e6:	b2c0      	uxtb	r0, r0
    13e8:	bd08      	pop	{r3, pc}

000013ea <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    13ea:	b508      	push	{r3, lr}
    13ec:	4601      	mov	r1, r0
	return cc2400_spi(8, reg);
    13ee:	2008      	movs	r0, #8
    13f0:	f7ff ff96 	bl	1320 <cc2400_spi>
}
    13f4:	b2c0      	uxtb	r0, r0
    13f6:	bd08      	pop	{r3, pc}

000013f8 <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    13f8:	b508      	push	{r3, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    13fa:	2018      	movs	r0, #24
    13fc:	2100      	movs	r1, #0
    13fe:	f7ff ff8f 	bl	1320 <cc2400_spi>
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
    1402:	2000      	movs	r0, #0
    1404:	f7ff ffce 	bl	13a4 <cc2400_get>
    1408:	2800      	cmp	r0, #0
    140a:	d1fa      	bne.n	1402 <cc2400_reset+0xa>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    140c:	2018      	movs	r0, #24
    140e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1412:	f7ff ff85 	bl	1320 <cc2400_spi>
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
	cc2400_set(MAIN, 0x8000);
	while (cc2400_get(MAIN) != 0x8000);
    1416:	2000      	movs	r0, #0
    1418:	f7ff ffc4 	bl	13a4 <cc2400_get>
    141c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    1420:	d1f9      	bne.n	1416 <cc2400_reset+0x1e>
}
    1422:	bd08      	pop	{r3, pc}

00001424 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    1424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    1428:	f244 023a 	movw	r2, #16442	; 0x403a
    142c:	4b3e      	ldr	r3, [pc, #248]	; (1528 <clock_start+0x104>)

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    142e:	4f3f      	ldr	r7, [pc, #252]	; (152c <clock_start+0x108>)

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    1430:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    1432:	4d3f      	ldr	r5, [pc, #252]	; (1530 <clock_start+0x10c>)
{
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    1434:	2300      	movs	r3, #0
    1436:	603b      	str	r3, [r7, #0]

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    1438:	682b      	ldr	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    143a:	4c3e      	ldr	r4, [pc, #248]	; (1534 <clock_start+0x110>)

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    143c:	f023 0302 	bic.w	r3, r3, #2
    1440:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    1442:	23aa      	movs	r3, #170	; 0xaa
    1444:	6023      	str	r3, [r4, #0]
    1446:	2355      	movs	r3, #85	; 0x55
    1448:	6023      	str	r3, [r4, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    144a:	4e3b      	ldr	r6, [pc, #236]	; (1538 <clock_start+0x114>)
    144c:	6833      	ldr	r3, [r6, #0]
    144e:	0198      	lsls	r0, r3, #6
    1450:	d4fb      	bmi.n	144a <clock_start+0x26>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    1452:	682b      	ldr	r3, [r5, #0]
    1454:	f023 0301 	bic.w	r3, r3, #1
    1458:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    145a:	23aa      	movs	r3, #170	; 0xaa
    145c:	6023      	str	r3, [r4, #0]
    145e:	2355      	movs	r3, #85	; 0x55
    1460:	6023      	str	r3, [r4, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    1462:	6833      	ldr	r3, [r6, #0]
    1464:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    1468:	d1fb      	bne.n	1462 <clock_start+0x3e>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    146a:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 155c <clock_start+0x138>
    146e:	f8c8 3000 	str.w	r3, [r8]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    1472:	f7ff ffc1 	bl	13f8 <cc2400_reset>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    1476:	2018      	movs	r0, #24
    1478:	4930      	ldr	r1, [pc, #192]	; (153c <clock_start+0x118>)
    147a:	f7ff ff51 	bl	1320 <cc2400_spi>
	CCLKCFG = 0;

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
	cc2400_strobe(SXOSCON);
    147e:	2060      	movs	r0, #96	; 0x60
    1480:	f7ff ffb3 	bl	13ea <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    1484:	f7ff ffaa 	bl	13dc <cc2400_status>
    1488:	0641      	lsls	r1, r0, #25
    148a:	d5fb      	bpl.n	1484 <clock_start+0x60>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    148c:	4b2c      	ldr	r3, [pc, #176]	; (1540 <clock_start+0x11c>)
    148e:	2220      	movs	r2, #32
    1490:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    1492:	681a      	ldr	r2, [r3, #0]
    1494:	0652      	lsls	r2, r2, #25
    1496:	d5fc      	bpl.n	1492 <clock_start+0x6e>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    1498:	4b2a      	ldr	r3, [pc, #168]	; (1544 <clock_start+0x120>)
    149a:	2208      	movs	r2, #8
    149c:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    149e:	2200      	movs	r2, #0
    14a0:	605a      	str	r2, [r3, #4]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    14a2:	2301      	movs	r3, #1
    14a4:	603b      	str	r3, [r7, #0]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    14a6:	4a28      	ldr	r2, [pc, #160]	; (1548 <clock_start+0x124>)
    14a8:	4b28      	ldr	r3, [pc, #160]	; (154c <clock_start+0x128>)
	PLL0FEED_SEQUENCE;
    14aa:	21aa      	movs	r1, #170	; 0xaa

	/* switch to main oscillator */
	CLKSRCSEL = 1;

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    14ac:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    14ae:	2255      	movs	r2, #85	; 0x55
    14b0:	6021      	str	r1, [r4, #0]
    14b2:	6022      	str	r2, [r4, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    14b4:	682b      	ldr	r3, [r5, #0]
    14b6:	f043 0301 	orr.w	r3, r3, #1
    14ba:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    14bc:	6021      	str	r1, [r4, #0]
    14be:	6022      	str	r2, [r4, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    14c0:	6833      	ldr	r3, [r6, #0]
    14c2:	01df      	lsls	r7, r3, #7
    14c4:	d5fc      	bpl.n	14c0 <clock_start+0x9c>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    14c6:	2303      	movs	r3, #3
    14c8:	f8c8 3000 	str.w	r3, [r8]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    14cc:	682b      	ldr	r3, [r5, #0]
    14ce:	f043 0302 	orr.w	r3, r3, #2
    14d2:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    14d4:	23aa      	movs	r3, #170	; 0xaa
    14d6:	6023      	str	r3, [r4, #0]
    14d8:	2355      	movs	r3, #85	; 0x55
    14da:	6023      	str	r3, [r4, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    14dc:	6833      	ldr	r3, [r6, #0]
    14de:	019d      	lsls	r5, r3, #6
    14e0:	d5fc      	bpl.n	14dc <clock_start+0xb8>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    14e2:	4b1b      	ldr	r3, [pc, #108]	; (1550 <clock_start+0x12c>)
    14e4:	2222      	movs	r2, #34	; 0x22
    14e6:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    14e8:	24aa      	movs	r4, #170	; 0xaa
    14ea:	3308      	adds	r3, #8
    14ec:	2055      	movs	r0, #85	; 0x55

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    14ee:	4a19      	ldr	r2, [pc, #100]	; (1554 <clock_start+0x130>)
	PLL0FEED_SEQUENCE;
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
	PLL1FEED_SEQUENCE;
    14f0:	601c      	str	r4, [r3, #0]
    14f2:	6018      	str	r0, [r3, #0]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    14f4:	6811      	ldr	r1, [r2, #0]
    14f6:	f041 0101 	orr.w	r1, r1, #1
    14fa:	6011      	str	r1, [r2, #0]
	PLL1FEED_SEQUENCE;
    14fc:	601c      	str	r4, [r3, #0]
    14fe:	6018      	str	r0, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    1500:	4915      	ldr	r1, [pc, #84]	; (1558 <clock_start+0x134>)
    1502:	6808      	ldr	r0, [r1, #0]
    1504:	05c4      	lsls	r4, r0, #23
    1506:	d5fb      	bpl.n	1500 <clock_start+0xdc>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    1508:	6808      	ldr	r0, [r1, #0]
    150a:	0540      	lsls	r0, r0, #21
    150c:	d5fc      	bpl.n	1508 <clock_start+0xe4>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    150e:	6810      	ldr	r0, [r2, #0]
    1510:	f040 0002 	orr.w	r0, r0, #2
    1514:	6010      	str	r0, [r2, #0]
	PLL1FEED_SEQUENCE;
    1516:	22aa      	movs	r2, #170	; 0xaa
    1518:	601a      	str	r2, [r3, #0]
    151a:	2255      	movs	r2, #85	; 0x55
    151c:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    151e:	680b      	ldr	r3, [r1, #0]
    1520:	059b      	lsls	r3, r3, #22
    1522:	d5fc      	bpl.n	151e <clock_start+0xfa>
}
    1524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1528:	400fc000 	.word	0x400fc000
    152c:	400fc10c 	.word	0x400fc10c
    1530:	400fc080 	.word	0x400fc080
    1534:	400fc08c 	.word	0x400fc08c
    1538:	400fc088 	.word	0x400fc088
    153c:	00081570 	.word	0x00081570
    1540:	400fc1a0 	.word	0x400fc1a0
    1544:	400fc1a8 	.word	0x400fc1a8
    1548:	00010018 	.word	0x00010018
    154c:	400fc084 	.word	0x400fc084
    1550:	400fc0a4 	.word	0x400fc0a4
    1554:	400fc0a0 	.word	0x400fc0a0
    1558:	400fc0a8 	.word	0x400fc0a8
    155c:	400fc104 	.word	0x400fc104

00001560 <reset>:

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    1560:	b508      	push	{r3, lr}
	all_pins_off();
    1562:	f7ff fe55 	bl	1210 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    1566:	4b09      	ldr	r3, [pc, #36]	; (158c <reset+0x2c>)
    1568:	2202      	movs	r2, #2
    156a:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    156c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1570:	6813      	ldr	r3, [r2, #0]
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    1572:	4807      	ldr	r0, [pc, #28]	; (1590 <reset+0x30>)
{
	all_pins_off();

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    1574:	f043 0303 	orr.w	r3, r3, #3
    1578:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    157a:	4b06      	ldr	r3, [pc, #24]	; (1594 <reset+0x34>)
    157c:	22aa      	movs	r2, #170	; 0xaa
    157e:	601a      	str	r2, [r3, #0]
    1580:	2255      	movs	r2, #85	; 0x55
    1582:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
}
    1584:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    1588:	f7ff be26 	b.w	11d8 <wait_us>
    158c:	2009c03c 	.word	0x2009c03c
    1590:	000f4240 	.word	0x000f4240
    1594:	40000008 	.word	0x40000008

00001598 <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    1598:	b538      	push	{r3, r4, r5, lr}
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    159a:	4c08      	ldr	r4, [pc, #32]	; (15bc <DataIn+0x24>)
	USBHwEPWrite(0x80, pbData, iChunk);
    159c:	2080      	movs	r0, #128	; 0x80
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    159e:	6825      	ldr	r5, [r4, #0]
	USBHwEPWrite(0x80, pbData, iChunk);
    15a0:	6861      	ldr	r1, [r4, #4]
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    15a2:	2d40      	cmp	r5, #64	; 0x40
    15a4:	bfa8      	it	ge
    15a6:	2540      	movge	r5, #64	; 0x40
	USBHwEPWrite(0x80, pbData, iChunk);
    15a8:	462a      	mov	r2, r5
    15aa:	f000 f957 	bl	185c <USBHwEPWrite>
	pbData += iChunk;
    15ae:	6863      	ldr	r3, [r4, #4]
    15b0:	442b      	add	r3, r5
    15b2:	6063      	str	r3, [r4, #4]
	iResidue -= iChunk;
    15b4:	6823      	ldr	r3, [r4, #0]
    15b6:	1b5d      	subs	r5, r3, r5
    15b8:	6025      	str	r5, [r4, #0]
    15ba:	bd38      	pop	{r3, r4, r5, pc}
    15bc:	1000054c 	.word	0x1000054c

000015c0 <_HandleRequest.constprop.1>:
	@param [in,out]	*piLen		Pointer to data length
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
    15c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    15c2:	4b11      	ldr	r3, [pc, #68]	; (1608 <_HandleRequest.constprop.1+0x48>)
    15c4:	7a1c      	ldrb	r4, [r3, #8]
    15c6:	461d      	mov	r5, r3
    15c8:	f3c4 1441 	ubfx	r4, r4, #5, #2
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    15cc:	2c02      	cmp	r4, #2
    15ce:	d10d      	bne.n	15ec <_HandleRequest.constprop.1+0x2c>
		BOOL fFilterStatus = FALSE;
    15d0:	2200      	movs	r2, #0
    15d2:	a902      	add	r1, sp, #8
    15d4:	f841 2d04 	str.w	r2, [r1, #-4]!
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    15d8:	f103 0008 	add.w	r0, r3, #8
    15dc:	f103 0210 	add.w	r2, r3, #16
    15e0:	3304      	adds	r3, #4
    15e2:	f000 fa69 	bl	1ab8 <USBFilterOsVendorMessage>
    15e6:	b108      	cbz	r0, 15ec <_HandleRequest.constprop.1+0x2c>
			return fFilterStatus;
    15e8:	9801      	ldr	r0, [sp, #4]
    15ea:	e00a      	b.n	1602 <_HandleRequest.constprop.1+0x42>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    15ec:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    15f0:	6963      	ldr	r3, [r4, #20]
	if (pfnHandler == NULL) {
    15f2:	b12b      	cbz	r3, 1600 <_HandleRequest.constprop.1+0x40>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
	}

	return pfnHandler(pSetup, piLen, ppbData);
    15f4:	4805      	ldr	r0, [pc, #20]	; (160c <_HandleRequest.constprop.1+0x4c>)
    15f6:	f100 0108 	add.w	r1, r0, #8
    15fa:	1f02      	subs	r2, r0, #4
    15fc:	4798      	blx	r3
    15fe:	e000      	b.n	1602 <_HandleRequest.constprop.1+0x42>
	}
	
	pfnHandler = apfnReqHandlers[iType];
	if (pfnHandler == NULL) {
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    1600:	4618      	mov	r0, r3
	}

	return pfnHandler(pSetup, piLen, ppbData);
}
    1602:	b003      	add	sp, #12
    1604:	bd30      	pop	{r4, r5, pc}
    1606:	bf00      	nop
    1608:	1000054c 	.word	0x1000054c
    160c:	10000554 	.word	0x10000554

00001610 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    1610:	b510      	push	{r4, lr}
	int iChunk, iType;

	if (bEP == 0x00) {
    1612:	2800      	cmp	r0, #0
    1614:	d14a      	bne.n	16ac <USBHandleControlTransfer+0x9c>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    1616:	f001 0304 	and.w	r3, r1, #4
    161a:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    161e:	4c25      	ldr	r4, [pc, #148]	; (16b4 <USBHandleControlTransfer+0xa4>)
    1620:	b30b      	cbz	r3, 1666 <USBHandleControlTransfer+0x56>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    1622:	2208      	movs	r2, #8
    1624:	f104 0108 	add.w	r1, r4, #8
    1628:	f000 f94c 	bl	18c4 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    162c:	7a22      	ldrb	r2, [r4, #8]
    162e:	f3c2 1341 	ubfx	r3, r2, #5, #2
			pbData = apbDataStore[iType];
    1632:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1638:	6063      	str	r3, [r4, #4]
			iResidue = Setup.wLength;
    163a:	89e3      	ldrh	r3, [r4, #14]
    163c:	6023      	str	r3, [r4, #0]
			iLen = Setup.wLength;
    163e:	6123      	str	r3, [r4, #16]

			if ((Setup.wLength == 0) ||
    1640:	b10b      	cbz	r3, 1646 <USBHandleControlTransfer+0x36>
    1642:	09d3      	lsrs	r3, r2, #7
    1644:	d034      	beq.n	16b0 <USBHandleControlTransfer+0xa0>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    1646:	f7ff ffbb 	bl	15c0 <_HandleRequest.constprop.1>
    164a:	b928      	cbnz	r0, 1658 <USBHandleControlTransfer+0x48>
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    164c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void StallControlPipe(U8 bEPStat)
{
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    1650:	2080      	movs	r0, #128	; 0x80
    1652:	2101      	movs	r1, #1
    1654:	f000 b8f6 	b.w	1844 <USBHwEPStall>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
					return;
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    1658:	89e2      	ldrh	r2, [r4, #14]
    165a:	6923      	ldr	r3, [r4, #16]
    165c:	429a      	cmp	r2, r3
    165e:	bfd4      	ite	le
    1660:	6022      	strle	r2, [r4, #0]
    1662:	6023      	strgt	r3, [r4, #0]
    1664:	e019      	b.n	169a <USBHandleControlTransfer+0x8a>
				// send first part (possibly a zero-length status message)
				DataIn();
			}
		}
		else {		
			if (iResidue > 0) {
    1666:	6822      	ldr	r2, [r4, #0]
    1668:	2a00      	cmp	r2, #0
    166a:	dd1a      	ble.n	16a2 <USBHandleControlTransfer+0x92>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    166c:	6861      	ldr	r1, [r4, #4]
    166e:	f000 f929 	bl	18c4 <USBHwEPRead>
				if (iChunk < 0) {
    1672:	2800      	cmp	r0, #0
    1674:	dbea      	blt.n	164c <USBHandleControlTransfer+0x3c>
					StallControlPipe(bEPStat);
					return;
				}
				pbData += iChunk;
    1676:	6863      	ldr	r3, [r4, #4]
    1678:	4403      	add	r3, r0
    167a:	6063      	str	r3, [r4, #4]
				iResidue -= iChunk;
    167c:	6823      	ldr	r3, [r4, #0]
    167e:	1a18      	subs	r0, r3, r0
    1680:	6020      	str	r0, [r4, #0]
				if (iResidue == 0) {
    1682:	b9a8      	cbnz	r0, 16b0 <USBHandleControlTransfer+0xa0>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    1684:	7a23      	ldrb	r3, [r4, #8]
    1686:	f3c3 1341 	ubfx	r3, r3, #5, #2
					pbData = apbDataStore[iType];
    168a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1690:	6063      	str	r3, [r4, #4]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    1692:	f7ff ff95 	bl	15c0 <_HandleRequest.constprop.1>
    1696:	2800      	cmp	r0, #0
    1698:	d0d8      	beq.n	164c <USBHandleControlTransfer+0x3c>
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    169a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
						return;
					}
					// send status to host
					DataIn();
    169e:	f7ff bf7b 	b.w	1598 <DataIn>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    16a2:	460a      	mov	r2, r1
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    16a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					DataIn();
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    16a8:	f000 b90c 	b.w	18c4 <USBHwEPRead>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    16ac:	2880      	cmp	r0, #128	; 0x80
    16ae:	d0f4      	beq.n	169a <USBHandleControlTransfer+0x8a>
    16b0:	bd10      	pop	{r4, pc}
    16b2:	bf00      	nop
    16b4:	1000054c 	.word	0x1000054c

000016b8 <USBRegisterRequestHandler>:
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    16b8:	4b02      	ldr	r3, [pc, #8]	; (16c4 <USBRegisterRequestHandler+0xc>)
    16ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    16be:	6141      	str	r1, [r0, #20]
	apbDataStore[iType] = pbDataStore;
    16c0:	6242      	str	r2, [r0, #36]	; 0x24
    16c2:	4770      	bx	lr
    16c4:	1000054c 	.word	0x1000054c

000016c8 <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    16c8:	4770      	bx	lr
    16ca:	0000      	movs	r0, r0

000016cc <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    16cc:	b510      	push	{r4, lr}
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    16ce:	4c0e      	ldr	r4, [pc, #56]	; (1708 <USBInit+0x3c>)
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
	// init hardware
	USBHwInit();
    16d0:	f000 f99a 	bl	1a08 <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    16d4:	480d      	ldr	r0, [pc, #52]	; (170c <USBInit+0x40>)
    16d6:	f000 f87f 	bl	17d8 <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    16da:	4621      	mov	r1, r4
    16dc:	2000      	movs	r0, #0
    16de:	f000 f861 	bl	17a4 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    16e2:	4621      	mov	r1, r4
    16e4:	2080      	movs	r0, #128	; 0x80
    16e6:	f000 f85d 	bl	17a4 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    16ea:	2000      	movs	r0, #0
    16ec:	2140      	movs	r1, #64	; 0x40
    16ee:	f000 f83b 	bl	1768 <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    16f2:	2080      	movs	r0, #128	; 0x80
    16f4:	2140      	movs	r1, #64	; 0x40
    16f6:	f000 f837 	bl	1768 <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    16fa:	2000      	movs	r0, #0
    16fc:	4904      	ldr	r1, [pc, #16]	; (1710 <USBInit+0x44>)
    16fe:	4a05      	ldr	r2, [pc, #20]	; (1714 <USBInit+0x48>)
    1700:	f7ff ffda 	bl	16b8 <USBRegisterRequestHandler>

	return TRUE;
}
    1704:	2001      	movs	r0, #1
    1706:	bd10      	pop	{r4, pc}
    1708:	00001611 	.word	0x00001611
    170c:	000016c9 	.word	0x000016c9
    1710:	00001b85 	.word	0x00001b85
    1714:	10000580 	.word	0x10000580

00001718 <Wait4DevInt>:
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    1718:	4b03      	ldr	r3, [pc, #12]	; (1728 <Wait4DevInt+0x10>)
    171a:	681b      	ldr	r3, [r3, #0]
    171c:	4003      	ands	r3, r0
    171e:	4283      	cmp	r3, r0
    1720:	d1fa      	bne.n	1718 <Wait4DevInt>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    1722:	4b02      	ldr	r3, [pc, #8]	; (172c <Wait4DevInt+0x14>)
    1724:	6018      	str	r0, [r3, #0]
    1726:	4770      	bx	lr
    1728:	5000c200 	.word	0x5000c200
    172c:	5000c208 	.word	0x5000c208

00001730 <USBHwCmd>:
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    1730:	4b04      	ldr	r3, [pc, #16]	; (1744 <USBHwCmd+0x14>)
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    1732:	0400      	lsls	r0, r0, #16
    1734:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    1738:	2230      	movs	r2, #48	; 0x30
    173a:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    173c:	6098      	str	r0, [r3, #8]
    Wait4DevInt(CCEMTY);
    173e:	2010      	movs	r0, #16
    1740:	f7ff bfea 	b.w	1718 <Wait4DevInt>
    1744:	5000c208 	.word	0x5000c208

00001748 <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    1748:	b510      	push	{r4, lr}
    174a:	460c      	mov	r4, r1
    // write command code
    USBHwCmd(bCmd);
    174c:	f7ff fff0 	bl	1730 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    1750:	0424      	lsls	r4, r4, #16
    1752:	4b04      	ldr	r3, [pc, #16]	; (1764 <USBHwCmdWrite+0x1c>)
    1754:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    1758:	601c      	str	r4, [r3, #0]
    Wait4DevInt(CCEMTY);
    175a:	2010      	movs	r0, #16
}
    175c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // write command code
    USBHwCmd(bCmd);

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    Wait4DevInt(CCEMTY);
    1760:	f7ff bfda 	b.w	1718 <Wait4DevInt>
    1764:	5000c210 	.word	0x5000c210

00001768 <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    1768:	b510      	push	{r4, lr}
    int idx;
    
    idx = EP2IDX(bEP);
    176a:	f000 040f 	and.w	r4, r0, #15
    176e:	09c0      	lsrs	r0, r0, #7
    1770:	ea40 0444 	orr.w	r4, r0, r4, lsl #1
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    USBReEp |= (1 << idx);
    1774:	4809      	ldr	r0, [pc, #36]	; (179c <USBHwEPConfig+0x34>)
    1776:	2301      	movs	r3, #1
    1778:	6802      	ldr	r2, [r0, #0]
    177a:	40a3      	lsls	r3, r4
    177c:	4313      	orrs	r3, r2
    177e:	6003      	str	r3, [r0, #0]
#ifdef LPC17xx
    USBEpIn = idx;
    1780:	4b07      	ldr	r3, [pc, #28]	; (17a0 <USBHwEPConfig+0x38>)
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    Wait4DevInt(EP_RLZED);
    1782:	f44f 7080 	mov.w	r0, #256	; 0x100
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    USBReEp |= (1 << idx);
#ifdef LPC17xx
    USBEpIn = idx;
    1786:	601c      	str	r4, [r3, #0]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    1788:	6059      	str	r1, [r3, #4]
    Wait4DevInt(EP_RLZED);
    178a:	f7ff ffc5 	bl	1718 <Wait4DevInt>
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    178e:	f044 0040 	orr.w	r0, r4, #64	; 0x40
    1792:	2100      	movs	r1, #0
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);

    // enable EP
    USBHwEPEnable(idx, TRUE);
}
    1794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    1798:	f7ff bfd6 	b.w	1748 <USBHwCmdWrite>
    179c:	5000c244 	.word	0x5000c244
    17a0:	5000c248 	.word	0x5000c248

000017a4 <USBHwRegisterEPIntHandler>:
    idx = EP2IDX(bEP);

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    17a4:	4a09      	ldr	r2, [pc, #36]	; (17cc <USBHwRegisterEPIntHandler+0x28>)
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    int idx;
    
    idx = EP2IDX(bEP);
    17a6:	f000 030f 	and.w	r3, r0, #15

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    17aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    17ae:	4908      	ldr	r1, [pc, #32]	; (17d0 <USBHwRegisterEPIntHandler+0x2c>)
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    int idx;
    
    idx = EP2IDX(bEP);
    17b0:	09c0      	lsrs	r0, r0, #7

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    17b2:	680a      	ldr	r2, [r1, #0]
    idx = EP2IDX(bEP);

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    17b4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    17b8:	2301      	movs	r3, #1
    17ba:	4083      	lsls	r3, r0
    17bc:	4313      	orrs	r3, r2
    USBDevIntEn |= EP_SLOW;
    17be:	4a05      	ldr	r2, [pc, #20]	; (17d4 <USBHwRegisterEPIntHandler+0x30>)

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    17c0:	600b      	str	r3, [r1, #0]
    USBDevIntEn |= EP_SLOW;
    17c2:	6813      	ldr	r3, [r2, #0]
    17c4:	f043 0304 	orr.w	r3, r3, #4
    17c8:	6013      	str	r3, [r2, #0]
    17ca:	4770      	bx	lr
    17cc:	10000588 	.word	0x10000588
    17d0:	5000c234 	.word	0x5000c234
    17d4:	5000c204 	.word	0x5000c204

000017d8 <USBHwRegisterDevIntHandler>:
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    _pfnDevIntHandler = pfnHandler;
    17d8:	4b03      	ldr	r3, [pc, #12]	; (17e8 <USBHwRegisterDevIntHandler+0x10>)
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    17da:	4a04      	ldr	r2, [pc, #16]	; (17ec <USBHwRegisterDevIntHandler+0x14>)
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    _pfnDevIntHandler = pfnHandler;
    17dc:	6418      	str	r0, [r3, #64]	; 0x40
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    17de:	6813      	ldr	r3, [r2, #0]
    17e0:	f043 0308 	orr.w	r3, r3, #8
    17e4:	6013      	str	r3, [r2, #0]
    17e6:	4770      	bx	lr
    17e8:	10000588 	.word	0x10000588
    17ec:	5000c204 	.word	0x5000c204

000017f0 <USBHwSetAddress>:
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    17f0:	f040 0180 	orr.w	r1, r0, #128	; 0x80
    17f4:	20d0      	movs	r0, #208	; 0xd0
    17f6:	f7ff bfa7 	b.w	1748 <USBHwCmdWrite>

000017fa <USBHwConnect>:
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    17fa:	1c01      	adds	r1, r0, #0
    17fc:	bf18      	it	ne
    17fe:	2101      	movne	r1, #1
    1800:	20fe      	movs	r0, #254	; 0xfe
    1802:	f7ff bfa1 	b.w	1748 <USBHwCmdWrite>

00001806 <USBHwNakIntEnable>:
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    1806:	4601      	mov	r1, r0
    1808:	20f3      	movs	r0, #243	; 0xf3
    180a:	f7ff bf9d 	b.w	1748 <USBHwCmdWrite>
    180e:	0000      	movs	r0, r0

00001810 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    1810:	b510      	push	{r4, lr}
    int idx = EP2IDX(bEP);
    1812:	f000 040f 	and.w	r4, r0, #15
    1816:	09c0      	lsrs	r0, r0, #7
    1818:	ea40 0444 	orr.w	r4, r0, r4, lsl #1
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    181c:	4620      	mov	r0, r4
    181e:	f7ff ff87 	bl	1730 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    1822:	0424      	lsls	r4, r4, #16
    1824:	4b05      	ldr	r3, [pc, #20]	; (183c <USBHwEPGetStatus+0x2c>)
    1826:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    182a:	601c      	str	r4, [r3, #0]
    Wait4DevInt(CDFULL);
    182c:	2020      	movs	r0, #32
    182e:	f7ff ff73 	bl	1718 <Wait4DevInt>
    return USBCmdData;
    1832:	4b03      	ldr	r3, [pc, #12]	; (1840 <USBHwEPGetStatus+0x30>)
    1834:	6818      	ldr	r0, [r3, #0]
U8  USBHwEPGetStatus(U8 bEP)
{
    int idx = EP2IDX(bEP);

    return USBHwCmdRead(CMD_EP_SELECT | idx);
}
    1836:	b2c0      	uxtb	r0, r0
    1838:	bd10      	pop	{r4, pc}
    183a:	bf00      	nop
    183c:	5000c210 	.word	0x5000c210
    1840:	5000c214 	.word	0x5000c214

00001844 <USBHwEPStall>:
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    int idx = EP2IDX(bEP);
    1844:	f000 030f 	and.w	r3, r0, #15
    1848:	09c0      	lsrs	r0, r0, #7
    184a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    184e:	3100      	adds	r1, #0
    1850:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    1854:	bf18      	it	ne
    1856:	2101      	movne	r1, #1
    1858:	f7ff bf76 	b.w	1748 <USBHwCmdWrite>

0000185c <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    185c:	b538      	push	{r3, r4, r5, lr}
    185e:	4615      	mov	r5, r2
    U32 idx;
    
    idx = EP2IDX(bEP);
    1860:	f000 030f 	and.w	r3, r0, #15
    1864:	09c0      	lsrs	r0, r0, #7
    1866:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    186a:	4a13      	ldr	r2, [pc, #76]	; (18b8 <USBHwEPWrite+0x5c>)
    186c:	009b      	lsls	r3, r3, #2
    186e:	f043 0302 	orr.w	r3, r3, #2
    1872:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    1874:	4b11      	ldr	r3, [pc, #68]	; (18bc <USBHwEPWrite+0x60>)
    1876:	601d      	str	r5, [r3, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    1878:	6813      	ldr	r3, [r2, #0]
    187a:	3104      	adds	r1, #4
    187c:	f013 0302 	ands.w	r3, r3, #2
    1880:	d010      	beq.n	18a4 <USBHwEPWrite+0x48>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    1882:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    1886:	f811 4c01 	ldrb.w	r4, [r1, #-1]
    188a:	041b      	lsls	r3, r3, #16
    188c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    1890:	f811 4c04 	ldrb.w	r4, [r1, #-4]
    1894:	4323      	orrs	r3, r4
    1896:	f811 4c03 	ldrb.w	r4, [r1, #-3]
    189a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    189e:	4c08      	ldr	r4, [pc, #32]	; (18c0 <USBHwEPWrite+0x64>)
    18a0:	6023      	str	r3, [r4, #0]
    18a2:	e7e9      	b.n	1878 <USBHwEPWrite+0x1c>
        pbBuf += 4;
    }

    USBCtrl = 0;
    18a4:	4a04      	ldr	r2, [pc, #16]	; (18b8 <USBHwEPWrite+0x5c>)
    18a6:	6013      	str	r3, [r2, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    18a8:	f7ff ff42 	bl	1730 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    18ac:	20fa      	movs	r0, #250	; 0xfa
    18ae:	f7ff ff3f 	bl	1730 <USBHwCmd>
    
    return iLen;
}
    18b2:	4628      	mov	r0, r5
    18b4:	bd38      	pop	{r3, r4, r5, pc}
    18b6:	bf00      	nop
    18b8:	5000c228 	.word	0x5000c228
    18bc:	5000c224 	.word	0x5000c224
    18c0:	5000c21c 	.word	0x5000c21c

000018c4 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    18c4:	b570      	push	{r4, r5, r6, lr}
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    18c6:	4c17      	ldr	r4, [pc, #92]	; (1924 <USBHwEPRead+0x60>)
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    18c8:	f000 030f 	and.w	r3, r0, #15
    18cc:	4626      	mov	r6, r4
    18ce:	09c0      	lsrs	r0, r0, #7
    18d0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    18d4:	009b      	lsls	r3, r3, #2
    18d6:	f043 0301 	orr.w	r3, r3, #1
    18da:	6023      	str	r3, [r4, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    18dc:	4b12      	ldr	r3, [pc, #72]	; (1928 <USBHwEPRead+0x64>)
    18de:	681b      	ldr	r3, [r3, #0]
    } while ((dwLen & PKT_RDY) == 0);
    18e0:	051d      	lsls	r5, r3, #20
    18e2:	d5fb      	bpl.n	18dc <USBHwEPRead+0x18>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    18e4:	055c      	lsls	r4, r3, #21
    18e6:	d51a      	bpl.n	191e <USBHwEPRead+0x5a>
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    18e8:	2500      	movs	r5, #0
    for (i = 0; i < dwLen; i++) {
    18ea:	462c      	mov	r4, r5
    if ((dwLen & DV) == 0) {
        return -1;
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    18ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    18f0:	429c      	cmp	r4, r3
    18f2:	d00b      	beq.n	190c <USBHwEPRead+0x48>
        if ((i % 4) == 0) {
    18f4:	f014 0f03 	tst.w	r4, #3
            dwData = USBRxData;
    18f8:	bf04      	itt	eq
    18fa:	4d0c      	ldreq	r5, [pc, #48]	; (192c <USBHwEPRead+0x68>)
    18fc:	682d      	ldreq	r5, [r5, #0]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    18fe:	b111      	cbz	r1, 1906 <USBHwEPRead+0x42>
    1900:	4294      	cmp	r4, r2
            pbBuf[i] = dwData & 0xFF;
    1902:	bf38      	it	cc
    1904:	550d      	strbcc	r5, [r1, r4]
        }
        dwData >>= 8;
    1906:	0a2d      	lsrs	r5, r5, #8
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    1908:	3401      	adds	r4, #1
    190a:	e7f1      	b.n	18f0 <USBHwEPRead+0x2c>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    190c:	2300      	movs	r3, #0
    190e:	6033      	str	r3, [r6, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    1910:	f7ff ff0e 	bl	1730 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    1914:	20f2      	movs	r0, #242	; 0xf2
    1916:	f7ff ff0b 	bl	1730 <USBHwCmd>
    
    return dwLen;
    191a:	4620      	mov	r0, r4
    191c:	bd70      	pop	{r4, r5, r6, pc}
        dwLen = USBRxPLen;
    } while ((dwLen & PKT_RDY) == 0);
    
    // packet valid?
    if ((dwLen & DV) == 0) {
        return -1;
    191e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    
    return dwLen;
}
    1922:	bd70      	pop	{r4, r5, r6, pc}
    1924:	5000c228 	.word	0x5000c228
    1928:	5000c220 	.word	0x5000c220
    192c:	5000c218 	.word	0x5000c218

00001930 <USBHwConfigDevice>:
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    1930:	1c01      	adds	r1, r0, #0
    1932:	bf18      	it	ne
    1934:	2101      	movne	r1, #1
    1936:	20d8      	movs	r0, #216	; 0xd8
    1938:	f7ff bf06 	b.w	1748 <USBHwCmdWrite>

0000193c <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    193c:	b538      	push	{r3, r4, r5, lr}

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    193e:	4b29      	ldr	r3, [pc, #164]	; (19e4 <USBHwISR+0xa8>)
    1940:	681c      	ldr	r4, [r3, #0]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    1942:	07e1      	lsls	r1, r4, #31
    1944:	d511      	bpl.n	196a <USBHwISR+0x2e>
        // clear int
        USBDevIntClr = FRAME;
    1946:	2201      	movs	r2, #1
    1948:	609a      	str	r2, [r3, #8]
        // call handler
        if (_pfnFrameHandler != NULL) {
    194a:	4b27      	ldr	r3, [pc, #156]	; (19e8 <USBHwISR+0xac>)
    194c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    194e:	b165      	cbz	r5, 196a <USBHwISR+0x2e>
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    1950:	20f5      	movs	r0, #245	; 0xf5
    1952:	f7ff feed 	bl	1730 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    1956:	4b25      	ldr	r3, [pc, #148]	; (19ec <USBHwISR+0xb0>)
    1958:	4a25      	ldr	r2, [pc, #148]	; (19f0 <USBHwISR+0xb4>)
    Wait4DevInt(CDFULL);
    195a:	2020      	movs	r0, #32
{
    // write command code
    USBHwCmd(bCmd);
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    195c:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    195e:	f7ff fedb 	bl	1718 <Wait4DevInt>
    return USBCmdData;
    1962:	4b24      	ldr	r3, [pc, #144]	; (19f4 <USBHwISR+0xb8>)
    1964:	6818      	ldr	r0, [r3, #0]
        // clear int
        USBDevIntClr = FRAME;
        // call handler
        if (_pfnFrameHandler != NULL) {
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
            _pfnFrameHandler(wFrame);
    1966:	b2c0      	uxtb	r0, r0
    1968:	47a8      	blx	r5
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    196a:	0722      	lsls	r2, r4, #28
    196c:	d517      	bpl.n	199e <USBHwISR+0x62>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    196e:	4b22      	ldr	r3, [pc, #136]	; (19f8 <USBHwISR+0xbc>)
    1970:	2208      	movs	r2, #8
    1972:	601a      	str	r2, [r3, #0]
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    1974:	20fe      	movs	r0, #254	; 0xfe
    1976:	f7ff fedb 	bl	1730 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    197a:	4b1c      	ldr	r3, [pc, #112]	; (19ec <USBHwISR+0xb0>)
    197c:	4a1f      	ldr	r2, [pc, #124]	; (19fc <USBHwISR+0xc0>)
    Wait4DevInt(CDFULL);
    197e:	2020      	movs	r0, #32
{
    // write command code
    USBHwCmd(bCmd);
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    1980:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    1982:	f7ff fec9 	bl	1718 <Wait4DevInt>
    return USBCmdData;
    1986:	4b1b      	ldr	r3, [pc, #108]	; (19f4 <USBHwISR+0xb8>)
    1988:	6818      	ldr	r0, [r3, #0]
    198a:	b2c0      	uxtb	r0, r0
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    198c:	f010 0f1a 	tst.w	r0, #26
    1990:	d005      	beq.n	199e <USBHwISR+0x62>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    1992:	4b15      	ldr	r3, [pc, #84]	; (19e8 <USBHwISR+0xac>)
    1994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1996:	b113      	cbz	r3, 199e <USBHwISR+0x62>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    1998:	f000 0015 	and.w	r0, r0, #21
    199c:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    199e:	0763      	lsls	r3, r4, #29
    19a0:	d51e      	bpl.n	19e0 <USBHwISR+0xa4>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    19a2:	4b15      	ldr	r3, [pc, #84]	; (19f8 <USBHwISR+0xbc>)
    19a4:	2204      	movs	r2, #4
    19a6:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    19a8:	2400      	movs	r4, #0
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
    19aa:	4a15      	ldr	r2, [pc, #84]	; (1a00 <USBHwISR+0xc4>)
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
            dwIntBit = (1 << i);
    19ac:	2301      	movs	r3, #1
            if (USBEpIntSt & dwIntBit) {
    19ae:	6812      	ldr	r2, [r2, #0]
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
            dwIntBit = (1 << i);
    19b0:	40a3      	lsls	r3, r4
            if (USBEpIntSt & dwIntBit) {
    19b2:	4213      	tst	r3, r2
    19b4:	d011      	beq.n	19da <USBHwISR+0x9e>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    19b6:	4a13      	ldr	r2, [pc, #76]	; (1a04 <USBHwISR+0xc8>)
                Wait4DevInt(CDFULL);
    19b8:	2020      	movs	r0, #32
        // check all endpoints
        for (i = 0; i < 32; i++) {
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    19ba:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    19bc:	f7ff feac 	bl	1718 <Wait4DevInt>
                bEPStat = USBCmdData;
    19c0:	4b0c      	ldr	r3, [pc, #48]	; (19f4 <USBHwISR+0xb8>)
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    19c2:	1060      	asrs	r0, r4, #1
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
                Wait4DevInt(CDFULL);
                bEPStat = USBCmdData;
    19c4:	6819      	ldr	r1, [r3, #0]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    19c6:	4b08      	ldr	r3, [pc, #32]	; (19e8 <USBHwISR+0xac>)
    19c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    19cc:	b12b      	cbz	r3, 19da <USBHwISR+0x9e>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    19ce:	ea40 10c4 	orr.w	r0, r0, r4, lsl #7
    19d2:	b2c0      	uxtb	r0, r0
    19d4:	f001 011f 	and.w	r1, r1, #31
    19d8:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    19da:	3401      	adds	r4, #1
    19dc:	2c20      	cmp	r4, #32
    19de:	d1e4      	bne.n	19aa <USBHwISR+0x6e>
    19e0:	bd38      	pop	{r3, r4, r5, pc}
    19e2:	bf00      	nop
    19e4:	5000c200 	.word	0x5000c200
    19e8:	10000588 	.word	0x10000588
    19ec:	5000c210 	.word	0x5000c210
    19f0:	00f50200 	.word	0x00f50200
    19f4:	5000c214 	.word	0x5000c214
    19f8:	5000c208 	.word	0x5000c208
    19fc:	00fe0200 	.word	0x00fe0200
    1a00:	5000c230 	.word	0x5000c230
    1a04:	5000c238 	.word	0x5000c238

00001a08 <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    1a08:	b508      	push	{r3, lr}
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    1a0a:	4a25      	ldr	r2, [pc, #148]	; (1aa0 <USBHwInit+0x98>)
    1a0c:	6813      	ldr	r3, [r2, #0]
    1a0e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    1a12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1a16:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    1a18:	f852 3c04 	ldr.w	r3, [r2, #-4]
    1a1c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    1a20:	f043 0310 	orr.w	r3, r3, #16
    1a24:	f842 3c04 	str.w	r3, [r2, #-4]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    1a28:	f852 3c04 	ldr.w	r3, [r2, #-4]
    1a2c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    1a30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    1a34:	f842 3c04 	str.w	r3, [r2, #-4]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    1a38:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    1a3c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    1a40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    1a44:	f842 3c0c 	str.w	r3, [r2, #-12]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    1a48:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    1a4c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    1a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1a54:	f842 3c0c 	str.w	r3, [r2, #-12]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    1a58:	f502 2250 	add.w	r2, r2, #851968	; 0xd0000
    1a5c:	32b4      	adds	r2, #180	; 0xb4
    1a5e:	6813      	ldr	r3, [r2, #0]
    1a60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1a64:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    1a66:	4a0f      	ldr	r2, [pc, #60]	; (1aa4 <USBHwInit+0x9c>)
    1a68:	6813      	ldr	r3, [r2, #0]
    1a6a:	f043 0312 	orr.w	r3, r3, #18
    1a6e:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    1a70:	4b0d      	ldr	r3, [pc, #52]	; (1aa8 <USBHwInit+0xa0>)
    1a72:	681a      	ldr	r2, [r3, #0]
    1a74:	0791      	lsls	r1, r2, #30
    1a76:	d5fb      	bpl.n	1a70 <USBHwInit+0x68>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    1a78:	681a      	ldr	r2, [r3, #0]
    1a7a:	06d2      	lsls	r2, r2, #27
    1a7c:	d5fc      	bpl.n	1a78 <USBHwInit+0x70>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    1a7e:	4b0b      	ldr	r3, [pc, #44]	; (1aac <USBHwInit+0xa4>)
    1a80:	2000      	movs	r0, #0
    USBDevIntClr = 0xFFFFFFFF;
    1a82:	4a0b      	ldr	r2, [pc, #44]	; (1ab0 <USBHwInit+0xa8>)
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    1a84:	6018      	str	r0, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    1a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1a8a:	6013      	str	r3, [r2, #0]
    USBDevIntPri = 0;
    1a8c:	6250      	str	r0, [r2, #36]	; 0x24

    USBEpIntEn = 0;
    1a8e:	62d0      	str	r0, [r2, #44]	; 0x2c
    USBEpIntClr = 0xFFFFFFFF;
    1a90:	6313      	str	r3, [r2, #48]	; 0x30
    USBEpIntPri = 0;
    1a92:	4b08      	ldr	r3, [pc, #32]	; (1ab4 <USBHwInit+0xac>)
    1a94:	6018      	str	r0, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    1a96:	f7ff feb6 	bl	1806 <USBHwNakIntEnable>
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
}
    1a9a:	2001      	movs	r0, #1
    1a9c:	bd08      	pop	{r3, pc}
    1a9e:	bf00      	nop
    1aa0:	4002c010 	.word	0x4002c010
    1aa4:	5000cff4 	.word	0x5000cff4
    1aa8:	5000cff8 	.word	0x5000cff8
    1aac:	5000c204 	.word	0x5000c204
    1ab0:	5000c208 	.word	0x5000c208
    1ab4:	5000c240 	.word	0x5000c240

00001ab8 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    1ab8:	b570      	push	{r4, r5, r6, lr}
	if(bMsVendorIndex == 0)	{
    1aba:	4c16      	ldr	r4, [pc, #88]	; (1b14 <USBFilterOsVendorMessage+0x5c>)
    1abc:	7825      	ldrb	r5, [r4, #0]
    1abe:	2400      	movs	r4, #0
    1ac0:	b315      	cbz	r5, 1b08 <USBFilterOsVendorMessage+0x50>
		// Feature is disabled.
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    1ac2:	7846      	ldrb	r6, [r0, #1]
    1ac4:	42ae      	cmp	r6, r5
    1ac6:	d121      	bne.n	1b0c <USBFilterOsVendorMessage+0x54>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    1ac8:	600c      	str	r4, [r1, #0]
	
		int iRequestLength = pSetup->wLength;
    1aca:	88c6      	ldrh	r6, [r0, #6]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    1acc:	8844      	ldrh	r4, [r0, #2]
	
		switch (pSetup->wIndex) {
    1ace:	8880      	ldrh	r0, [r0, #4]
    1ad0:	2804      	cmp	r0, #4
    1ad2:	d005      	beq.n	1ae0 <USBFilterOsVendorMessage+0x28>
    1ad4:	2805      	cmp	r0, #5
    1ad6:	d11b      	bne.n	1b10 <USBFilterOsVendorMessage+0x58>
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
			break;
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    1ad8:	480f      	ldr	r0, [pc, #60]	; (1b18 <USBFilterOsVendorMessage+0x60>)
    1ada:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    1adc:	2092      	movs	r0, #146	; 0x92
    1ade:	e002      	b.n	1ae6 <USBFilterOsVendorMessage+0x2e>
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    1ae0:	480e      	ldr	r0, [pc, #56]	; (1b1c <USBFilterOsVendorMessage+0x64>)
    1ae2:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    1ae4:	2028      	movs	r0, #40	; 0x28
			break;
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    1ae6:	6010      	str	r0, [r2, #0]
		default:
			return TRUE;
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    1ae8:	0a20      	lsrs	r0, r4, #8
		if (*piLen < iPageOffset) {
    1aea:	6814      	ldr	r4, [r2, #0]
		default:
			return TRUE;
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    1aec:	0400      	lsls	r0, r0, #16
		if (*piLen < iPageOffset) {
    1aee:	4284      	cmp	r4, r0
    1af0:	db0e      	blt.n	1b10 <USBFilterOsVendorMessage+0x58>
			// Not enough data for the requested offset.
			return TRUE;
		}
		*ppbData += iPageOffset;
    1af2:	681d      	ldr	r5, [r3, #0]
    1af4:	4405      	add	r5, r0
		*piLen -= iPageOffset;
    1af6:	1a20      	subs	r0, r4, r0
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
		}
		*ppbData += iPageOffset;
    1af8:	601d      	str	r5, [r3, #0]
    1afa:	42b0      	cmp	r0, r6
    1afc:	bfd4      	ite	le
    1afe:	6010      	strle	r0, [r2, #0]
    1b00:	6016      	strgt	r6, [r2, #0]
		if (*piLen > iRequestLength) {
			// Clip data longer than the requested length
			*piLen = iRequestLength;
		}
	
		*pfSuccess = TRUE;
    1b02:	2001      	movs	r0, #1
    1b04:	6008      	str	r0, [r1, #0]
		return TRUE;
    1b06:	bd70      	pop	{r4, r5, r6, pc}
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
	if(bMsVendorIndex == 0)	{
		// Feature is disabled.
		return FALSE;
    1b08:	4628      	mov	r0, r5
    1b0a:	bd70      	pop	{r4, r5, r6, pc}
    1b0c:	4620      	mov	r0, r4
    1b0e:	bd70      	pop	{r4, r5, r6, pc}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
    1b10:	2001      	movs	r0, #1
		return TRUE;
	}
	
	// These are not the requests you are looking for
	return FALSE;
}
    1b12:	bd70      	pop	{r4, r5, r6, pc}
    1b14:	100005d0 	.word	0x100005d0
    1b18:	10000458 	.word	0x10000458
    1b1c:	00001f14 	.word	0x00001f14

00001b20 <USBRegisterDescriptors>:

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(U8 *pabDescriptors)
{
	pabDescrip = pabDescriptors;
    1b20:	4b01      	ldr	r3, [pc, #4]	; (1b28 <USBRegisterDescriptors+0x8>)
    1b22:	6058      	str	r0, [r3, #4]
    1b24:	4770      	bx	lr
    1b26:	bf00      	nop
    1b28:	100005d0 	.word	0x100005d0

00001b2c <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    1b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    1b2e:	0a06      	lsrs	r6, r0, #8
	bIndex = GET_DESC_INDEX(wTypeIndex);
	
    if (bType == DESC_STRING &&
    1b30:	2e03      	cmp	r6, #3
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
	bIndex = GET_DESC_INDEX(wTypeIndex);
    1b32:	b2c4      	uxtb	r4, r0
    1b34:	4811      	ldr	r0, [pc, #68]	; (1b7c <USBGetDescriptor+0x50>)
	
    if (bType == DESC_STRING &&
    1b36:	d108      	bne.n	1b4a <USBGetDescriptor+0x1e>
    1b38:	2cee      	cmp	r4, #238	; 0xee
    1b3a:	d106      	bne.n	1b4a <USBGetDescriptor+0x1e>
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    1b3c:	4910      	ldr	r1, [pc, #64]	; (1b80 <USBGetDescriptor+0x54>)
    1b3e:	7800      	ldrb	r0, [r0, #0]
	
	*ppbData = abOsStringDescriptor;
    1b40:	3192      	adds	r1, #146	; 0x92
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    1b42:	7408      	strb	r0, [r1, #16]
	
	*ppbData = abOsStringDescriptor;
    1b44:	6019      	str	r1, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    1b46:	2312      	movs	r3, #18
    1b48:	e012      	b.n	1b70 <USBGetDescriptor+0x44>
            return TRUE;
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    1b4a:	6841      	ldr	r1, [r0, #4]
	iCurIndex = 0;
    1b4c:	2500      	movs	r5, #0
	
	while (pab[DESC_bLength] != 0) {
    1b4e:	e001      	b.n	1b54 <USBGetDescriptor+0x28>
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
			}
			iCurIndex++;
    1b50:	3501      	adds	r5, #1
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    1b52:	4401      	add	r1, r0
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    1b54:	7808      	ldrb	r0, [r1, #0]
    1b56:	b180      	cbz	r0, 1b7a <USBGetDescriptor+0x4e>
		if (pab[DESC_bDescriptorType] == bType) {
    1b58:	784f      	ldrb	r7, [r1, #1]
    1b5a:	42b7      	cmp	r7, r6
    1b5c:	d1f9      	bne.n	1b52 <USBGetDescriptor+0x26>
			if (iCurIndex == bIndex) {
    1b5e:	42a5      	cmp	r5, r4
    1b60:	d1f6      	bne.n	1b50 <USBGetDescriptor+0x24>
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    1b62:	2e02      	cmp	r6, #2
	
	while (pab[DESC_bLength] != 0) {
		if (pab[DESC_bDescriptorType] == bType) {
			if (iCurIndex == bIndex) {
				// set data pointer
				*ppbData = pab;
    1b64:	6019      	str	r1, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    1b66:	d106      	bne.n	1b76 <USBGetDescriptor+0x4a>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    1b68:	78c8      	ldrb	r0, [r1, #3]
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    1b6a:	788b      	ldrb	r3, [r1, #2]
    1b6c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    1b70:	6013      	str	r3, [r2, #0]
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
    1b72:	2001      	movs	r0, #1
    1b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    1b76:	780b      	ldrb	r3, [r1, #0]
    1b78:	e7fa      	b.n	1b70 <USBGetDescriptor+0x44>
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
}
    1b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b7c:	100005d0 	.word	0x100005d0
    1b80:	10000458 	.word	0x10000458

00001b84 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    1b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    1b88:	4e4b      	ldr	r6, [pc, #300]	; (1cb8 <USBHandleStandardRequest+0x134>)
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    1b8a:	4605      	mov	r5, r0
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    1b8c:	68b3      	ldr	r3, [r6, #8]
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    1b8e:	460f      	mov	r7, r1
    1b90:	4614      	mov	r4, r2
    1b92:	46b0      	mov	r8, r6
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    1b94:	b943      	cbnz	r3, 1ba8 <USBHandleStandardRequest+0x24>
		return TRUE;
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    1b96:	7828      	ldrb	r0, [r5, #0]
    1b98:	f000 061f 	and.w	r6, r0, #31
    1b9c:	2e01      	cmp	r6, #1
    1b9e:	d055      	beq.n	1c4c <USBHandleStandardRequest+0xc8>
    1ba0:	d306      	bcc.n	1bb0 <USBHandleStandardRequest+0x2c>
    1ba2:	2e02      	cmp	r6, #2
    1ba4:	d064      	beq.n	1c70 <USBHandleStandardRequest+0xec>
    1ba6:	e083      	b.n	1cb0 <USBHandleStandardRequest+0x12c>
	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    1ba8:	4798      	blx	r3
    1baa:	2800      	cmp	r0, #0
    1bac:	d0f3      	beq.n	1b96 <USBHandleStandardRequest+0x12>
    1bae:	e04a      	b.n	1c46 <USBHandleStandardRequest+0xc2>
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    1bb0:	786a      	ldrb	r2, [r5, #1]

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;
    1bb2:	6823      	ldr	r3, [r4, #0]

	switch (pSetup->bRequest) {
    1bb4:	2a09      	cmp	r2, #9
    1bb6:	d87b      	bhi.n	1cb0 <USBHandleStandardRequest+0x12c>
    1bb8:	e8df f002 	tbb	[pc, r2]
    1bbc:	7a7a7a05 	.word	0x7a7a7a05
    1bc0:	7a0d097a 	.word	0x7a0d097a
    1bc4:	1c15      	.short	0x1c15
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    1bc6:	2200      	movs	r2, #0
    1bc8:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    1bca:	705a      	strb	r2, [r3, #1]
    1bcc:	e047      	b.n	1c5e <USBHandleStandardRequest+0xda>
		*piLen = 2;
		break;
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    1bce:	78a8      	ldrb	r0, [r5, #2]
    1bd0:	f7ff fe0e 	bl	17f0 <USBHwSetAddress>
    1bd4:	e037      	b.n	1c46 <USBHandleStandardRequest+0xc2>
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    1bd6:	8868      	ldrh	r0, [r5, #2]
    1bd8:	88a9      	ldrh	r1, [r5, #4]
    1bda:	463a      	mov	r2, r7
    1bdc:	4623      	mov	r3, r4
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    1bde:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		USBHwSetAddress(pSetup->wValue);
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    1be2:	f7ff bfa3 	b.w	1b2c <USBGetDescriptor>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    1be6:	f898 200c 	ldrb.w	r2, [r8, #12]
		*piLen = 1;
    1bea:	2001      	movs	r0, #1
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    1bec:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    1bee:	6038      	str	r0, [r7, #0]
    1bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		break;

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    1bf4:	78ae      	ldrb	r6, [r5, #2]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    1bf6:	b90e      	cbnz	r6, 1bfc <USBHandleStandardRequest+0x78>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    1bf8:	4630      	mov	r0, r6
    1bfa:	e01f      	b.n	1c3c <USBHandleStandardRequest+0xb8>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;
    1bfc:	27ff      	movs	r7, #255	; 0xff
		USBHwConfigDevice(FALSE);
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
    1bfe:	46b9      	mov	r9, r7
		// unconfigure device
		USBHwConfigDevice(FALSE);
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    1c00:	f8d8 4004 	ldr.w	r4, [r8, #4]
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    1c04:	7823      	ldrb	r3, [r4, #0]
    1c06:	b1c3      	cbz	r3, 1c3a <USBHandleStandardRequest+0xb6>

			switch (pab[DESC_bDescriptorType]) {
    1c08:	7863      	ldrb	r3, [r4, #1]
    1c0a:	2b04      	cmp	r3, #4
    1c0c:	d006      	beq.n	1c1c <USBHandleStandardRequest+0x98>
    1c0e:	2b05      	cmp	r3, #5
    1c10:	d006      	beq.n	1c20 <USBHandleStandardRequest+0x9c>
    1c12:	2b02      	cmp	r3, #2
    1c14:	d10e      	bne.n	1c34 <USBHandleStandardRequest+0xb0>

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    1c16:	f894 9005 	ldrb.w	r9, [r4, #5]
    1c1a:	e00b      	b.n	1c34 <USBHandleStandardRequest+0xb0>
				break;

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    1c1c:	78e7      	ldrb	r7, [r4, #3]
    1c1e:	e009      	b.n	1c34 <USBHandleStandardRequest+0xb0>
				break;

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    1c20:	45b1      	cmp	r9, r6
    1c22:	d107      	bne.n	1c34 <USBHandleStandardRequest+0xb0>
    1c24:	b937      	cbnz	r7, 1c34 <USBHandleStandardRequest+0xb0>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    1c26:	7961      	ldrb	r1, [r4, #5]
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    1c28:	7923      	ldrb	r3, [r4, #4]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    1c2a:	78a0      	ldrb	r0, [r4, #2]
    1c2c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    1c30:	f7ff fd9a 	bl	1768 <USBHwEPConfig>

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    1c34:	7823      	ldrb	r3, [r4, #0]
    1c36:	441c      	add	r4, r3
    1c38:	e7e4      	b.n	1c04 <USBHandleStandardRequest+0x80>
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    1c3a:	2001      	movs	r0, #1
    1c3c:	f7ff fe78 	bl	1930 <USBHwConfigDevice>
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    1c40:	886b      	ldrh	r3, [r5, #2]
    1c42:	f888 300c 	strb.w	r3, [r8, #12]
	default:
		DBG("Illegal device req %d\n", pSetup->bRequest);
		return FALSE;
	}
	
	return TRUE;
    1c46:	2001      	movs	r0, #1
    1c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    1c4c:	786b      	ldrb	r3, [r5, #1]
    1c4e:	6822      	ldr	r2, [r4, #0]
    1c50:	2b0a      	cmp	r3, #10
    1c52:	d006      	beq.n	1c62 <USBHandleStandardRequest+0xde>
    1c54:	2b0b      	cmp	r3, #11
    1c56:	d007      	beq.n	1c68 <USBHandleStandardRequest+0xe4>
    1c58:	bb53      	cbnz	r3, 1cb0 <USBHandleStandardRequest+0x12c>

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    1c5a:	7013      	strb	r3, [r2, #0]
		pbData[1] = 0;
    1c5c:	7053      	strb	r3, [r2, #1]
		*piLen = 2;
    1c5e:	2302      	movs	r3, #2
    1c60:	e004      	b.n	1c6c <USBHandleStandardRequest+0xe8>
		// not defined for interface
		return FALSE;
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    1c62:	2300      	movs	r3, #0
    1c64:	7013      	strb	r3, [r2, #0]
    1c66:	e016      	b.n	1c96 <USBHandleStandardRequest+0x112>
		*piLen = 1;
		break;
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    1c68:	886b      	ldrh	r3, [r5, #2]
    1c6a:	bb0b      	cbnz	r3, 1cb0 <USBHandleStandardRequest+0x12c>
			return FALSE;
		}
		*piLen = 0;
    1c6c:	603b      	str	r3, [r7, #0]
    1c6e:	e7ea      	b.n	1c46 <USBHandleStandardRequest+0xc2>
    1c70:	f8d4 8000 	ldr.w	r8, [r4]
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    1c74:	786c      	ldrb	r4, [r5, #1]
    1c76:	2c01      	cmp	r4, #1
    1c78:	d00f      	beq.n	1c9a <USBHandleStandardRequest+0x116>
    1c7a:	d302      	bcc.n	1c82 <USBHandleStandardRequest+0xfe>
    1c7c:	2c03      	cmp	r4, #3
    1c7e:	d010      	beq.n	1ca2 <USBHandleStandardRequest+0x11e>
    1c80:	e016      	b.n	1cb0 <USBHandleStandardRequest+0x12c>
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    1c82:	7928      	ldrb	r0, [r5, #4]
    1c84:	f7ff fdc4 	bl	1810 <USBHwEPGetStatus>
		pbData[1] = 0;
    1c88:	2300      	movs	r3, #0
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    1c8a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1c8e:	f888 0000 	strb.w	r0, [r8]
		pbData[1] = 0;
    1c92:	f888 3001 	strb.w	r3, [r8, #1]
		*piLen = 2;
    1c96:	603e      	str	r6, [r7, #0]
    1c98:	e7d5      	b.n	1c46 <USBHandleStandardRequest+0xc2>
		break;
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    1c9a:	8869      	ldrh	r1, [r5, #2]
    1c9c:	b941      	cbnz	r1, 1cb0 <USBHandleStandardRequest+0x12c>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    1c9e:	7928      	ldrb	r0, [r5, #4]
    1ca0:	e003      	b.n	1caa <USBHandleStandardRequest+0x126>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    1ca2:	886b      	ldrh	r3, [r5, #2]
    1ca4:	b923      	cbnz	r3, 1cb0 <USBHandleStandardRequest+0x12c>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    1ca6:	7928      	ldrb	r0, [r5, #4]
    1ca8:	2101      	movs	r1, #1
    1caa:	f7ff fdcb 	bl	1844 <USBHwEPStall>
    1cae:	e7ca      	b.n	1c46 <USBHandleStandardRequest+0xc2>
		break;
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
			return FALSE;
    1cb0:	2000      	movs	r0, #0
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    1cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1cb6:	bf00      	nop
    1cb8:	100005d0 	.word	0x100005d0

00001cbc <memcpy>:
    1cbc:	4684      	mov	ip, r0
    1cbe:	ea41 0300 	orr.w	r3, r1, r0
    1cc2:	f013 0303 	ands.w	r3, r3, #3
    1cc6:	d149      	bne.n	1d5c <memcpy+0xa0>
    1cc8:	3a40      	subs	r2, #64	; 0x40
    1cca:	d323      	bcc.n	1d14 <memcpy+0x58>
    1ccc:	680b      	ldr	r3, [r1, #0]
    1cce:	6003      	str	r3, [r0, #0]
    1cd0:	684b      	ldr	r3, [r1, #4]
    1cd2:	6043      	str	r3, [r0, #4]
    1cd4:	688b      	ldr	r3, [r1, #8]
    1cd6:	6083      	str	r3, [r0, #8]
    1cd8:	68cb      	ldr	r3, [r1, #12]
    1cda:	60c3      	str	r3, [r0, #12]
    1cdc:	690b      	ldr	r3, [r1, #16]
    1cde:	6103      	str	r3, [r0, #16]
    1ce0:	694b      	ldr	r3, [r1, #20]
    1ce2:	6143      	str	r3, [r0, #20]
    1ce4:	698b      	ldr	r3, [r1, #24]
    1ce6:	6183      	str	r3, [r0, #24]
    1ce8:	69cb      	ldr	r3, [r1, #28]
    1cea:	61c3      	str	r3, [r0, #28]
    1cec:	6a0b      	ldr	r3, [r1, #32]
    1cee:	6203      	str	r3, [r0, #32]
    1cf0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    1cf2:	6243      	str	r3, [r0, #36]	; 0x24
    1cf4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    1cf6:	6283      	str	r3, [r0, #40]	; 0x28
    1cf8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1cfa:	62c3      	str	r3, [r0, #44]	; 0x2c
    1cfc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    1cfe:	6303      	str	r3, [r0, #48]	; 0x30
    1d00:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    1d02:	6343      	str	r3, [r0, #52]	; 0x34
    1d04:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    1d06:	6383      	str	r3, [r0, #56]	; 0x38
    1d08:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    1d0a:	63c3      	str	r3, [r0, #60]	; 0x3c
    1d0c:	3040      	adds	r0, #64	; 0x40
    1d0e:	3140      	adds	r1, #64	; 0x40
    1d10:	3a40      	subs	r2, #64	; 0x40
    1d12:	d2db      	bcs.n	1ccc <memcpy+0x10>
    1d14:	3230      	adds	r2, #48	; 0x30
    1d16:	d30b      	bcc.n	1d30 <memcpy+0x74>
    1d18:	680b      	ldr	r3, [r1, #0]
    1d1a:	6003      	str	r3, [r0, #0]
    1d1c:	684b      	ldr	r3, [r1, #4]
    1d1e:	6043      	str	r3, [r0, #4]
    1d20:	688b      	ldr	r3, [r1, #8]
    1d22:	6083      	str	r3, [r0, #8]
    1d24:	68cb      	ldr	r3, [r1, #12]
    1d26:	60c3      	str	r3, [r0, #12]
    1d28:	3010      	adds	r0, #16
    1d2a:	3110      	adds	r1, #16
    1d2c:	3a10      	subs	r2, #16
    1d2e:	d2f3      	bcs.n	1d18 <memcpy+0x5c>
    1d30:	320c      	adds	r2, #12
    1d32:	d305      	bcc.n	1d40 <memcpy+0x84>
    1d34:	f851 3b04 	ldr.w	r3, [r1], #4
    1d38:	f840 3b04 	str.w	r3, [r0], #4
    1d3c:	3a04      	subs	r2, #4
    1d3e:	d2f9      	bcs.n	1d34 <memcpy+0x78>
    1d40:	3204      	adds	r2, #4
    1d42:	d008      	beq.n	1d56 <memcpy+0x9a>
    1d44:	07d2      	lsls	r2, r2, #31
    1d46:	bf1c      	itt	ne
    1d48:	f811 3b01 	ldrbne.w	r3, [r1], #1
    1d4c:	f800 3b01 	strbne.w	r3, [r0], #1
    1d50:	d301      	bcc.n	1d56 <memcpy+0x9a>
    1d52:	880b      	ldrh	r3, [r1, #0]
    1d54:	8003      	strh	r3, [r0, #0]
    1d56:	4660      	mov	r0, ip
    1d58:	4770      	bx	lr
    1d5a:	bf00      	nop
    1d5c:	2a08      	cmp	r2, #8
    1d5e:	d313      	bcc.n	1d88 <memcpy+0xcc>
    1d60:	078b      	lsls	r3, r1, #30
    1d62:	d0b1      	beq.n	1cc8 <memcpy+0xc>
    1d64:	f010 0303 	ands.w	r3, r0, #3
    1d68:	d0ae      	beq.n	1cc8 <memcpy+0xc>
    1d6a:	f1c3 0304 	rsb	r3, r3, #4
    1d6e:	1ad2      	subs	r2, r2, r3
    1d70:	07db      	lsls	r3, r3, #31
    1d72:	bf1c      	itt	ne
    1d74:	f811 3b01 	ldrbne.w	r3, [r1], #1
    1d78:	f800 3b01 	strbne.w	r3, [r0], #1
    1d7c:	d3a4      	bcc.n	1cc8 <memcpy+0xc>
    1d7e:	f831 3b02 	ldrh.w	r3, [r1], #2
    1d82:	f820 3b02 	strh.w	r3, [r0], #2
    1d86:	e79f      	b.n	1cc8 <memcpy+0xc>
    1d88:	3a04      	subs	r2, #4
    1d8a:	d3d9      	bcc.n	1d40 <memcpy+0x84>
    1d8c:	3a01      	subs	r2, #1
    1d8e:	f811 3b01 	ldrb.w	r3, [r1], #1
    1d92:	f800 3b01 	strb.w	r3, [r0], #1
    1d96:	d2f9      	bcs.n	1d8c <memcpy+0xd0>
    1d98:	780b      	ldrb	r3, [r1, #0]
    1d9a:	7003      	strb	r3, [r0, #0]
    1d9c:	784b      	ldrb	r3, [r1, #1]
    1d9e:	7043      	strb	r3, [r0, #1]
    1da0:	788b      	ldrb	r3, [r1, #2]
    1da2:	7083      	strb	r3, [r0, #2]
    1da4:	4660      	mov	r0, ip
    1da6:	4770      	bx	lr

00001da8 <strlen>:
    1da8:	f020 0103 	bic.w	r1, r0, #3
    1dac:	f010 0003 	ands.w	r0, r0, #3
    1db0:	f1c0 0000 	rsb	r0, r0, #0
    1db4:	f851 3b04 	ldr.w	r3, [r1], #4
    1db8:	f100 0c04 	add.w	ip, r0, #4
    1dbc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    1dc0:	f06f 0200 	mvn.w	r2, #0
    1dc4:	bf1c      	itt	ne
    1dc6:	fa22 f20c 	lsrne.w	r2, r2, ip
    1dca:	4313      	orrne	r3, r2
    1dcc:	f04f 0c01 	mov.w	ip, #1
    1dd0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    1dd4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    1dd8:	eba3 020c 	sub.w	r2, r3, ip
    1ddc:	ea22 0203 	bic.w	r2, r2, r3
    1de0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    1de4:	bf04      	itt	eq
    1de6:	f851 3b04 	ldreq.w	r3, [r1], #4
    1dea:	3004      	addeq	r0, #4
    1dec:	d0f4      	beq.n	1dd8 <strlen+0x30>
    1dee:	f1c2 0100 	rsb	r1, r2, #0
    1df2:	ea02 0201 	and.w	r2, r2, r1
    1df6:	fab2 f282 	clz	r2, r2
    1dfa:	f1c2 021f 	rsb	r2, r2, #31
    1dfe:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    1e02:	4770      	bx	lr
    1e04:	00000043 	.word	0x00000043

00001e08 <_global_impure_ptr>:
    1e08:	10000020                                 ...

00001e0c <abDescriptors>:
    1e0c:	02000112 400000ff 0004ffff 02010100     .......@........
    1e1c:	02090103 01010020 09328000 02000004     .... .....2.....
    1e2c:	000000ff 02820507 07000040 40020505     ........@......@
    1e3c:	03040000 03440409 00740068 00700074     ......D.h.t.t.p.
    1e4c:	002f003a 0075002f 00650062 00740072     :././.u.b.e.r.t.
    1e5c:	006f006f 00680074 0073002e 0075006f     o.o.t.h...s.o.u.
    1e6c:	00630072 00660065 0072006f 00650067     r.c.e.f.o.r.g.e.
    1e7c:	006e002e 00740065 0330002f 00620075     ..n.e.t./.0.u.b.
    1e8c:	00720065 006f0074 0074006f 00200068     e.r.t.o.o.t.h. .
    1e9c:	00730061 00650073 0062006d 0079006c     a.s.s.e.m.b.l.y.
    1eac:	0074005f 00730065 03120074 00300030     _.t.e.s.t...0.0.
    1ebc:	00300030 00300030 00310030 585c4700     0.0.0.0.0.1..G\X
    1ecc:	5e3473cc 98b1b88e 11bc68e6 1c3316d7     .s4^.....h....3.
    1edc:	ae2317cd 9a39662c 8cc5752f e74533c7     ..#.,f9./u...3E.
    1eec:	8e198beb 1dce8b66 cc316371 e23a79d1     ....f...qc1..y:.
    1efc:	a29963c6 746967f3 6565312d 34333438     .c...git-1ee8434
    1f0c:	00000000                                ....

00001f10 <iap_entry>:
    1f10:	1fff1ff1                                ....

00001f14 <abExtendedOsFeatureDescriptor>:
    1f14:	00000028 00040100 00000001 00000000     (...............
    1f24:	49570100 4253554e 00000000 00000000     ..WINUSB........
    1f34:	00000000 00000000                       ........

00001f3c <_init>:
    1f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f3e:	bf00      	nop
    1f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f42:	bc08      	pop	{r3}
    1f44:	469e      	mov	lr, r3
    1f46:	4770      	bx	lr

00001f48 <__init_array_start>:
    1f48:	00000179 	.word	0x00000179

00001f4c <__frame_dummy_init_array_entry>:
    1f4c:	000000f1                                ....

00001f50 <_fini>:
    1f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f52:	bf00      	nop
    1f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f56:	bc08      	pop	{r3}
    1f58:	469e      	mov	lr, r3
    1f5a:	4770      	bx	lr

00001f5c <__fini_array_start>:
    1f5c:	000000cd 	.word	0x000000cd

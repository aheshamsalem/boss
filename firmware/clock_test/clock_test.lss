
clock_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000638  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00010000  2**0
                  ALLOC
  2 .data         00000428  10000020  00004638  00008020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000024  10000448  00004a60  00008448  2**2
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00008448  2**0
                  CONTENTS, READONLY
  5 .comment      00000070  00000000  00000000  00008471  2**0
                  CONTENTS, READONLY
  6 .debug_frame  00000490  00000000  00000000  000084e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000d32  00000000  00000000  00008974  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004c0  00000000  00000000  000096a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000168  00000000  00000000  00009b66  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000158  00000000  00000000  00009cce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000069d  00000000  00000000  00009e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000004d7  00000000  00000000  0000a4c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000670  00000000  00000000  0000a99a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 a1 42 00 00 f5 42 00 00 f5 42 00 00     .?...B...B...B..
    4010:	f5 42 00 00 f5 42 00 00 f5 42 00 00 00 00 00 00     .B...B...B......
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 f5 42 00 00     .............B..
    4030:	f5 42 00 00 00 00 00 00 f5 42 00 00 f5 42 00 00     .B.......B...B..
    4040:	f5 42 00 00 f5 42 00 00 f5 42 00 00 f5 42 00 00     .B...B...B...B..
    4050:	f5 42 00 00 f5 42 00 00 f5 42 00 00 f5 42 00 00     .B...B...B...B..
    4060:	f5 42 00 00 f5 42 00 00 f5 42 00 00 f5 42 00 00     .B...B...B...B..
    4070:	f5 42 00 00 f5 42 00 00 f5 42 00 00 f5 42 00 00     .B...B...B...B..
    4080:	f5 42 00 00 f5 42 00 00 f5 42 00 00 f5 42 00 00     .B...B...B...B..
    4090:	f5 42 00 00 f5 42 00 00 f5 42 00 00 f5 42 00 00     .B...B...B...B..
    40a0:	f5 42 00 00 f5 42 00 00 f5 42 00 00 f5 42 00 00     .B...B...B...B..
    40b0:	f5 42 00 00 f5 42 00 00 f5 42 00 00 f5 42 00 00     .B...B...B...B..
    40c0:	f5 42 00 00 f5 42 00 00 f5 42 00 00                 .B...B...B..

000040cc <__do_global_dtors_aux>:
    40cc:	b510      	push	{r4, lr}
    40ce:	4c05      	ldr	r4, [pc, #20]	; (40e4 <__do_global_dtors_aux+0x18>)
    40d0:	7823      	ldrb	r3, [r4, #0]
    40d2:	b933      	cbnz	r3, 40e2 <__do_global_dtors_aux+0x16>
    40d4:	4b04      	ldr	r3, [pc, #16]	; (40e8 <__do_global_dtors_aux+0x1c>)
    40d6:	b113      	cbz	r3, 40de <__do_global_dtors_aux+0x12>
    40d8:	4804      	ldr	r0, [pc, #16]	; (40ec <__do_global_dtors_aux+0x20>)
    40da:	f3af 8000 	nop.w
    40de:	2301      	movs	r3, #1
    40e0:	7023      	strb	r3, [r4, #0]
    40e2:	bd10      	pop	{r4, pc}
    40e4:	10000448 	.word	0x10000448
    40e8:	00000000 	.word	0x00000000
    40ec:	00004610 	.word	0x00004610

000040f0 <frame_dummy>:
    40f0:	4b08      	ldr	r3, [pc, #32]	; (4114 <frame_dummy+0x24>)
    40f2:	b510      	push	{r4, lr}
    40f4:	b11b      	cbz	r3, 40fe <frame_dummy+0xe>
    40f6:	4808      	ldr	r0, [pc, #32]	; (4118 <frame_dummy+0x28>)
    40f8:	4908      	ldr	r1, [pc, #32]	; (411c <frame_dummy+0x2c>)
    40fa:	f3af 8000 	nop.w
    40fe:	4808      	ldr	r0, [pc, #32]	; (4120 <frame_dummy+0x30>)
    4100:	6803      	ldr	r3, [r0, #0]
    4102:	b903      	cbnz	r3, 4106 <frame_dummy+0x16>
    4104:	bd10      	pop	{r4, pc}
    4106:	4b07      	ldr	r3, [pc, #28]	; (4124 <frame_dummy+0x34>)
    4108:	2b00      	cmp	r3, #0
    410a:	d0fb      	beq.n	4104 <frame_dummy+0x14>
    410c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4110:	4718      	bx	r3
    4112:	bf00      	nop
    4114:	00000000 	.word	0x00000000
    4118:	00004610 	.word	0x00004610
    411c:	1000044c 	.word	0x1000044c
    4120:	10000448 	.word	0x10000448
    4124:	00000000 	.word	0x00000000

00004128 <__libc_init_array>:
    4128:	b570      	push	{r4, r5, r6, lr}
    412a:	4e0f      	ldr	r6, [pc, #60]	; (4168 <__libc_init_array+0x40>)
    412c:	4d0f      	ldr	r5, [pc, #60]	; (416c <__libc_init_array+0x44>)
    412e:	1b76      	subs	r6, r6, r5
    4130:	10b6      	asrs	r6, r6, #2
    4132:	bf18      	it	ne
    4134:	2400      	movne	r4, #0
    4136:	d005      	beq.n	4144 <__libc_init_array+0x1c>
    4138:	3401      	adds	r4, #1
    413a:	f855 3b04 	ldr.w	r3, [r5], #4
    413e:	4798      	blx	r3
    4140:	42a6      	cmp	r6, r4
    4142:	d1f9      	bne.n	4138 <__libc_init_array+0x10>
    4144:	4e0a      	ldr	r6, [pc, #40]	; (4170 <__libc_init_array+0x48>)
    4146:	4d0b      	ldr	r5, [pc, #44]	; (4174 <__libc_init_array+0x4c>)
    4148:	f000 fa62 	bl	4610 <_init>
    414c:	1b76      	subs	r6, r6, r5
    414e:	10b6      	asrs	r6, r6, #2
    4150:	bf18      	it	ne
    4152:	2400      	movne	r4, #0
    4154:	d006      	beq.n	4164 <__libc_init_array+0x3c>
    4156:	3401      	adds	r4, #1
    4158:	f855 3b04 	ldr.w	r3, [r5], #4
    415c:	4798      	blx	r3
    415e:	42a6      	cmp	r6, r4
    4160:	d1f9      	bne.n	4156 <__libc_init_array+0x2e>
    4162:	bd70      	pop	{r4, r5, r6, pc}
    4164:	bd70      	pop	{r4, r5, r6, pc}
    4166:	bf00      	nop
    4168:	0000461c 	.word	0x0000461c
    416c:	0000461c 	.word	0x0000461c
    4170:	00004624 	.word	0x00004624
    4174:	0000461c 	.word	0x0000461c

00004178 <register_fini>:
    4178:	4b02      	ldr	r3, [pc, #8]	; (4184 <register_fini+0xc>)
    417a:	b113      	cbz	r3, 4182 <register_fini+0xa>
    417c:	4802      	ldr	r0, [pc, #8]	; (4188 <register_fini+0x10>)
    417e:	f000 b805 	b.w	418c <atexit>
    4182:	4770      	bx	lr
    4184:	00000000 	.word	0x00000000
    4188:	00004199 	.word	0x00004199

0000418c <atexit>:
    418c:	4601      	mov	r1, r0
    418e:	2000      	movs	r0, #0
    4190:	4602      	mov	r2, r0
    4192:	4603      	mov	r3, r0
    4194:	f000 b816 	b.w	41c4 <__register_exitproc>

00004198 <__libc_fini_array>:
    4198:	b538      	push	{r3, r4, r5, lr}
    419a:	4b08      	ldr	r3, [pc, #32]	; (41bc <__libc_fini_array+0x24>)
    419c:	4d08      	ldr	r5, [pc, #32]	; (41c0 <__libc_fini_array+0x28>)
    419e:	1aed      	subs	r5, r5, r3
    41a0:	10ac      	asrs	r4, r5, #2
    41a2:	bf18      	it	ne
    41a4:	18ed      	addne	r5, r5, r3
    41a6:	d005      	beq.n	41b4 <__libc_fini_array+0x1c>
    41a8:	3c01      	subs	r4, #1
    41aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    41ae:	4798      	blx	r3
    41b0:	2c00      	cmp	r4, #0
    41b2:	d1f9      	bne.n	41a8 <__libc_fini_array+0x10>
    41b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    41b8:	f000 ba34 	b.w	4624 <_fini>
    41bc:	00004630 	.word	0x00004630
    41c0:	00004634 	.word	0x00004634

000041c4 <__register_exitproc>:
    41c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    41c8:	4c25      	ldr	r4, [pc, #148]	; (4260 <__register_exitproc+0x9c>)
    41ca:	4606      	mov	r6, r0
    41cc:	6825      	ldr	r5, [r4, #0]
    41ce:	4688      	mov	r8, r1
    41d0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    41d4:	4692      	mov	sl, r2
    41d6:	4699      	mov	r9, r3
    41d8:	b3c4      	cbz	r4, 424c <__register_exitproc+0x88>
    41da:	6860      	ldr	r0, [r4, #4]
    41dc:	281f      	cmp	r0, #31
    41de:	dc17      	bgt.n	4210 <__register_exitproc+0x4c>
    41e0:	1c41      	adds	r1, r0, #1
    41e2:	b176      	cbz	r6, 4202 <__register_exitproc+0x3e>
    41e4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    41e8:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
    41ec:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
    41f0:	2201      	movs	r2, #1
    41f2:	4082      	lsls	r2, r0
    41f4:	4315      	orrs	r5, r2
    41f6:	2e02      	cmp	r6, #2
    41f8:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
    41fc:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
    4200:	d01e      	beq.n	4240 <__register_exitproc+0x7c>
    4202:	1c83      	adds	r3, r0, #2
    4204:	6061      	str	r1, [r4, #4]
    4206:	2000      	movs	r0, #0
    4208:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
    420c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4210:	4b14      	ldr	r3, [pc, #80]	; (4264 <__register_exitproc+0xa0>)
    4212:	b303      	cbz	r3, 4256 <__register_exitproc+0x92>
    4214:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4218:	f3af 8000 	nop.w
    421c:	4604      	mov	r4, r0
    421e:	b1d0      	cbz	r0, 4256 <__register_exitproc+0x92>
    4220:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    4224:	2700      	movs	r7, #0
    4226:	e884 0088 	stmia.w	r4, {r3, r7}
    422a:	4638      	mov	r0, r7
    422c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    4230:	2101      	movs	r1, #1
    4232:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    4236:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    423a:	2e00      	cmp	r6, #0
    423c:	d0e1      	beq.n	4202 <__register_exitproc+0x3e>
    423e:	e7d1      	b.n	41e4 <__register_exitproc+0x20>
    4240:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    4244:	431a      	orrs	r2, r3
    4246:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    424a:	e7da      	b.n	4202 <__register_exitproc+0x3e>
    424c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    4250:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    4254:	e7c1      	b.n	41da <__register_exitproc+0x16>
    4256:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    425a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    425e:	bf00      	nop
    4260:	0000460c 	.word	0x0000460c
    4264:	00000000 	.word	0x00000000

00004268 <main>:
 */

#include "ubertooth.h"

int main()
{
    4268:	b508      	push	{r3, lr}
	gpio_init();
	TXLED_SET;
    426a:	4c0b      	ldr	r4, [pc, #44]	; (4298 <main+0x30>)

#include "ubertooth.h"

int main()
{
	gpio_init();
    426c:	f000 f88a 	bl	4384 <gpio_init>
	TXLED_SET;
    4270:	f44f 7380 	mov.w	r3, #256	; 0x100
    4274:	6023      	str	r3, [r4, #0]

	cc2400_init();
    4276:	f000 f8df 	bl	4438 <cc2400_init>
	RXLED_SET;
    427a:	2310      	movs	r3, #16
    427c:	6023      	str	r3, [r4, #0]

	clock_start();
    427e:	f000 f925 	bl	44cc <clock_start>
	while (1) {
		USRLED_SET;
    4282:	2502      	movs	r5, #2
		wait(2);
    4284:	4628      	mov	r0, r5
	cc2400_init();
	RXLED_SET;

	clock_start();
	while (1) {
		USRLED_SET;
    4286:	6025      	str	r5, [r4, #0]
		wait(2);
    4288:	f000 f84c 	bl	4324 <wait>
		USRLED_CLR;
    428c:	4b03      	ldr	r3, [pc, #12]	; (429c <main+0x34>)
		wait(2);
    428e:	4628      	mov	r0, r5

	clock_start();
	while (1) {
		USRLED_SET;
		wait(2);
		USRLED_CLR;
    4290:	601d      	str	r5, [r3, #0]
		wait(2);
    4292:	f000 f847 	bl	4324 <wait>
	}
    4296:	e7f4      	b.n	4282 <main+0x1a>
    4298:	2009c038 	.word	0x2009c038
    429c:	2009c03c 	.word	0x2009c03c

000042a0 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    42a0:	b508      	push	{r3, lr}
    42a2:	4a0d      	ldr	r2, [pc, #52]	; (42d8 <Reset_Handler+0x38>)
    42a4:	4b0d      	ldr	r3, [pc, #52]	; (42dc <Reset_Handler+0x3c>)
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    42a6:	490e      	ldr	r1, [pc, #56]	; (42e0 <Reset_Handler+0x40>)
    42a8:	428b      	cmp	r3, r1
    42aa:	d204      	bcs.n	42b6 <Reset_Handler+0x16>
	{
		*dest++ = *src++;
    42ac:	f852 1f04 	ldr.w	r1, [r2, #4]!
    42b0:	f843 1b04 	str.w	r1, [r3], #4
    42b4:	e7f7      	b.n	42a6 <Reset_Handler+0x6>
    42b6:	4b0b      	ldr	r3, [pc, #44]	; (42e4 <Reset_Handler+0x44>)
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    42b8:	4a0b      	ldr	r2, [pc, #44]	; (42e8 <Reset_Handler+0x48>)
    42ba:	4293      	cmp	r3, r2
    42bc:	d203      	bcs.n	42c6 <Reset_Handler+0x26>
	{
		*src++ = 0;
    42be:	2200      	movs	r2, #0
    42c0:	f843 2b04 	str.w	r2, [r3], #4
    42c4:	e7f8      	b.n	42b8 <Reset_Handler+0x18>
	}

	__libc_init_array();
    42c6:	f7ff ff2f 	bl	4128 <__libc_init_array>

	// Set the vector table location.
	SCB_VTOR = (uint32_t)&_interrupt_vector_table;
    42ca:	4b08      	ldr	r3, [pc, #32]	; (42ec <Reset_Handler+0x4c>)
    42cc:	4a08      	ldr	r2, [pc, #32]	; (42f0 <Reset_Handler+0x50>)
    42ce:	601a      	str	r2, [r3, #0]

	main();
    42d0:	f7ff ffca 	bl	4268 <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    42d4:	e7fe      	b.n	42d4 <Reset_Handler+0x34>
    42d6:	bf00      	nop
    42d8:	00004634 	.word	0x00004634
    42dc:	10000020 	.word	0x10000020
    42e0:	10000448 	.word	0x10000448
    42e4:	10000448 	.word	0x10000448
    42e8:	1000046c 	.word	0x1000046c
    42ec:	e000ed08 	.word	0xe000ed08
    42f0:	00004000 	.word	0x00004000

000042f4 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    42f4:	e7fe      	b.n	42f4 <ADC_IRQHandler>
    42f6:	0000      	movs	r0, r0

000042f8 <wait_us>:
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    42f8:	0883      	lsrs	r3, r0, #2
    42fa:	eb03 03d0 	add.w	r3, r3, r0, lsr #3
    42fe:	eb03 1390 	add.w	r3, r3, r0, lsr #6
    4302:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
    4306:	eb03 2390 	add.w	r3, r3, r0, lsr #10
    430a:	eb03 20d0 	add.w	r0, r3, r0, lsr #11
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    430e:	4b04      	ldr	r3, [pc, #16]	; (4320 <wait_us+0x28>)
    4310:	6058      	str	r0, [r3, #4]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    4312:	685a      	ldr	r2, [r3, #4]
    4314:	3a01      	subs	r2, #1
    4316:	605a      	str	r2, [r3, #4]
    4318:	2a00      	cmp	r2, #0
    431a:	d1fa      	bne.n	4312 <wait_us+0x1a>
}
    431c:	4770      	bx	lr
    431e:	bf00      	nop
    4320:	10000464 	.word	0x10000464

00004324 <wait>:
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    4324:	4b01      	ldr	r3, [pc, #4]	; (432c <wait+0x8>)
    4326:	4358      	muls	r0, r3
    4328:	f7ff bfe6 	b.w	42f8 <wait_us>
    432c:	000f4240 	.word	0x000f4240

00004330 <all_pins_off>:
}

void all_pins_off(void)
{
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    4330:	4a10      	ldr	r2, [pc, #64]	; (4374 <all_pins_off+0x44>)
    4332:	2300      	movs	r3, #0
    4334:	6013      	str	r3, [r2, #0]
	PINSEL1 = 0;
    4336:	6053      	str	r3, [r2, #4]
	PINSEL2 = 0;
    4338:	6093      	str	r3, [r2, #8]
	PINSEL3 = 0;
    433a:	60d3      	str	r3, [r2, #12]
	PINSEL4 = 0;
    433c:	6113      	str	r3, [r2, #16]
	PINSEL7 = 0;
    433e:	61d3      	str	r3, [r2, #28]
	PINSEL9 = 0;
    4340:	6253      	str	r3, [r2, #36]	; 0x24
	PINSEL10 = 0;
    4342:	6293      	str	r3, [r2, #40]	; 0x28

	/* configure all pins as inputs */
	FIO0DIR = 0;
    4344:	4a0c      	ldr	r2, [pc, #48]	; (4378 <all_pins_off+0x48>)
    4346:	6013      	str	r3, [r2, #0]
	FIO1DIR = 0;
    4348:	6213      	str	r3, [r2, #32]
	FIO2DIR = 0;
    434a:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3DIR = 0;
    434c:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = 0;
    434e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/* pull-up on every pin */
	PINMODE0 = 0;
    4352:	4a0a      	ldr	r2, [pc, #40]	; (437c <all_pins_off+0x4c>)
    4354:	6013      	str	r3, [r2, #0]
	PINMODE1 = 0;
    4356:	6053      	str	r3, [r2, #4]
	PINMODE2 = 0;
    4358:	6093      	str	r3, [r2, #8]
	PINMODE3 = 0;
    435a:	60d3      	str	r3, [r2, #12]
	PINMODE4 = 0;
    435c:	6113      	str	r3, [r2, #16]
	PINMODE7 = 0;
    435e:	61d3      	str	r3, [r2, #28]
	PINMODE9 = 0;
    4360:	6253      	str	r3, [r2, #36]	; 0x24

	/* set all outputs low */
	FIO0PIN = 0;
    4362:	4a07      	ldr	r2, [pc, #28]	; (4380 <all_pins_off+0x50>)
    4364:	6013      	str	r3, [r2, #0]
	FIO1PIN = 0;
    4366:	6213      	str	r3, [r2, #32]
	FIO2PIN = 0;
    4368:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3PIN = 0;
    436a:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4PIN = 0;
    436c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    4370:	4770      	bx	lr
    4372:	bf00      	nop
    4374:	4002c000 	.word	0x4002c000
    4378:	2009c000 	.word	0x2009c000
    437c:	4002c040 	.word	0x4002c040
    4380:	2009c014 	.word	0x2009c014

00004384 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    4384:	b508      	push	{r3, lr}
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    4386:	f7ff ffd3 	bl	4330 <all_pins_off>
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    438a:	f24c 7112 	movw	r1, #50962	; 0xc712
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    438e:	4a09      	ldr	r2, [pc, #36]	; (43b4 <gpio_init+0x30>)
    4390:	2300      	movs	r3, #0
    4392:	6013      	str	r3, [r2, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    4394:	6211      	str	r1, [r2, #32]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    4396:	f240 11b1 	movw	r1, #433	; 0x1b1
    439a:	6411      	str	r1, [r2, #64]	; 0x40
	FIO3DIR = 0;
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    439c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
	FIO3DIR = 0;
    43a0:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    43a2:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    43a6:	6153      	str	r3, [r2, #20]
	FIO1PIN = 0;
    43a8:	6353      	str	r3, [r2, #52]	; 0x34
	FIO2PIN = 0;
    43aa:	6553      	str	r3, [r2, #84]	; 0x54
	FIO3PIN = 0;
    43ac:	6753      	str	r3, [r2, #116]	; 0x74
	FIO4PIN = 0;
    43ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    43b2:	bd08      	pop	{r3, pc}
    43b4:	2009c000 	.word	0x2009c000

000043b8 <atest_init>:
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    43b8:	4a09      	ldr	r2, [pc, #36]	; (43e0 <atest_init+0x28>)
    43ba:	6813      	ldr	r3, [r2, #0]
    43bc:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    43c0:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    43c2:	4a08      	ldr	r2, [pc, #32]	; (43e4 <atest_init+0x2c>)
    43c4:	6813      	ldr	r3, [r2, #0]
    43c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    43ca:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    43cc:	4b06      	ldr	r3, [pc, #24]	; (43e8 <atest_init+0x30>)
    43ce:	681a      	ldr	r2, [r3, #0]
    43d0:	f442 1220 	orr.w	r2, r2, #2621440	; 0x280000
    43d4:	601a      	str	r2, [r3, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    43d6:	681a      	ldr	r2, [r3, #0]
    43d8:	f422 12a0 	bic.w	r2, r2, #1310720	; 0x140000
    43dc:	601a      	str	r2, [r3, #0]
    43de:	4770      	bx	lr
    43e0:	4002c004 	.word	0x4002c004
    43e4:	2009c000 	.word	0x2009c000
    43e8:	4002c044 	.word	0x4002c044

000043ec <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    43ec:	b530      	push	{r4, r5, lr}
	u32 msb = 1 << (len - 1);
    43ee:	2501      	movs	r5, #1
    43f0:	1e43      	subs	r3, r0, #1
    43f2:	409d      	lsls	r5, r3

	/* start transaction by dropping CSN */
	CSN_CLR;
    43f4:	4b0d      	ldr	r3, [pc, #52]	; (442c <cc2400_spi+0x40>)
    43f6:	2220      	movs	r2, #32

	while (len--) {
    43f8:	3801      	subs	r0, #1
    43fa:	b2c0      	uxtb	r0, r0
    43fc:	28ff      	cmp	r0, #255	; 0xff

		SCLK_SET;
		if (MISO)
			data |= 1;

		SCLK_CLR;
    43fe:	601a      	str	r2, [r3, #0]
    4400:	4c0b      	ldr	r4, [pc, #44]	; (4430 <cc2400_spi+0x44>)
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    4402:	d00f      	beq.n	4424 <cc2400_spi+0x38>
		if (data & msb)
    4404:	4229      	tst	r1, r5
    4406:	f04f 0201 	mov.w	r2, #1
			MOSI_SET;
    440a:	bf14      	ite	ne
    440c:	6022      	strne	r2, [r4, #0]
		else
			MOSI_CLR;
    440e:	601a      	streq	r2, [r3, #0]
		data <<= 1;

		SCLK_SET;
    4410:	2210      	movs	r2, #16
    4412:	6022      	str	r2, [r4, #0]
		if (MISO)
    4414:	4c07      	ldr	r4, [pc, #28]	; (4434 <cc2400_spi+0x48>)
	while (len--) {
		if (data & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		data <<= 1;
    4416:	0049      	lsls	r1, r1, #1

		SCLK_SET;
		if (MISO)
    4418:	6824      	ldr	r4, [r4, #0]
    441a:	07a4      	lsls	r4, r4, #30
			data |= 1;
    441c:	bf48      	it	mi
    441e:	f041 0101 	orrmi.w	r1, r1, #1
    4422:	e7e9      	b.n	43f8 <cc2400_spi+0xc>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    4424:	2320      	movs	r3, #32
    4426:	6023      	str	r3, [r4, #0]

	return data;
}
    4428:	4608      	mov	r0, r1
    442a:	bd30      	pop	{r4, r5, pc}
    442c:	2009c05c 	.word	0x2009c05c
    4430:	2009c058 	.word	0x2009c058
    4434:	2009c054 	.word	0x2009c054

00004438 <cc2400_init>:
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
}

void cc2400_init()
{
    4438:	b510      	push	{r4, lr}
#else
	atest_init();
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    443a:	4c0a      	ldr	r4, [pc, #40]	; (4464 <cc2400_init+0x2c>)
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    443c:	f7ff ffbc 	bl	43b8 <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    4440:	f44f 7300 	mov.w	r3, #512	; 0x200
    4444:	6023      	str	r3, [r4, #0]
	wait_us(50);
    4446:	2032      	movs	r0, #50	; 0x32
    4448:	f7ff ff56 	bl	42f8 <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    444c:	4b06      	ldr	r3, [pc, #24]	; (4468 <cc2400_init+0x30>)
    444e:	2220      	movs	r2, #32
    4450:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    4452:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    4456:	6023      	str	r3, [r4, #0]

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    4458:	2018      	movs	r0, #24
    445a:	4904      	ldr	r1, [pc, #16]	; (446c <cc2400_init+0x34>)
	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
}
    445c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    4460:	f7ff bfc4 	b.w	43ec <cc2400_spi>
    4464:	2009c038 	.word	0x2009c038
    4468:	2009c058 	.word	0x2009c058
    446c:	000d7fff 	.word	0x000d7fff

00004470 <cc2400_get>:
	return data;
}

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    4470:	b508      	push	{r3, lr}
	u32 in;

	u32 out = (reg | 0x80) << 16;
    4472:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(24, out);
    4476:	0409      	lsls	r1, r1, #16
    4478:	2018      	movs	r0, #24
    447a:	f7ff ffb7 	bl	43ec <cc2400_spi>
	return in & 0xFFFF;
}
    447e:	b280      	uxth	r0, r0
    4480:	bd08      	pop	{r3, pc}

00004482 <cc2400_status>:
	CSN_SET;
}

/* get the status */
u8 cc2400_status()
{
    4482:	b508      	push	{r3, lr}
	return cc2400_spi(8, 0);
    4484:	2100      	movs	r1, #0
    4486:	2008      	movs	r0, #8
    4488:	f7ff ffb0 	bl	43ec <cc2400_spi>
}
    448c:	b2c0      	uxtb	r0, r0
    448e:	bd08      	pop	{r3, pc}

00004490 <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    4490:	b508      	push	{r3, lr}
    4492:	4601      	mov	r1, r0
	return cc2400_spi(8, reg);
    4494:	2008      	movs	r0, #8
    4496:	f7ff ffa9 	bl	43ec <cc2400_spi>
}
    449a:	b2c0      	uxtb	r0, r0
    449c:	bd08      	pop	{r3, pc}

0000449e <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    449e:	b508      	push	{r3, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    44a0:	2018      	movs	r0, #24
    44a2:	2100      	movs	r1, #0
    44a4:	f7ff ffa2 	bl	43ec <cc2400_spi>
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
    44a8:	2000      	movs	r0, #0
    44aa:	f7ff ffe1 	bl	4470 <cc2400_get>
    44ae:	2800      	cmp	r0, #0
    44b0:	d1fa      	bne.n	44a8 <cc2400_reset+0xa>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    44b2:	2018      	movs	r0, #24
    44b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    44b8:	f7ff ff98 	bl	43ec <cc2400_spi>
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
	cc2400_set(MAIN, 0x8000);
	while (cc2400_get(MAIN) != 0x8000);
    44bc:	2000      	movs	r0, #0
    44be:	f7ff ffd7 	bl	4470 <cc2400_get>
    44c2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    44c6:	d1f9      	bne.n	44bc <cc2400_reset+0x1e>
}
    44c8:	bd08      	pop	{r3, pc}
    44ca:	0000      	movs	r0, r0

000044cc <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    44cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    44d0:	f244 023a 	movw	r2, #16442	; 0x403a
    44d4:	4b3e      	ldr	r3, [pc, #248]	; (45d0 <clock_start+0x104>)

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    44d6:	4f3f      	ldr	r7, [pc, #252]	; (45d4 <clock_start+0x108>)

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    44d8:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    44da:	4d3f      	ldr	r5, [pc, #252]	; (45d8 <clock_start+0x10c>)
{
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    44dc:	2300      	movs	r3, #0
    44de:	603b      	str	r3, [r7, #0]

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    44e0:	682b      	ldr	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    44e2:	4c3e      	ldr	r4, [pc, #248]	; (45dc <clock_start+0x110>)

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    44e4:	f023 0302 	bic.w	r3, r3, #2
    44e8:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    44ea:	23aa      	movs	r3, #170	; 0xaa
    44ec:	6023      	str	r3, [r4, #0]
    44ee:	2355      	movs	r3, #85	; 0x55
    44f0:	6023      	str	r3, [r4, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    44f2:	4e3b      	ldr	r6, [pc, #236]	; (45e0 <clock_start+0x114>)
    44f4:	6833      	ldr	r3, [r6, #0]
    44f6:	0198      	lsls	r0, r3, #6
    44f8:	d4fb      	bmi.n	44f2 <clock_start+0x26>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    44fa:	682b      	ldr	r3, [r5, #0]
    44fc:	f023 0301 	bic.w	r3, r3, #1
    4500:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    4502:	23aa      	movs	r3, #170	; 0xaa
    4504:	6023      	str	r3, [r4, #0]
    4506:	2355      	movs	r3, #85	; 0x55
    4508:	6023      	str	r3, [r4, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    450a:	6833      	ldr	r3, [r6, #0]
    450c:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    4510:	d1fb      	bne.n	450a <clock_start+0x3e>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    4512:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 4604 <clock_start+0x138>
    4516:	f8c8 3000 	str.w	r3, [r8]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    451a:	f7ff ffc0 	bl	449e <cc2400_reset>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    451e:	2018      	movs	r0, #24
    4520:	4930      	ldr	r1, [pc, #192]	; (45e4 <clock_start+0x118>)
    4522:	f7ff ff63 	bl	43ec <cc2400_spi>
	CCLKCFG = 0;

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
	cc2400_strobe(SXOSCON);
    4526:	2060      	movs	r0, #96	; 0x60
    4528:	f7ff ffb2 	bl	4490 <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    452c:	f7ff ffa9 	bl	4482 <cc2400_status>
    4530:	0641      	lsls	r1, r0, #25
    4532:	d5fb      	bpl.n	452c <clock_start+0x60>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    4534:	4b2c      	ldr	r3, [pc, #176]	; (45e8 <clock_start+0x11c>)
    4536:	2220      	movs	r2, #32
    4538:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    453a:	681a      	ldr	r2, [r3, #0]
    453c:	0652      	lsls	r2, r2, #25
    453e:	d5fc      	bpl.n	453a <clock_start+0x6e>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    4540:	4b2a      	ldr	r3, [pc, #168]	; (45ec <clock_start+0x120>)
    4542:	2208      	movs	r2, #8
    4544:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    4546:	2200      	movs	r2, #0
    4548:	605a      	str	r2, [r3, #4]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    454a:	2301      	movs	r3, #1
    454c:	603b      	str	r3, [r7, #0]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    454e:	4a28      	ldr	r2, [pc, #160]	; (45f0 <clock_start+0x124>)
    4550:	4b28      	ldr	r3, [pc, #160]	; (45f4 <clock_start+0x128>)
	PLL0FEED_SEQUENCE;
    4552:	21aa      	movs	r1, #170	; 0xaa

	/* switch to main oscillator */
	CLKSRCSEL = 1;

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    4554:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    4556:	2255      	movs	r2, #85	; 0x55
    4558:	6021      	str	r1, [r4, #0]
    455a:	6022      	str	r2, [r4, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    455c:	682b      	ldr	r3, [r5, #0]
    455e:	f043 0301 	orr.w	r3, r3, #1
    4562:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    4564:	6021      	str	r1, [r4, #0]
    4566:	6022      	str	r2, [r4, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    4568:	6833      	ldr	r3, [r6, #0]
    456a:	01df      	lsls	r7, r3, #7
    456c:	d5fc      	bpl.n	4568 <clock_start+0x9c>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    456e:	2303      	movs	r3, #3
    4570:	f8c8 3000 	str.w	r3, [r8]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    4574:	682b      	ldr	r3, [r5, #0]
    4576:	f043 0302 	orr.w	r3, r3, #2
    457a:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    457c:	23aa      	movs	r3, #170	; 0xaa
    457e:	6023      	str	r3, [r4, #0]
    4580:	2355      	movs	r3, #85	; 0x55
    4582:	6023      	str	r3, [r4, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    4584:	6833      	ldr	r3, [r6, #0]
    4586:	019d      	lsls	r5, r3, #6
    4588:	d5fc      	bpl.n	4584 <clock_start+0xb8>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    458a:	4b1b      	ldr	r3, [pc, #108]	; (45f8 <clock_start+0x12c>)
    458c:	2222      	movs	r2, #34	; 0x22
    458e:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    4590:	24aa      	movs	r4, #170	; 0xaa
    4592:	3308      	adds	r3, #8
    4594:	2055      	movs	r0, #85	; 0x55

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    4596:	4a19      	ldr	r2, [pc, #100]	; (45fc <clock_start+0x130>)
	PLL0FEED_SEQUENCE;
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
	PLL1FEED_SEQUENCE;
    4598:	601c      	str	r4, [r3, #0]
    459a:	6018      	str	r0, [r3, #0]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    459c:	6811      	ldr	r1, [r2, #0]
    459e:	f041 0101 	orr.w	r1, r1, #1
    45a2:	6011      	str	r1, [r2, #0]
	PLL1FEED_SEQUENCE;
    45a4:	601c      	str	r4, [r3, #0]
    45a6:	6018      	str	r0, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    45a8:	4915      	ldr	r1, [pc, #84]	; (4600 <clock_start+0x134>)
    45aa:	6808      	ldr	r0, [r1, #0]
    45ac:	05c4      	lsls	r4, r0, #23
    45ae:	d5fb      	bpl.n	45a8 <clock_start+0xdc>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    45b0:	6808      	ldr	r0, [r1, #0]
    45b2:	0540      	lsls	r0, r0, #21
    45b4:	d5fc      	bpl.n	45b0 <clock_start+0xe4>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    45b6:	6810      	ldr	r0, [r2, #0]
    45b8:	f040 0002 	orr.w	r0, r0, #2
    45bc:	6010      	str	r0, [r2, #0]
	PLL1FEED_SEQUENCE;
    45be:	22aa      	movs	r2, #170	; 0xaa
    45c0:	601a      	str	r2, [r3, #0]
    45c2:	2255      	movs	r2, #85	; 0x55
    45c4:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    45c6:	680b      	ldr	r3, [r1, #0]
    45c8:	059b      	lsls	r3, r3, #22
    45ca:	d5fc      	bpl.n	45c6 <clock_start+0xfa>
}
    45cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45d0:	400fc000 	.word	0x400fc000
    45d4:	400fc10c 	.word	0x400fc10c
    45d8:	400fc080 	.word	0x400fc080
    45dc:	400fc08c 	.word	0x400fc08c
    45e0:	400fc088 	.word	0x400fc088
    45e4:	00081570 	.word	0x00081570
    45e8:	400fc1a0 	.word	0x400fc1a0
    45ec:	400fc1a8 	.word	0x400fc1a8
    45f0:	00010018 	.word	0x00010018
    45f4:	400fc084 	.word	0x400fc084
    45f8:	400fc0a4 	.word	0x400fc0a4
    45fc:	400fc0a0 	.word	0x400fc0a0
    4600:	400fc0a8 	.word	0x400fc0a8
    4604:	400fc104 	.word	0x400fc104
    4608:	00000043 	.word	0x00000043

0000460c <_global_impure_ptr>:
    460c:	10000020                                 ...

00004610 <_init>:
    4610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4612:	bf00      	nop
    4614:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4616:	bc08      	pop	{r3}
    4618:	469e      	mov	lr, r3
    461a:	4770      	bx	lr

0000461c <__init_array_start>:
    461c:	00004179 	.word	0x00004179

00004620 <__frame_dummy_init_array_entry>:
    4620:	000040f1                                .@..

00004624 <_fini>:
    4624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4626:	bf00      	nop
    4628:	bcf8      	pop	{r3, r4, r5, r6, r7}
    462a:	bc08      	pop	{r3}
    462c:	469e      	mov	lr, r3
    462e:	4770      	bx	lr

00004630 <__fini_array_start>:
    4630:	000040cd 	.word	0x000040cd

00004634 <__fini_array_end>:
    4634:	00000000 	.word	0x00000000


bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005c00  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         000009dd  10000020  00009c00  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002954  10000a00  0000a5dd  00010a00  2**3
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000109fd  2**0
                  CONTENTS, READONLY
  5 .comment      00000070  00000000  00000000  00010a26  2**0
                  CONTENTS, READONLY
  6 .debug_frame  00001630  00000000  00000000  00010a98  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a4e2  00000000  00000000  000120c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000257c  00000000  00000000  0001c5aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000055c4  00000000  00000000  0001eb26  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000728  00000000  00000000  000240ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000878  00000000  00000000  00024812  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000311a  00000000  00000000  0002508a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002690  00000000  00000000  000281a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 11 83 00 00 65 83 00 00 65 83 00 00     .?......e...e...
    4010:	65 83 00 00 65 83 00 00 65 83 00 00 00 00 00 00     e...e...e.......
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 65 83 00 00     ............e...
    4030:	65 83 00 00 00 00 00 00 65 83 00 00 65 83 00 00     e.......e...e...
    4040:	65 83 00 00 95 50 00 00 65 83 00 00 65 83 00 00     e....P..e...e...
    4050:	65 83 00 00 65 83 00 00 65 83 00 00 65 83 00 00     e...e...e...e...
    4060:	65 83 00 00 65 83 00 00 65 83 00 00 65 83 00 00     e...e...e...e...
    4070:	65 83 00 00 65 83 00 00 65 83 00 00 65 83 00 00     e...e...e...e...
    4080:	65 83 00 00 65 83 00 00 65 83 00 00 65 83 00 00     e...e...e...e...
    4090:	65 83 00 00 d1 51 00 00 65 83 00 00 65 83 00 00     e....Q..e...e...
    40a0:	0d 83 00 00 65 83 00 00 05 52 00 00 65 83 00 00     ....e....R..e...
    40b0:	65 83 00 00 65 83 00 00 65 83 00 00 65 83 00 00     e...e...e...e...
    40c0:	65 83 00 00 65 83 00 00 65 83 00 00                 e...e...e...

000040cc <__do_global_dtors_aux>:
    40cc:	b510      	push	{r4, lr}
    40ce:	4c05      	ldr	r4, [pc, #20]	; (40e4 <__do_global_dtors_aux+0x18>)
    40d0:	7823      	ldrb	r3, [r4, #0]
    40d2:	b933      	cbnz	r3, 40e2 <__do_global_dtors_aux+0x16>
    40d4:	4b04      	ldr	r3, [pc, #16]	; (40e8 <__do_global_dtors_aux+0x1c>)
    40d6:	b113      	cbz	r3, 40de <__do_global_dtors_aux+0x12>
    40d8:	4804      	ldr	r0, [pc, #16]	; (40ec <__do_global_dtors_aux+0x20>)
    40da:	f3af 8000 	nop.w
    40de:	2301      	movs	r3, #1
    40e0:	7023      	strb	r3, [r4, #0]
    40e2:	bd10      	pop	{r4, pc}
    40e4:	10000a00 	.word	0x10000a00
    40e8:	00000000 	.word	0x00000000
    40ec:	00009bdc 	.word	0x00009bdc

000040f0 <frame_dummy>:
    40f0:	4b08      	ldr	r3, [pc, #32]	; (4114 <frame_dummy+0x24>)
    40f2:	b510      	push	{r4, lr}
    40f4:	b11b      	cbz	r3, 40fe <frame_dummy+0xe>
    40f6:	4808      	ldr	r0, [pc, #32]	; (4118 <frame_dummy+0x28>)
    40f8:	4908      	ldr	r1, [pc, #32]	; (411c <frame_dummy+0x2c>)
    40fa:	f3af 8000 	nop.w
    40fe:	4808      	ldr	r0, [pc, #32]	; (4120 <frame_dummy+0x30>)
    4100:	6803      	ldr	r3, [r0, #0]
    4102:	b903      	cbnz	r3, 4106 <frame_dummy+0x16>
    4104:	bd10      	pop	{r4, pc}
    4106:	4b07      	ldr	r3, [pc, #28]	; (4124 <frame_dummy+0x34>)
    4108:	2b00      	cmp	r3, #0
    410a:	d0fb      	beq.n	4104 <frame_dummy+0x14>
    410c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4110:	4718      	bx	r3
    4112:	bf00      	nop
    4114:	00000000 	.word	0x00000000
    4118:	00009bdc 	.word	0x00009bdc
    411c:	10000a04 	.word	0x10000a04
    4120:	10000a00 	.word	0x10000a00
    4124:	00000000 	.word	0x00000000

00004128 <__libc_init_array>:
    4128:	b570      	push	{r4, r5, r6, lr}
    412a:	4e0f      	ldr	r6, [pc, #60]	; (4168 <__libc_init_array+0x40>)
    412c:	4d0f      	ldr	r5, [pc, #60]	; (416c <__libc_init_array+0x44>)
    412e:	1b76      	subs	r6, r6, r5
    4130:	10b6      	asrs	r6, r6, #2
    4132:	bf18      	it	ne
    4134:	2400      	movne	r4, #0
    4136:	d005      	beq.n	4144 <__libc_init_array+0x1c>
    4138:	3401      	adds	r4, #1
    413a:	f855 3b04 	ldr.w	r3, [r5], #4
    413e:	4798      	blx	r3
    4140:	42a6      	cmp	r6, r4
    4142:	d1f9      	bne.n	4138 <__libc_init_array+0x10>
    4144:	4e0a      	ldr	r6, [pc, #40]	; (4170 <__libc_init_array+0x48>)
    4146:	4d0b      	ldr	r5, [pc, #44]	; (4174 <__libc_init_array+0x4c>)
    4148:	f005 fd48 	bl	9bdc <_init>
    414c:	1b76      	subs	r6, r6, r5
    414e:	10b6      	asrs	r6, r6, #2
    4150:	bf18      	it	ne
    4152:	2400      	movne	r4, #0
    4154:	d006      	beq.n	4164 <__libc_init_array+0x3c>
    4156:	3401      	adds	r4, #1
    4158:	f855 3b04 	ldr.w	r3, [r5], #4
    415c:	4798      	blx	r3
    415e:	42a6      	cmp	r6, r4
    4160:	d1f9      	bne.n	4156 <__libc_init_array+0x2e>
    4162:	bd70      	pop	{r4, r5, r6, pc}
    4164:	bd70      	pop	{r4, r5, r6, pc}
    4166:	bf00      	nop
    4168:	00009be8 	.word	0x00009be8
    416c:	00009be8 	.word	0x00009be8
    4170:	00009bf0 	.word	0x00009bf0
    4174:	00009be8 	.word	0x00009be8

00004178 <memset>:
    4178:	b470      	push	{r4, r5, r6}
    417a:	0784      	lsls	r4, r0, #30
    417c:	d046      	beq.n	420c <memset+0x94>
    417e:	1e54      	subs	r4, r2, #1
    4180:	2a00      	cmp	r2, #0
    4182:	d041      	beq.n	4208 <memset+0x90>
    4184:	b2cd      	uxtb	r5, r1
    4186:	4603      	mov	r3, r0
    4188:	e002      	b.n	4190 <memset+0x18>
    418a:	1e62      	subs	r2, r4, #1
    418c:	b3e4      	cbz	r4, 4208 <memset+0x90>
    418e:	4614      	mov	r4, r2
    4190:	f803 5b01 	strb.w	r5, [r3], #1
    4194:	079a      	lsls	r2, r3, #30
    4196:	d1f8      	bne.n	418a <memset+0x12>
    4198:	2c03      	cmp	r4, #3
    419a:	d92e      	bls.n	41fa <memset+0x82>
    419c:	b2cd      	uxtb	r5, r1
    419e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    41a2:	2c0f      	cmp	r4, #15
    41a4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    41a8:	d919      	bls.n	41de <memset+0x66>
    41aa:	4626      	mov	r6, r4
    41ac:	f103 0210 	add.w	r2, r3, #16
    41b0:	3e10      	subs	r6, #16
    41b2:	2e0f      	cmp	r6, #15
    41b4:	f842 5c10 	str.w	r5, [r2, #-16]
    41b8:	f842 5c0c 	str.w	r5, [r2, #-12]
    41bc:	f842 5c08 	str.w	r5, [r2, #-8]
    41c0:	f842 5c04 	str.w	r5, [r2, #-4]
    41c4:	f102 0210 	add.w	r2, r2, #16
    41c8:	d8f2      	bhi.n	41b0 <memset+0x38>
    41ca:	f1a4 0210 	sub.w	r2, r4, #16
    41ce:	f022 020f 	bic.w	r2, r2, #15
    41d2:	f004 040f 	and.w	r4, r4, #15
    41d6:	3210      	adds	r2, #16
    41d8:	2c03      	cmp	r4, #3
    41da:	4413      	add	r3, r2
    41dc:	d90d      	bls.n	41fa <memset+0x82>
    41de:	461e      	mov	r6, r3
    41e0:	4622      	mov	r2, r4
    41e2:	3a04      	subs	r2, #4
    41e4:	2a03      	cmp	r2, #3
    41e6:	f846 5b04 	str.w	r5, [r6], #4
    41ea:	d8fa      	bhi.n	41e2 <memset+0x6a>
    41ec:	1f22      	subs	r2, r4, #4
    41ee:	f022 0203 	bic.w	r2, r2, #3
    41f2:	3204      	adds	r2, #4
    41f4:	4413      	add	r3, r2
    41f6:	f004 0403 	and.w	r4, r4, #3
    41fa:	b12c      	cbz	r4, 4208 <memset+0x90>
    41fc:	b2c9      	uxtb	r1, r1
    41fe:	441c      	add	r4, r3
    4200:	f803 1b01 	strb.w	r1, [r3], #1
    4204:	42a3      	cmp	r3, r4
    4206:	d1fb      	bne.n	4200 <memset+0x88>
    4208:	bc70      	pop	{r4, r5, r6}
    420a:	4770      	bx	lr
    420c:	4614      	mov	r4, r2
    420e:	4603      	mov	r3, r0
    4210:	e7c2      	b.n	4198 <memset+0x20>
    4212:	bf00      	nop

00004214 <register_fini>:
    4214:	4b02      	ldr	r3, [pc, #8]	; (4220 <register_fini+0xc>)
    4216:	b113      	cbz	r3, 421e <register_fini+0xa>
    4218:	4802      	ldr	r0, [pc, #8]	; (4224 <register_fini+0x10>)
    421a:	f000 b805 	b.w	4228 <atexit>
    421e:	4770      	bx	lr
    4220:	00000000 	.word	0x00000000
    4224:	00004235 	.word	0x00004235

00004228 <atexit>:
    4228:	4601      	mov	r1, r0
    422a:	2000      	movs	r0, #0
    422c:	4602      	mov	r2, r0
    422e:	4603      	mov	r3, r0
    4230:	f000 b816 	b.w	4260 <__register_exitproc>

00004234 <__libc_fini_array>:
    4234:	b538      	push	{r3, r4, r5, lr}
    4236:	4b08      	ldr	r3, [pc, #32]	; (4258 <__libc_fini_array+0x24>)
    4238:	4d08      	ldr	r5, [pc, #32]	; (425c <__libc_fini_array+0x28>)
    423a:	1aed      	subs	r5, r5, r3
    423c:	10ac      	asrs	r4, r5, #2
    423e:	bf18      	it	ne
    4240:	18ed      	addne	r5, r5, r3
    4242:	d005      	beq.n	4250 <__libc_fini_array+0x1c>
    4244:	3c01      	subs	r4, #1
    4246:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    424a:	4798      	blx	r3
    424c:	2c00      	cmp	r4, #0
    424e:	d1f9      	bne.n	4244 <__libc_fini_array+0x10>
    4250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4254:	f005 bccc 	b.w	9bf0 <_fini>
    4258:	00009bfc 	.word	0x00009bfc
    425c:	00009c00 	.word	0x00009c00

00004260 <__register_exitproc>:
    4260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4264:	4c25      	ldr	r4, [pc, #148]	; (42fc <__register_exitproc+0x9c>)
    4266:	4606      	mov	r6, r0
    4268:	6825      	ldr	r5, [r4, #0]
    426a:	4688      	mov	r8, r1
    426c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    4270:	4692      	mov	sl, r2
    4272:	4699      	mov	r9, r3
    4274:	b3c4      	cbz	r4, 42e8 <__register_exitproc+0x88>
    4276:	6860      	ldr	r0, [r4, #4]
    4278:	281f      	cmp	r0, #31
    427a:	dc17      	bgt.n	42ac <__register_exitproc+0x4c>
    427c:	1c41      	adds	r1, r0, #1
    427e:	b176      	cbz	r6, 429e <__register_exitproc+0x3e>
    4280:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    4284:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
    4288:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
    428c:	2201      	movs	r2, #1
    428e:	4082      	lsls	r2, r0
    4290:	4315      	orrs	r5, r2
    4292:	2e02      	cmp	r6, #2
    4294:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
    4298:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
    429c:	d01e      	beq.n	42dc <__register_exitproc+0x7c>
    429e:	1c83      	adds	r3, r0, #2
    42a0:	6061      	str	r1, [r4, #4]
    42a2:	2000      	movs	r0, #0
    42a4:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
    42a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42ac:	4b14      	ldr	r3, [pc, #80]	; (4300 <__register_exitproc+0xa0>)
    42ae:	b303      	cbz	r3, 42f2 <__register_exitproc+0x92>
    42b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42b4:	f3af 8000 	nop.w
    42b8:	4604      	mov	r4, r0
    42ba:	b1d0      	cbz	r0, 42f2 <__register_exitproc+0x92>
    42bc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    42c0:	2700      	movs	r7, #0
    42c2:	e884 0088 	stmia.w	r4, {r3, r7}
    42c6:	4638      	mov	r0, r7
    42c8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42cc:	2101      	movs	r1, #1
    42ce:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    42d2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    42d6:	2e00      	cmp	r6, #0
    42d8:	d0e1      	beq.n	429e <__register_exitproc+0x3e>
    42da:	e7d1      	b.n	4280 <__register_exitproc+0x20>
    42dc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    42e0:	431a      	orrs	r2, r3
    42e2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    42e6:	e7da      	b.n	429e <__register_exitproc+0x3e>
    42e8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    42ec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42f0:	e7c1      	b.n	4276 <__register_exitproc+0x16>
    42f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42fa:	bf00      	nop
    42fc:	0000924c 	.word	0x0000924c
    4300:	00000000 	.word	0x00000000

00004304 <reverse8>:
	dio_ssp_stop();
	cs_trigger_disable();
}

static uint8_t reverse8(uint8_t data)
{
    4304:	b510      	push	{r4, lr}
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    4306:	2300      	movs	r3, #0
	cs_trigger_disable();
}

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;
    4308:	461a      	mov	r2, r3

	for(size_t i=0; i<8; i++)
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    430a:	fa40 f103 	asr.w	r1, r0, r3
    430e:	f1c3 0407 	rsb	r4, r3, #7
    4312:	f001 0101 	and.w	r1, r1, #1
    4316:	40a1      	lsls	r1, r4

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    4318:	3301      	adds	r3, #1
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    431a:	430a      	orrs	r2, r1

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    431c:	2b08      	cmp	r3, #8
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    431e:	b2d2      	uxtb	r2, r2

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    4320:	d1f3      	bne.n	430a <reverse8+0x6>
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
	}

	return reversed;
}
    4322:	4610      	mov	r0, r2
    4324:	bd10      	pop	{r4, pc}
    4326:	0000      	movs	r0, r0

00004328 <cc2400_rx>:
	target.syncword = 0;
}

/* start un-buffered rx */
static void cc2400_rx()
{
    4328:	b538      	push	{r3, r4, r5, lr}
	u16 mdmctrl = 0;

	if((modulation == MOD_BT_BASIC_RATE) || (modulation == MOD_BT_LOW_ENERGY)) {
    432a:	4b25      	ldr	r3, [pc, #148]	; (43c0 <cc2400_rx+0x98>)
    432c:	4c25      	ldr	r4, [pc, #148]	; (43c4 <cc2400_rx+0x9c>)
    432e:	781a      	ldrb	r2, [r3, #0]
    4330:	b112      	cbz	r2, 4338 <cc2400_rx+0x10>
    4332:	781a      	ldrb	r2, [r3, #0]
    4334:	2a01      	cmp	r2, #1
    4336:	d127      	bne.n	4388 <cc2400_rx+0x60>
		if (modulation == MOD_BT_BASIC_RATE) {
    4338:	781b      	ldrb	r3, [r3, #0]
    433a:	b133      	cbz	r3, 434a <cc2400_rx+0x22>
			mdmctrl = 0x0029; // 160 kHz frequency deviation
		} else if (modulation == MOD_BT_LOW_ENERGY) {
    433c:	4b20      	ldr	r3, [pc, #128]	; (43c0 <cc2400_rx+0x98>)
    433e:	781b      	ldrb	r3, [r3, #0]
			mdmctrl = 0x0040; // 250 kHz frequency deviation
    4340:	2b01      	cmp	r3, #1
    4342:	bf14      	ite	ne
    4344:	2500      	movne	r5, #0
    4346:	2540      	moveq	r5, #64	; 0x40
    4348:	e000      	b.n	434c <cc2400_rx+0x24>
{
	u16 mdmctrl = 0;

	if((modulation == MOD_BT_BASIC_RATE) || (modulation == MOD_BT_LOW_ENERGY)) {
		if (modulation == MOD_BT_BASIC_RATE) {
			mdmctrl = 0x0029; // 160 kHz frequency deviation
    434a:	2529      	movs	r5, #41	; 0x29
		} else if (modulation == MOD_BT_LOW_ENERGY) {
			mdmctrl = 0x0040; // 250 kHz frequency deviation
		}
		cc2400_set(MANAND,  0x7fff);
    434c:	200d      	movs	r0, #13
    434e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    4352:	f004 f908 	bl	8566 <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
    4356:	2012      	movs	r0, #18
    4358:	f642 3122 	movw	r1, #11042	; 0x2b22
    435c:	f004 f903 	bl	8566 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b); // without PRNG
    4360:	2014      	movs	r0, #20
    4362:	f241 314b 	movw	r1, #4939	; 0x134b
    4366:	f004 f8fe 	bl	8566 <cc2400_set>
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    436a:	2020      	movs	r0, #32
    436c:	f240 1101 	movw	r1, #257	; 0x101
    4370:	f004 f8f9 	bl	8566 <cc2400_set>
		//      |  | |   |  +--------> CRC off
		//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
		//      |  | +---------------> 2 preamble bytes of 01010101
		//      |  +-----------------> not packet mode
			//      +--------------------> un-buffered mode
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    4374:	8821      	ldrh	r1, [r4, #0]
    4376:	2002      	movs	r0, #2
    4378:	3901      	subs	r1, #1
    437a:	b289      	uxth	r1, r1
    437c:	f004 f8f3 	bl	8566 <cc2400_set>
		cc2400_set(MDMCTRL, mdmctrl);
    4380:	2003      	movs	r0, #3
    4382:	4629      	mov	r1, r5
    4384:	f004 f8ef 	bl	8566 <cc2400_set>
	}

	// Set up CS register
	cs_threshold_calc_and_set(channel);
    4388:	8820      	ldrh	r0, [r4, #0]
    438a:	b280      	uxth	r0, r0
    438c:	f003 f954 	bl	7638 <cs_threshold_calc_and_set>

	clkn_start();
    4390:	f003 f9ee 	bl	7770 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    4394:	f004 f988 	bl	86a8 <cc2400_status>
    4398:	0642      	lsls	r2, r0, #25
    439a:	d5fb      	bpl.n	4394 <cc2400_rx+0x6c>
	cc2400_strobe(SFSON);
    439c:	2061      	movs	r0, #97	; 0x61
    439e:	f004 f98a 	bl	86b6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    43a2:	f004 f981 	bl	86a8 <cc2400_status>
    43a6:	0743      	lsls	r3, r0, #29
    43a8:	d5fb      	bpl.n	43a2 <cc2400_rx+0x7a>
	cc2400_strobe(SRX);
    43aa:	2062      	movs	r0, #98	; 0x62
    43ac:	f004 f983 	bl	86b6 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    43b0:	4b05      	ldr	r3, [pc, #20]	; (43c8 <cc2400_rx+0xa0>)
    43b2:	2280      	movs	r2, #128	; 0x80
    43b4:	601a      	str	r2, [r3, #0]
	HGM_SET;
    43b6:	f44f 7280 	mov.w	r2, #256	; 0x100
    43ba:	601a      	str	r2, [r3, #0]
    43bc:	bd38      	pop	{r3, r4, r5, pc}
    43be:	bf00      	nop
    43c0:	10000a1c 	.word	0x10000a1c
    43c4:	10000448 	.word	0x10000448
    43c8:	2009c058 	.word	0x2009c058

000043cc <cc2400_rx_sync>:
#endif
}

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    43cc:	b570      	push	{r4, r5, r6, lr}
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    43ce:	4b27      	ldr	r3, [pc, #156]	; (446c <cc2400_rx_sync+0xa0>)
#endif
}

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    43d0:	4604      	mov	r4, r0
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    43d2:	781a      	ldrb	r2, [r3, #0]
    43d4:	b132      	cbz	r2, 43e4 <cc2400_rx_sync+0x18>
		//   |  |  | +---------------> 0 preamble bytes of 01010101
		//   |  |  +-----------------> packet mode
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else if (modulation == MOD_BT_LOW_ENERGY) {
    43d6:	781b      	ldrb	r3, [r3, #0]
    43d8:	2b01      	cmp	r3, #1
    43da:	d146      	bne.n	446a <cc2400_rx_sync+0x9e>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    43dc:	2540      	movs	r5, #64	; 0x40
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    43de:	f240 5661 	movw	r6, #1377	; 0x561
    43e2:	e002      	b.n	43ea <cc2400_rx_sync+0x1e>
{
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
		mdmctrl = 0x0029; // 160 kHz frequency deviation
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    43e4:	f240 4661 	movw	r6, #1121	; 0x461
static void cc2400_rx_sync(u32 sync)
{
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    43e8:	2529      	movs	r5, #41	; 0x29
	} else {
		/* oops */
		return;
	}

	cc2400_set(MANAND,  0x7fff);
    43ea:	200d      	movs	r0, #13
    43ec:	f647 71ff 	movw	r1, #32767	; 0x7fff
    43f0:	f004 f8b9 	bl	8566 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    43f4:	2012      	movs	r0, #18
    43f6:	f642 3122 	movw	r1, #11042	; 0x2b22
    43fa:	f004 f8b4 	bl	8566 <cc2400_set>

	cc2400_set(MDMTST0, 0x124b);
    43fe:	2014      	movs	r0, #20
    4400:	f241 214b 	movw	r1, #4683	; 0x124b
    4404:	f004 f8af 	bl	8566 <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    4408:	2020      	movs	r0, #32
    440a:	4631      	mov	r1, r6
    440c:	f004 f8ab 	bl	8566 <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    4410:	b2a1      	uxth	r1, r4
    4412:	202c      	movs	r0, #44	; 0x2c
    4414:	f004 f8a7 	bl	8566 <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    4418:	0c21      	lsrs	r1, r4, #16

	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    441a:	4c15      	ldr	r4, [pc, #84]	; (4470 <cc2400_rx_sync+0xa4>)
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);

	cc2400_set(SYNCL,   sync & 0xffff);
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    441c:	202d      	movs	r0, #45	; 0x2d
    441e:	f004 f8a2 	bl	8566 <cc2400_set>

	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    4422:	8821      	ldrh	r1, [r4, #0]
    4424:	2002      	movs	r0, #2
    4426:	3901      	subs	r1, #1
    4428:	b289      	uxth	r1, r1
    442a:	f004 f89c 	bl	8566 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    442e:	2003      	movs	r0, #3
    4430:	4629      	mov	r1, r5
    4432:	f004 f898 	bl	8566 <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set(channel);
    4436:	8820      	ldrh	r0, [r4, #0]
    4438:	b280      	uxth	r0, r0
    443a:	f003 f8fd 	bl	7638 <cs_threshold_calc_and_set>

	clkn_start();
    443e:	f003 f997 	bl	7770 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    4442:	f004 f931 	bl	86a8 <cc2400_status>
    4446:	0642      	lsls	r2, r0, #25
    4448:	d5fb      	bpl.n	4442 <cc2400_rx_sync+0x76>
	cc2400_strobe(SFSON);
    444a:	2061      	movs	r0, #97	; 0x61
    444c:	f004 f933 	bl	86b6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    4450:	f004 f92a 	bl	86a8 <cc2400_status>
    4454:	0743      	lsls	r3, r0, #29
    4456:	d5fb      	bpl.n	4450 <cc2400_rx_sync+0x84>
	cc2400_strobe(SRX);
    4458:	2062      	movs	r0, #98	; 0x62
    445a:	f004 f92c 	bl	86b6 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    445e:	4b05      	ldr	r3, [pc, #20]	; (4474 <cc2400_rx_sync+0xa8>)
    4460:	2280      	movs	r2, #128	; 0x80
    4462:	601a      	str	r2, [r3, #0]
	HGM_SET;
    4464:	f44f 7280 	mov.w	r2, #256	; 0x100
    4468:	601a      	str	r2, [r3, #0]
    446a:	bd70      	pop	{r4, r5, r6, pc}
    446c:	10000a1c 	.word	0x10000a1c
    4470:	10000448 	.word	0x10000448
    4474:	2009c058 	.word	0x2009c058

00004478 <enqueue>:

/* Unpacked symbol buffers (two rxbufs) */
char unpacked[DMA_SIZE*8*2];

static int enqueue(uint8_t type, uint8_t* buf)
{
    4478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    447a:	4607      	mov	r7, r0
    447c:	460e      	mov	r6, r1
	usb_pkt_rx* f = usb_enqueue();
    447e:	f002 fffb 	bl	7478 <usb_enqueue>
    4482:	4d1d      	ldr	r5, [pc, #116]	; (44f8 <enqueue+0x80>)

	/* fail if queue is full */
	if (f == NULL) {
    4484:	4604      	mov	r4, r0
    4486:	b920      	cbnz	r0, 4492 <enqueue+0x1a>
		status |= FIFO_OVERFLOW;
    4488:	786b      	ldrb	r3, [r5, #1]
    448a:	f043 0304 	orr.w	r3, r3, #4
    448e:	706b      	strb	r3, [r5, #1]
		return 0;
    4490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	f->pkt_type = type;
	if(type == SPECAN) {
    4492:	2f04      	cmp	r7, #4
	if (f == NULL) {
		status |= FIFO_OVERFLOW;
		return 0;
	}

	f->pkt_type = type;
    4494:	7007      	strb	r7, [r0, #0]
	if(type == SPECAN) {
    4496:	d10e      	bne.n	44b6 <enqueue+0x3e>
		f->clkn_high = (clkn >> 20) & 0xff;
		f->clk100ns = CLK100NS;
    4498:	f640 4135 	movw	r1, #3125	; 0xc35
		return 0;
	}

	f->pkt_type = type;
	if(type == SPECAN) {
		f->clkn_high = (clkn >> 20) & 0xff;
    449c:	4a17      	ldr	r2, [pc, #92]	; (44fc <enqueue+0x84>)
    449e:	6813      	ldr	r3, [r2, #0]
    44a0:	0d1b      	lsrs	r3, r3, #20
    44a2:	70c3      	strb	r3, [r0, #3]
		f->clk100ns = CLK100NS;
    44a4:	4b16      	ldr	r3, [pc, #88]	; (4500 <enqueue+0x88>)
    44a6:	6812      	ldr	r2, [r2, #0]
    44a8:	681b      	ldr	r3, [r3, #0]
    44aa:	f3c2 0213 	ubfx	r2, r2, #0, #20
    44ae:	fb01 3302 	mla	r3, r1, r2, r3
    44b2:	6043      	str	r3, [r0, #4]
    44b4:	e014      	b.n	44e0 <enqueue+0x68>
	} else {
		f->clkn_high = idle_buf_clkn_high;
    44b6:	78ab      	ldrb	r3, [r5, #2]
    44b8:	70c3      	strb	r3, [r0, #3]
		f->clk100ns = idle_buf_clk100ns;
    44ba:	686b      	ldr	r3, [r5, #4]
    44bc:	6043      	str	r3, [r0, #4]
		f->channel = (uint8_t)((idle_buf_channel - 2402) & 0xff);
    44be:	892b      	ldrh	r3, [r5, #8]
    44c0:	3b62      	subs	r3, #98	; 0x62
    44c2:	7083      	strb	r3, [r0, #2]
		f->rssi_min = rssi_min;
    44c4:	4b0f      	ldr	r3, [pc, #60]	; (4504 <enqueue+0x8c>)
    44c6:	781b      	ldrb	r3, [r3, #0]
    44c8:	7243      	strb	r3, [r0, #9]
		f->rssi_max = rssi_max;
    44ca:	4b0f      	ldr	r3, [pc, #60]	; (4508 <enqueue+0x90>)
    44cc:	781b      	ldrb	r3, [r3, #0]
    44ce:	7203      	strb	r3, [r0, #8]
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    44d0:	8928      	ldrh	r0, [r5, #8]
    44d2:	b280      	uxth	r0, r0
    44d4:	f003 f89c 	bl	7610 <rssi_get_avg>
		f->rssi_count = rssi_count;
    44d8:	4b0c      	ldr	r3, [pc, #48]	; (450c <enqueue+0x94>)
		f->clkn_high = idle_buf_clkn_high;
		f->clk100ns = idle_buf_clk100ns;
		f->channel = (uint8_t)((idle_buf_channel - 2402) & 0xff);
		f->rssi_min = rssi_min;
		f->rssi_max = rssi_max;
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    44da:	72a0      	strb	r0, [r4, #10]
		f->rssi_count = rssi_count;
    44dc:	781b      	ldrb	r3, [r3, #0]
    44de:	72e3      	strb	r3, [r4, #11]
	}

	memcpy(f->data, buf, DMA_SIZE);
    44e0:	f104 000e 	add.w	r0, r4, #14
    44e4:	4631      	mov	r1, r6
    44e6:	2232      	movs	r2, #50	; 0x32
    44e8:	f004 fe0a 	bl	9100 <memcpy>

	f->status = status;
    44ec:	786b      	ldrb	r3, [r5, #1]
	status = 0;

	return 1;
    44ee:	2001      	movs	r0, #1
		f->rssi_count = rssi_count;
	}

	memcpy(f->data, buf, DMA_SIZE);

	f->status = status;
    44f0:	7063      	strb	r3, [r4, #1]
	status = 0;
    44f2:	2300      	movs	r3, #0
    44f4:	706b      	strb	r3, [r5, #1]

	return 1;
}
    44f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44f8:	10000a1c 	.word	0x10000a1c
    44fc:	10000bc4 	.word	0x10000bc4
    4500:	40004008 	.word	0x40004008
    4504:	10000baa 	.word	0x10000baa
    4508:	10000ba8 	.word	0x10000ba8
    450c:	10001046 	.word	0x10001046

00004510 <le_set_access_address>:
	// reset GIO
	cc2400_set(IOCFG, gio_save);
}

/* set LE access address */
static void le_set_access_address(u32 aa) {
    4510:	b510      	push	{r4, lr}
	u32 aa_rev;

	le.access_address = aa;
    4512:	4c04      	ldr	r4, [pc, #16]	; (4524 <le_set_access_address+0x14>)
    4514:	6060      	str	r0, [r4, #4]
	aa_rev = rbit(aa);
    4516:	f003 ff33 	bl	8380 <rbit>
	le.syncl = aa_rev & 0xffff;
    451a:	8160      	strh	r0, [r4, #10]
	le.synch = aa_rev >> 16;
    451c:	0c00      	lsrs	r0, r0, #16
    451e:	8120      	strh	r0, [r4, #8]
    4520:	bd10      	pop	{r4, pc}
    4522:	bf00      	nop
    4524:	10000448 	.word	0x10000448

00004528 <cc2400_idle>:
		}
	}
}

static void cc2400_idle()
{
    4528:	b510      	push	{r4, lr}
	cc2400_strobe(SRFOFF);
    452a:	2064      	movs	r0, #100	; 0x64
    452c:	f004 f8c3 	bl	86b6 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    4530:	f004 f8ba 	bl	86a8 <cc2400_status>
    4534:	f000 0004 	and.w	r0, r0, #4
    4538:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    453c:	2800      	cmp	r0, #0
    453e:	d1f7      	bne.n	4530 <cc2400_idle+0x8>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    4540:	4b21      	ldr	r3, [pc, #132]	; (45c8 <cc2400_idle+0xa0>)
    4542:	2280      	movs	r2, #128	; 0x80
    4544:	601a      	str	r2, [r3, #0]
	HGM_CLR;
#endif

	RXLED_CLR;
    4546:	2110      	movs	r1, #16
	cc2400_strobe(SRFOFF);
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
	HGM_CLR;
    4548:	f44f 7280 	mov.w	r2, #256	; 0x100
    454c:	601a      	str	r2, [r3, #0]
#endif

	RXLED_CLR;
    454e:	f843 1c20 	str.w	r1, [r3, #-32]
	TXLED_CLR;
    4552:	f843 2c20 	str.w	r2, [r3, #-32]
	USRLED_CLR;
    4556:	2202      	movs	r2, #2
    4558:	f843 2c20 	str.w	r2, [r3, #-32]

	clkn_stop();
    455c:	f003 f8e0 	bl	7720 <clkn_stop>
	dio_ssp_stop();
    4560:	f003 fa0a 	bl	7978 <dio_ssp_stop>
	cs_reset();
    4564:	f003 f8ca 	bl	76fc <cs_reset>
	rssi_reset();
    4568:	f002 ffee 	bl	7548 <rssi_reset>

	/* hopping stuff */
	hop_mode = HOP_NONE;
	do_hop = 0;
	channel = 2441;
    456c:	f640 1189 	movw	r1, #2441	; 0x989
	dio_ssp_stop();
	cs_reset();
	rssi_reset();

	/* hopping stuff */
	hop_mode = HOP_NONE;
    4570:	4b16      	ldr	r3, [pc, #88]	; (45cc <cc2400_idle+0xa4>)
	do_hop = 0;
	channel = 2441;
    4572:	4a17      	ldr	r2, [pc, #92]	; (45d0 <cc2400_idle+0xa8>)
	dio_ssp_stop();
	cs_reset();
	rssi_reset();

	/* hopping stuff */
	hop_mode = HOP_NONE;
    4574:	729c      	strb	r4, [r3, #10]
	do_hop = 0;
    4576:	72dc      	strb	r4, [r3, #11]
	channel = 2441;
    4578:	8011      	strh	r1, [r2, #0]
	hop_direct_channel = 0;
	hop_timeout = 158;
    457a:	219e      	movs	r1, #158	; 0x9e

	/* hopping stuff */
	hop_mode = HOP_NONE;
	do_hop = 0;
	channel = 2441;
	hop_direct_channel = 0;
    457c:	819c      	strh	r4, [r3, #12]
	hop_timeout = 158;
    457e:	f8a2 1048 	strh.w	r1, [r2, #72]	; 0x48
	requested_channel = 0;
	le_adv_channel = 2402;
    4582:	f640 1162 	movw	r1, #2402	; 0x962
	hop_mode = HOP_NONE;
	do_hop = 0;
	channel = 2441;
	hop_direct_channel = 0;
	hop_timeout = 158;
	requested_channel = 0;
    4586:	81dc      	strh	r4, [r3, #14]
	le_adv_channel = 2402;
    4588:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a


	/* bulk USB stuff */
	idle_buf_clkn_high = 0;
    458c:	709c      	strb	r4, [r3, #2]
	idle_buf_clk100ns = 0;
    458e:	605c      	str	r4, [r3, #4]
	idle_buf_channel = 0;
    4590:	811c      	strh	r4, [r3, #8]
	dma_discard = 0;
    4592:	741c      	strb	r4, [r3, #16]
	status = 0;
    4594:	705c      	strb	r4, [r3, #1]

	/* operation mode */
	mode = MODE_IDLE;
    4596:	745c      	strb	r4, [r3, #17]
	requested_mode = MODE_IDLE;
    4598:	749c      	strb	r4, [r3, #18]
	jam_mode = JAM_NONE;
    459a:	74dc      	strb	r4, [r3, #19]
	ego_mode = EGO_FOLLOW;
    459c:	751c      	strb	r4, [r3, #20]

	modulation = MOD_BT_BASIC_RATE;
    459e:	701c      	strb	r4, [r3, #0]

	/* specan stuff */
	low_freq = 2400;
    45a0:	f44f 6316 	mov.w	r3, #2400	; 0x960
    45a4:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	high_freq = 2483;
    45a8:	f640 13b3 	movw	r3, #2483	; 0x9b3
    45ac:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
	rssi_threshold = -30;
    45b0:	23e2      	movs	r3, #226	; 0xe2
    45b2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50

	target.address = 0;
    45b6:	4b07      	ldr	r3, [pc, #28]	; (45d4 <cc2400_idle+0xac>)
    45b8:	2000      	movs	r0, #0
    45ba:	2100      	movs	r1, #0
    45bc:	e9c3 0100 	strd	r0, r1, [r3]
	target.syncword = 0;
    45c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    45c4:	bd10      	pop	{r4, pc}
    45c6:	bf00      	nop
    45c8:	2009c05c 	.word	0x2009c05c
    45cc:	10000a1c 	.word	0x10000a1c
    45d0:	10000448 	.word	0x10000448
    45d4:	100010c0 	.word	0x100010c0

000045d8 <cb_follow_le>:



/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    45d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    45dc:	4d39      	ldr	r5, [pc, #228]	; (46c4 <cb_follow_le+0xec>)
    45de:	4f3a      	ldr	r7, [pc, #232]	; (46c8 <cb_follow_le+0xf0>)
    45e0:	8828      	ldrh	r0, [r5, #0]
    45e2:	3862      	subs	r0, #98	; 0x62
    45e4:	b2c0      	uxtb	r0, r0
    45e6:	f002 fe3d 	bl	7264 <btle_channel_index>

	u32 access_address = 0;
    45ea:	2200      	movs	r2, #0
	for (i = 0; i < 31; ++i) {
    45ec:	4613      	mov	r3, r2

/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    45ee:	5c39      	ldrb	r1, [r7, r0]

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    45f0:	4e36      	ldr	r6, [pc, #216]	; (46cc <cb_follow_le+0xf4>)
    45f2:	5d98      	ldrb	r0, [r3, r6]
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    45f4:	3301      	adds	r3, #1
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    45f6:	07c0      	lsls	r0, r0, #31
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    45f8:	2b1f      	cmp	r3, #31
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    45fa:	ea40 0252 	orr.w	r2, r0, r2, lsr #1
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    45fe:	d1f7      	bne.n	45f0 <cb_follow_le+0x18>
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
    4600:	686c      	ldr	r4, [r5, #4]
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    4602:	5cf0      	ldrb	r0, [r6, r3]
    4604:	07c0      	lsls	r0, r0, #31
    4606:	ea40 0252 	orr.w	r2, r0, r2, lsr #1
		if (access_address == le.access_address) {
    460a:	42a2      	cmp	r2, r4
    460c:	d153      	bne.n	46b6 <cb_follow_le+0xde>
    460e:	2000      	movs	r0, #0
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    4610:	f04f 0800 	mov.w	r8, #0
    4614:	46c6      	mov	lr, r8
    4616:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
    461a:	eb0e 020c 	add.w	r2, lr, ip
    461e:	4432      	add	r2, r6
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
    4620:	2803      	cmp	r0, #3
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
    4622:	f812 2c1f 	ldrb.w	r2, [r2, #-31]
					if (j >= 4) { // unwhiten data bytes
    4626:	dd0a      	ble.n	463e <cb_follow_le+0x66>
						bit ^= whitening[idx];
    4628:	187c      	adds	r4, r7, r1
    462a:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
						idx = (idx + 1) % sizeof(whitening);
    462e:	3101      	adds	r1, #1
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
    4630:	4062      	eors	r2, r4
						idx = (idx + 1) % sizeof(whitening);
    4632:	247f      	movs	r4, #127	; 0x7f
    4634:	fbb1 f4f4 	udiv	r4, r1, r4
    4638:	ebc4 14c4 	rsb	r4, r4, r4, lsl #7
    463c:	1b09      	subs	r1, r1, r4
					}
					byte |= bit << k;
    463e:	fa02 f20e 	lsl.w	r2, r2, lr
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    4642:	f10e 0e01 	add.w	lr, lr, #1
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
    4646:	ea42 0208 	orr.w	r2, r2, r8
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    464a:	f1be 0f08 	cmp.w	lr, #8
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
    464e:	fa5f f882 	uxtb.w	r8, r2
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    4652:	d1e2      	bne.n	461a <cb_follow_le+0x42>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    4654:	4c1e      	ldr	r4, [pc, #120]	; (46d0 <cb_follow_le+0xf8>)
    4656:	6822      	ldr	r2, [r4, #0]
    4658:	f802 8000 	strb.w	r8, [r2, r0]

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
    465c:	3001      	adds	r0, #1
    465e:	282e      	cmp	r0, #46	; 0x2e
    4660:	d1d6      	bne.n	4610 <cb_follow_le+0x38>
				}
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
    4662:	696b      	ldr	r3, [r5, #20]
    4664:	b95b      	cbnz	r3, 467e <cb_follow_le+0xa6>
				if (calc_crc != wire_crc) // skip packets with a bad CRC
					break;
			}

			// send to PC
			enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    4666:	6821      	ldr	r1, [r4, #0]
    4668:	2001      	movs	r0, #1
    466a:	f7ff ff05 	bl	4478 <enqueue>
			RXLED_SET;
    466e:	4b19      	ldr	r3, [pc, #100]	; (46d4 <cb_follow_le+0xfc>)
    4670:	2210      	movs	r2, #16
    4672:	601a      	str	r2, [r3, #0]

			packet_cb((uint8_t*)idle_rxbuf);
    4674:	4b18      	ldr	r3, [pc, #96]	; (46d8 <cb_follow_le+0x100>)
    4676:	6820      	ldr	r0, [r4, #0]
    4678:	699b      	ldr	r3, [r3, #24]
    467a:	4798      	blx	r3

			break;
    467c:	e01f      	b.n	46be <cb_follow_le+0xe6>
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    467e:	6823      	ldr	r3, [r4, #0]
    4680:	795d      	ldrb	r5, [r3, #5]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    4682:	4b10      	ldr	r3, [pc, #64]	; (46c4 <cb_follow_le+0xec>)
    4684:	6821      	ldr	r1, [r4, #0]
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    4686:	f005 053f 	and.w	r5, r5, #63	; 0x3f
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    468a:	1caa      	adds	r2, r5, #2
    468c:	6918      	ldr	r0, [r3, #16]
    468e:	3104      	adds	r1, #4
    4690:	f002 fe68 	bl	7364 <btle_crcgen_lut>
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    4694:	6822      	ldr	r2, [r4, #0]
    4696:	f105 0308 	add.w	r3, r5, #8
    469a:	5cd3      	ldrb	r3, [r2, r3]
							 | (idle_rxbuf[4+len+1] << 8)
    469c:	6821      	ldr	r1, [r4, #0]
    469e:	1dea      	adds	r2, r5, #7
    46a0:	5c8a      	ldrb	r2, [r1, r2]
							 |  idle_rxbuf[4+len+0];
    46a2:	6821      	ldr	r1, [r4, #0]
    46a4:	3506      	adds	r5, #6
    46a6:	5d49      	ldrb	r1, [r1, r5]
			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
							 | (idle_rxbuf[4+len+1] << 8)
    46a8:	0212      	lsls	r2, r2, #8
    46aa:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
							 |  idle_rxbuf[4+len+0];
    46ae:	430b      	orrs	r3, r1
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    46b0:	4298      	cmp	r0, r3
    46b2:	d104      	bne.n	46be <cb_follow_le+0xe6>
    46b4:	e7d7      	b.n	4666 <cb_follow_le+0x8e>
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    46b6:	3301      	adds	r3, #1
    46b8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    46bc:	d1a1      	bne.n	4602 <cb_follow_le+0x2a>
			break;
		}
	}

	return 1;
}
    46be:	2001      	movs	r0, #1
    46c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    46c4:	10000448 	.word	0x10000448
    46c8:	00009250 	.word	0x00009250
    46cc:	10000d24 	.word	0x10000d24
    46d0:	10000d20 	.word	0x10000d20
    46d4:	2009c038 	.word	0x2009c038
    46d8:	10000a1c 	.word	0x10000a1c

000046dc <connection_follow_cb_boss_master>:


/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb_boss_master(u8 *packet) {
    46dc:	b570      	push	{r4, r5, r6, lr}
	u8 header = packet[HEADER_IDX];
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    46de:	4b59      	ldr	r3, [pc, #356]	; (4844 <connection_follow_cb_boss_master+0x168>)


/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb_boss_master(u8 *packet) {
    46e0:	4605      	mov	r5, r0
	u8 header = packet[HEADER_IDX];
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    46e2:	7e19      	ldrb	r1, [r3, #24]
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	// u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
	u8 header = packet[HEADER_IDX];
    46e4:	7902      	ldrb	r2, [r0, #4]
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    46e6:	2902      	cmp	r1, #2
    46e8:	461c      	mov	r4, r3
    46ea:	d113      	bne.n	4714 <connection_follow_cb_boss_master+0x38>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    46ec:	2203      	movs	r2, #3
    46ee:	761a      	strb	r2, [r3, #24]
		le.conn_epoch = clkn;
    46f0:	4a55      	ldr	r2, [pc, #340]	; (4848 <connection_follow_cb_boss_master+0x16c>)
    46f2:	6812      	ldr	r2, [r2, #0]
    46f4:	61da      	str	r2, [r3, #28]
		le.interval_timer = le.conn_interval - 1;
    46f6:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    46f8:	3a01      	subs	r2, #1
    46fa:	b292      	uxth	r2, r2
    46fc:	841a      	strh	r2, [r3, #32]
		le.conn_count = 0;
    46fe:	2200      	movs	r2, #0
    4700:	849a      	strh	r2, [r3, #36]	; 0x24
		le.update_pending = 0;
    4702:	62da      	str	r2, [r3, #44]	; 0x2c

		// hue hue hue
		if (jam_mode != JAM_NONE)
    4704:	4b51      	ldr	r3, [pc, #324]	; (484c <connection_follow_cb_boss_master+0x170>)
    4706:	7cda      	ldrb	r2, [r3, #19]
    4708:	2a00      	cmp	r2, #0
    470a:	f000 8099 	beq.w	4840 <connection_follow_cb_boss_master+0x164>
			le_jam_count = JAM_COUNT_DEFAULT;
    470e:	2228      	movs	r2, #40	; 0x28
    4710:	61da      	str	r2, [r3, #28]
    4712:	bd70      	pop	{r4, r5, r6, pc}

	} else if (le.link_state == LINK_CONNECTED) {
    4714:	2903      	cmp	r1, #3
    4716:	d13b      	bne.n	4790 <connection_follow_cb_boss_master+0xb4>
		u8 llid =  header & 0x03;

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    4718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		// hue hue hue
		if (jam_mode != JAM_NONE)
			le_jam_count = JAM_COUNT_DEFAULT;

	} else if (le.link_state == LINK_CONNECTED) {
		u8 llid =  header & 0x03;
    471a:	f002 0203 	and.w	r2, r2, #3

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    471e:	b1a3      	cbz	r3, 474a <connection_follow_cb_boss_master+0x6e>
    4720:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    4722:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    4724:	b29b      	uxth	r3, r3
    4726:	4299      	cmp	r1, r3
    4728:	d10f      	bne.n	474a <connection_follow_cb_boss_master+0x6e>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    472a:	4b47      	ldr	r3, [pc, #284]	; (4848 <connection_follow_cb_boss_master+0x16c>)
    472c:	681b      	ldr	r3, [r3, #0]
    472e:	61e3      	str	r3, [r4, #28]
			le.conn_interval = le.interval_update;
    4730:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4732:	8463      	strh	r3, [r4, #34]	; 0x22
			le.interval_timer = le.interval_update - 1;
    4734:	3b01      	subs	r3, #1
    4736:	b29b      	uxth	r3, r3
    4738:	8423      	strh	r3, [r4, #32]
			le.win_size = le.win_size_update;
    473a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    473e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			le.win_offset = le.win_offset_update;
    4742:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    4744:	8523      	strh	r3, [r4, #40]	; 0x28
			le.update_pending = 0;
    4746:	2300      	movs	r3, #0
    4748:	62e3      	str	r3, [r4, #44]	; 0x2c
		}

		if (llid == 0x03 && data[0] == 0x00) {
    474a:	2a03      	cmp	r2, #3
    474c:	d178      	bne.n	4840 <connection_follow_cb_boss_master+0x164>
    474e:	79ab      	ldrb	r3, [r5, #6]
    4750:	2b00      	cmp	r3, #0
    4752:	d175      	bne.n	4840 <connection_follow_cb_boss_master+0x164>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    4754:	79eb      	ldrb	r3, [r5, #7]
    4756:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    475a:	7a6a      	ldrb	r2, [r5, #9]
    475c:	7a2b      	ldrb	r3, [r5, #8]
    475e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    4762:	86e3      	strh	r3, [r4, #54]	; 0x36
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    4764:	7aea      	ldrb	r2, [r5, #11]
    4766:	7aab      	ldrb	r3, [r5, #10]
    4768:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    476c:	8663      	strh	r3, [r4, #50]	; 0x32
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    476e:	7c6a      	ldrb	r2, [r5, #17]
    4770:	7c2b      	ldrb	r3, [r5, #16]
    4772:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			if (le.update_instant - le.conn_count < 32767)
    4776:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    4778:	b29b      	uxth	r3, r3
			if (le.update_instant - le.conn_count < 32767)
    477a:	b292      	uxth	r2, r2
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    477c:	8623      	strh	r3, [r4, #48]	; 0x30
			if (le.update_instant - le.conn_count < 32767)
    477e:	1a9b      	subs	r3, r3, r2
    4780:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    4784:	4293      	cmp	r3, r2
    4786:	dc5b      	bgt.n	4840 <connection_follow_cb_boss_master+0x164>
				le.update_pending = 1;
    4788:	4b2e      	ldr	r3, [pc, #184]	; (4844 <connection_follow_cb_boss_master+0x168>)
    478a:	2201      	movs	r2, #1
    478c:	62da      	str	r2, [r3, #44]	; 0x2c
    478e:	bd70      	pop	{r4, r5, r6, pc}
		}

	} else if (le.link_state == LINK_LISTENING) {
    4790:	2901      	cmp	r1, #1
    4792:	d155      	bne.n	4840 <connection_follow_cb_boss_master+0x164>
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
    4794:	f002 020f 	and.w	r2, r2, #15
    4798:	2a05      	cmp	r2, #5
    479a:	d151      	bne.n	4840 <connection_follow_cb_boss_master+0x164>
			uint16_t conn_interval;

			// ignore packets with incorrect length
			if (*data_len != 34)
    479c:	7943      	ldrb	r3, [r0, #5]
    479e:	2b22      	cmp	r3, #34	; 0x22
    47a0:	d14e      	bne.n	4840 <connection_follow_cb_boss_master+0x164>
				return;

			// conn interval must be [7.5 ms, 4.0s] in units of 1.25 ms
			conn_interval = (packet[29] << 8) | packet[28];
    47a2:	7f42      	ldrb	r2, [r0, #29]
    47a4:	7f03      	ldrb	r3, [r0, #28]
    47a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (conn_interval < 6 || conn_interval > 3200)
    47aa:	f640 427a 	movw	r2, #3194	; 0xc7a
    47ae:	3b06      	subs	r3, #6
    47b0:	b29b      	uxth	r3, r3
    47b2:	4293      	cmp	r3, r2
    47b4:	d844      	bhi.n	4840 <connection_follow_cb_boss_master+0x164>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    47b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    47b8:	b93b      	cbnz	r3, 47ca <connection_follow_cb_boss_master+0xee>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
			}

			le.link_state = LINK_CONN_PENDING;
    47ba:	2302      	movs	r3, #2
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    47bc:	2000      	movs	r0, #0
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
			}

			le.link_state = LINK_CONN_PENDING;
    47be:	7623      	strb	r3, [r4, #24]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    47c0:	6160      	str	r0, [r4, #20]
    47c2:	f105 0111 	add.w	r1, r5, #17

			for (i = 0; i < 4; ++i)
    47c6:	4603      	mov	r3, r0
    47c8:	e011      	b.n	47ee <connection_follow_cb_boss_master+0x112>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    47ca:	f104 0038 	add.w	r0, r4, #56	; 0x38
    47ce:	1da9      	adds	r1, r5, #6
    47d0:	2206      	movs	r2, #6
    47d2:	f004 fc63 	bl	909c <memcmp>
			if (conn_interval < 6 || conn_interval > 3200)
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    47d6:	2800      	cmp	r0, #0
    47d8:	d0ef      	beq.n	47ba <connection_follow_cb_boss_master+0xde>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    47da:	f104 0038 	add.w	r0, r4, #56	; 0x38
    47de:	f105 010c 	add.w	r1, r5, #12
    47e2:	2206      	movs	r2, #6
    47e4:	f004 fc5a 	bl	909c <memcmp>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    47e8:	2800      	cmp	r0, #0
    47ea:	d0e6      	beq.n	47ba <connection_follow_cb_boss_master+0xde>
    47ec:	bd70      	pop	{r4, r5, r6, pc}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
    47ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    47f2:	00de      	lsls	r6, r3, #3
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    47f4:	3301      	adds	r3, #1
				aa |= packet[18+i] << (i*8);
    47f6:	40b2      	lsls	r2, r6
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    47f8:	2b04      	cmp	r3, #4
				aa |= packet[18+i] << (i*8);
    47fa:	ea40 0002 	orr.w	r0, r0, r2
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    47fe:	d1f6      	bne.n	47ee <connection_follow_cb_boss_master+0x112>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    4800:	f7ff fe86 	bl	4510 <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
						| (packet[CRC_INIT+1] << 8)
    4804:	7deb      	ldrb	r3, [r5, #23]
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    4806:	7e28      	ldrb	r0, [r5, #24]
						| (packet[CRC_INIT+1] << 8)
    4808:	021b      	lsls	r3, r3, #8
    480a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
						|  packet[CRC_INIT+0];
    480e:	7da8      	ldrb	r0, [r5, #22]
    4810:	4318      	orrs	r0, r3
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    4812:	60e0      	str	r0, [r4, #12]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    4814:	f003 fdb4 	bl	8380 <rbit>

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    4818:	7e6b      	ldrb	r3, [r5, #25]

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    481a:	6120      	str	r0, [r4, #16]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    481c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    4820:	7eab      	ldrb	r3, [r5, #26]
    4822:	8523      	strh	r3, [r4, #40]	; 0x28

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = (packet[CONN_INTERVAL+1] << 8)
    4824:	7f6a      	ldrb	r2, [r5, #29]
    4826:	7f2b      	ldrb	r3, [r5, #28]
    4828:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    482c:	8463      	strh	r3, [r4, #34]	; 0x22
							 |  packet[CONN_INTERVAL+0];

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    482e:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
			le.channel_idx = le.channel_increment;

			// Hop to the initial channel immediately
			do_hop = 1;
    4832:	2201      	movs	r2, #1
#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = (packet[CONN_INTERVAL+1] << 8)
							 |  packet[CONN_INTERVAL+0];

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    4834:	f003 031f 	and.w	r3, r3, #31
    4838:	76a3      	strb	r3, [r4, #26]
			le.channel_idx = le.channel_increment;
    483a:	7663      	strb	r3, [r4, #25]

			// Hop to the initial channel immediately
			do_hop = 1;
    483c:	4b03      	ldr	r3, [pc, #12]	; (484c <connection_follow_cb_boss_master+0x170>)
    483e:	72da      	strb	r2, [r3, #11]
    4840:	bd70      	pop	{r4, r5, r6, pc}
    4842:	bf00      	nop
    4844:	10000448 	.word	0x10000448
    4848:	10000bc4 	.word	0x10000bc4
    484c:	10000a1c 	.word	0x10000a1c

00004850 <connection_follow_cb>:


/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    4850:	b570      	push	{r4, r5, r6, lr}
	u8 header = packet[HEADER_IDX];
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    4852:	4b59      	ldr	r3, [pc, #356]	; (49b8 <connection_follow_cb+0x168>)


/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    4854:	4605      	mov	r5, r0
	u8 header = packet[HEADER_IDX];
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    4856:	7e19      	ldrb	r1, [r3, #24]
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	// u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
	u8 header = packet[HEADER_IDX];
    4858:	7902      	ldrb	r2, [r0, #4]
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    485a:	2902      	cmp	r1, #2
    485c:	461c      	mov	r4, r3
    485e:	d113      	bne.n	4888 <connection_follow_cb+0x38>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    4860:	2203      	movs	r2, #3
    4862:	761a      	strb	r2, [r3, #24]
		le.conn_epoch = clkn;
    4864:	4a55      	ldr	r2, [pc, #340]	; (49bc <connection_follow_cb+0x16c>)
    4866:	6812      	ldr	r2, [r2, #0]
    4868:	61da      	str	r2, [r3, #28]
		le.interval_timer = le.conn_interval - 1;
    486a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    486c:	3a01      	subs	r2, #1
    486e:	b292      	uxth	r2, r2
    4870:	841a      	strh	r2, [r3, #32]
		le.conn_count = 0;
    4872:	2200      	movs	r2, #0
    4874:	849a      	strh	r2, [r3, #36]	; 0x24
		le.update_pending = 0;
    4876:	62da      	str	r2, [r3, #44]	; 0x2c

		// hue hue hue
		if (jam_mode != JAM_NONE)
    4878:	4b51      	ldr	r3, [pc, #324]	; (49c0 <connection_follow_cb+0x170>)
    487a:	7cda      	ldrb	r2, [r3, #19]
    487c:	2a00      	cmp	r2, #0
    487e:	f000 8099 	beq.w	49b4 <connection_follow_cb+0x164>
			le_jam_count = JAM_COUNT_DEFAULT;
    4882:	2228      	movs	r2, #40	; 0x28
    4884:	61da      	str	r2, [r3, #28]
    4886:	bd70      	pop	{r4, r5, r6, pc}

	} else if (le.link_state == LINK_CONNECTED) {
    4888:	2903      	cmp	r1, #3
    488a:	d13b      	bne.n	4904 <connection_follow_cb+0xb4>
		u8 llid =  header & 0x03;

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		// hue hue hue
		if (jam_mode != JAM_NONE)
			le_jam_count = JAM_COUNT_DEFAULT;

	} else if (le.link_state == LINK_CONNECTED) {
		u8 llid =  header & 0x03;
    488e:	f002 0203 	and.w	r2, r2, #3

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    4892:	b1a3      	cbz	r3, 48be <connection_follow_cb+0x6e>
    4894:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    4896:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    4898:	b29b      	uxth	r3, r3
    489a:	4299      	cmp	r1, r3
    489c:	d10f      	bne.n	48be <connection_follow_cb+0x6e>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    489e:	4b47      	ldr	r3, [pc, #284]	; (49bc <connection_follow_cb+0x16c>)
    48a0:	681b      	ldr	r3, [r3, #0]
    48a2:	61e3      	str	r3, [r4, #28]
			le.conn_interval = le.interval_update;
    48a4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    48a6:	8463      	strh	r3, [r4, #34]	; 0x22
			le.interval_timer = le.interval_update - 1;
    48a8:	3b01      	subs	r3, #1
    48aa:	b29b      	uxth	r3, r3
    48ac:	8423      	strh	r3, [r4, #32]
			le.win_size = le.win_size_update;
    48ae:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    48b2:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			le.win_offset = le.win_offset_update;
    48b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    48b8:	8523      	strh	r3, [r4, #40]	; 0x28
			le.update_pending = 0;
    48ba:	2300      	movs	r3, #0
    48bc:	62e3      	str	r3, [r4, #44]	; 0x2c
		}

		if (llid == 0x03 && data[0] == 0x00) {
    48be:	2a03      	cmp	r2, #3
    48c0:	d178      	bne.n	49b4 <connection_follow_cb+0x164>
    48c2:	79ab      	ldrb	r3, [r5, #6]
    48c4:	2b00      	cmp	r3, #0
    48c6:	d175      	bne.n	49b4 <connection_follow_cb+0x164>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    48c8:	79eb      	ldrb	r3, [r5, #7]
    48ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    48ce:	7a6a      	ldrb	r2, [r5, #9]
    48d0:	7a2b      	ldrb	r3, [r5, #8]
    48d2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    48d6:	86e3      	strh	r3, [r4, #54]	; 0x36
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    48d8:	7aea      	ldrb	r2, [r5, #11]
    48da:	7aab      	ldrb	r3, [r5, #10]
    48dc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    48e0:	8663      	strh	r3, [r4, #50]	; 0x32
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    48e2:	7c6a      	ldrb	r2, [r5, #17]
    48e4:	7c2b      	ldrb	r3, [r5, #16]
    48e6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			if (le.update_instant - le.conn_count < 32767)
    48ea:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    48ec:	b29b      	uxth	r3, r3
			if (le.update_instant - le.conn_count < 32767)
    48ee:	b292      	uxth	r2, r2
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    48f0:	8623      	strh	r3, [r4, #48]	; 0x30
			if (le.update_instant - le.conn_count < 32767)
    48f2:	1a9b      	subs	r3, r3, r2
    48f4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    48f8:	4293      	cmp	r3, r2
    48fa:	dc5b      	bgt.n	49b4 <connection_follow_cb+0x164>
				le.update_pending = 1;
    48fc:	4b2e      	ldr	r3, [pc, #184]	; (49b8 <connection_follow_cb+0x168>)
    48fe:	2201      	movs	r2, #1
    4900:	62da      	str	r2, [r3, #44]	; 0x2c
    4902:	bd70      	pop	{r4, r5, r6, pc}
		}

	} else if (le.link_state == LINK_LISTENING) {
    4904:	2901      	cmp	r1, #1
    4906:	d155      	bne.n	49b4 <connection_follow_cb+0x164>
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
    4908:	f002 020f 	and.w	r2, r2, #15
    490c:	2a05      	cmp	r2, #5
    490e:	d151      	bne.n	49b4 <connection_follow_cb+0x164>
			uint16_t conn_interval;

			// ignore packets with incorrect length
			if (*data_len != 34)
    4910:	7943      	ldrb	r3, [r0, #5]
    4912:	2b22      	cmp	r3, #34	; 0x22
    4914:	d14e      	bne.n	49b4 <connection_follow_cb+0x164>
				return;

			// conn interval must be [7.5 ms, 4.0s] in units of 1.25 ms
			conn_interval = (packet[29] << 8) | packet[28];
    4916:	7f42      	ldrb	r2, [r0, #29]
    4918:	7f03      	ldrb	r3, [r0, #28]
    491a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (conn_interval < 6 || conn_interval > 3200)
    491e:	f640 427a 	movw	r2, #3194	; 0xc7a
    4922:	3b06      	subs	r3, #6
    4924:	b29b      	uxth	r3, r3
    4926:	4293      	cmp	r3, r2
    4928:	d844      	bhi.n	49b4 <connection_follow_cb+0x164>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    492a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    492c:	b93b      	cbnz	r3, 493e <connection_follow_cb+0xee>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
			}

			le.link_state = LINK_CONN_PENDING;
    492e:	2302      	movs	r3, #2
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    4930:	2000      	movs	r0, #0
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
			}

			le.link_state = LINK_CONN_PENDING;
    4932:	7623      	strb	r3, [r4, #24]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    4934:	6160      	str	r0, [r4, #20]
    4936:	f105 0111 	add.w	r1, r5, #17

			for (i = 0; i < 4; ++i)
    493a:	4603      	mov	r3, r0
    493c:	e011      	b.n	4962 <connection_follow_cb+0x112>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    493e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    4942:	1da9      	adds	r1, r5, #6
    4944:	2206      	movs	r2, #6
    4946:	f004 fba9 	bl	909c <memcmp>
			if (conn_interval < 6 || conn_interval > 3200)
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    494a:	2800      	cmp	r0, #0
    494c:	d0ef      	beq.n	492e <connection_follow_cb+0xde>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    494e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    4952:	f105 010c 	add.w	r1, r5, #12
    4956:	2206      	movs	r2, #6
    4958:	f004 fba0 	bl	909c <memcmp>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    495c:	2800      	cmp	r0, #0
    495e:	d0e6      	beq.n	492e <connection_follow_cb+0xde>
    4960:	bd70      	pop	{r4, r5, r6, pc}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
    4962:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    4966:	00de      	lsls	r6, r3, #3
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    4968:	3301      	adds	r3, #1
				aa |= packet[18+i] << (i*8);
    496a:	40b2      	lsls	r2, r6
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    496c:	2b04      	cmp	r3, #4
				aa |= packet[18+i] << (i*8);
    496e:	ea40 0002 	orr.w	r0, r0, r2
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    4972:	d1f6      	bne.n	4962 <connection_follow_cb+0x112>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    4974:	f7ff fdcc 	bl	4510 <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
						| (packet[CRC_INIT+1] << 8)
    4978:	7deb      	ldrb	r3, [r5, #23]
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    497a:	7e28      	ldrb	r0, [r5, #24]
						| (packet[CRC_INIT+1] << 8)
    497c:	021b      	lsls	r3, r3, #8
    497e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
						|  packet[CRC_INIT+0];
    4982:	7da8      	ldrb	r0, [r5, #22]
    4984:	4318      	orrs	r0, r3
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    4986:	60e0      	str	r0, [r4, #12]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    4988:	f003 fcfa 	bl	8380 <rbit>

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    498c:	7e6b      	ldrb	r3, [r5, #25]

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    498e:	6120      	str	r0, [r4, #16]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    4990:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    4994:	7eab      	ldrb	r3, [r5, #26]
    4996:	8523      	strh	r3, [r4, #40]	; 0x28

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = (packet[CONN_INTERVAL+1] << 8)
    4998:	7f6a      	ldrb	r2, [r5, #29]
    499a:	7f2b      	ldrb	r3, [r5, #28]
    499c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    49a0:	8463      	strh	r3, [r4, #34]	; 0x22
							 |  packet[CONN_INTERVAL+0];

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    49a2:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
			le.channel_idx = le.channel_increment;

			// Hop to the initial channel immediately
			do_hop = 1;
    49a6:	2201      	movs	r2, #1
#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = (packet[CONN_INTERVAL+1] << 8)
							 |  packet[CONN_INTERVAL+0];

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    49a8:	f003 031f 	and.w	r3, r3, #31
    49ac:	76a3      	strb	r3, [r4, #26]
			le.channel_idx = le.channel_increment;
    49ae:	7663      	strb	r3, [r4, #25]

			// Hop to the initial channel immediately
			do_hop = 1;
    49b0:	4b03      	ldr	r3, [pc, #12]	; (49c0 <connection_follow_cb+0x170>)
    49b2:	72da      	strb	r2, [r3, #11]
    49b4:	bd70      	pop	{r4, r5, r6, pc}
    49b6:	bf00      	nop
    49b8:	10000448 	.word	0x10000448
    49bc:	10000bc4 	.word	0x10000bc4
    49c0:	10000a1c 	.word	0x10000a1c

000049c4 <vendor_request_handler>:

	return 1;
}

static int vendor_request_handler(uint8_t request, uint16_t* request_params, uint8_t* data, int* data_len)
{
    49c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49c6:	460e      	mov	r6, r1
    49c8:	4615      	mov	r5, r2
    49ca:	461c      	mov	r4, r3
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    49cc:	2847      	cmp	r0, #71	; 0x47
    49ce:	f200 8324 	bhi.w	501a <vendor_request_handler+0x656>
    49d2:	e8df f010 	tbh	[pc, r0, lsl #1]
    49d6:	0103      	.short	0x0103
    49d8:	004d0048 	.word	0x004d0048
    49dc:	00560051 	.word	0x00560051
    49e0:	005e0059 	.word	0x005e0059
    49e4:	00630061 	.word	0x00630061
    49e8:	006c0067 	.word	0x006c0067
    49ec:	00c700c0 	.word	0x00c700c0
    49f0:	007a0109 	.word	0x007a0109
    49f4:	007f0075 	.word	0x007f0075
    49f8:	00870084 	.word	0x00870084
    49fc:	0094008c 	.word	0x0094008c
    4a00:	00ba00b8 	.word	0x00ba00b8
    4a04:	010100bc 	.word	0x010100bc
    4a08:	03220106 	.word	0x03220106
    4a0c:	0098010b 	.word	0x0098010b
    4a10:	00a9009f 	.word	0x00a9009f
    4a14:	00ab00a7 	.word	0x00ab00a7
    4a18:	01270134 	.word	0x01270134
    4a1c:	01540151 	.word	0x01540151
    4a20:	015c0158 	.word	0x015c0158
    4a24:	01dd01a5 	.word	0x01dd01a5
    4a28:	02400200 	.word	0x02400200
    4a2c:	025a0250 	.word	0x025a0250
    4a30:	02690320 	.word	0x02690320
    4a34:	0274026e 	.word	0x0274026e
    4a38:	0289027b 	.word	0x0289027b
    4a3c:	01f601ea 	.word	0x01f601ea
    4a40:	02d10297 	.word	0x02d10297
    4a44:	02e40143 	.word	0x02e40143
    4a48:	029f0322 	.word	0x029f0322
    4a4c:	031b02fa 	.word	0x031b02fa
    4a50:	01d901c7 	.word	0x01d901c7
    4a54:	0322020c 	.word	0x0322020c
    4a58:	02b602a4 	.word	0x02b602a4
    4a5c:	02c60125 	.word	0x02c60125
    4a60:	02da0213 	.word	0x02da0213
    4a64:	0248      	.short	0x0248
	case UBERTOOTH_PING:
		*data_len = 0;
		break;

	case UBERTOOTH_RX_SYMBOLS:
		requested_mode = MODE_RX_SYMBOLS;
    4a66:	4b9f      	ldr	r3, [pc, #636]	; (4ce4 <vendor_request_handler+0x320>)
    4a68:	2001      	movs	r0, #1
    4a6a:	7498      	strb	r0, [r3, #18]
		*data_len = 0;
    4a6c:	2300      	movs	r3, #0
    4a6e:	e1a6      	b.n	4dbe <vendor_request_handler+0x3fa>
		break;

	case UBERTOOTH_TX_SYMBOLS:
		hop_mode = HOP_BLUETOOTH;
    4a70:	4b9c      	ldr	r3, [pc, #624]	; (4ce4 <vendor_request_handler+0x320>)
    4a72:	2202      	movs	r2, #2
    4a74:	729a      	strb	r2, [r3, #10]
    4a76:	e27d      	b.n	4f74 <vendor_request_handler+0x5b0>
		requested_mode = MODE_TX_SYMBOLS;
		*data_len = 0;
		break;

	case UBERTOOTH_GET_USRLED:
		data[0] = (USRLED) ? 1 : 0;
    4a78:	4b9b      	ldr	r3, [pc, #620]	; (4ce8 <vendor_request_handler+0x324>)
    4a7a:	681b      	ldr	r3, [r3, #0]
    4a7c:	f3c3 0340 	ubfx	r3, r3, #1, #1
    4a80:	e103      	b.n	4c8a <vendor_request_handler+0x2c6>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
    4a82:	880a      	ldrh	r2, [r1, #0]
    4a84:	2302      	movs	r3, #2
    4a86:	e015      	b.n	4ab4 <vendor_request_handler+0xf0>
		else
			USRLED_CLR;
		break;

	case UBERTOOTH_GET_RXLED:
		data[0] = (RXLED) ? 1 : 0;
    4a88:	4b97      	ldr	r3, [pc, #604]	; (4ce8 <vendor_request_handler+0x324>)
    4a8a:	681b      	ldr	r3, [r3, #0]
    4a8c:	f3c3 1300 	ubfx	r3, r3, #4, #1
    4a90:	e0fb      	b.n	4c8a <vendor_request_handler+0x2c6>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
    4a92:	880a      	ldrh	r2, [r1, #0]
    4a94:	2310      	movs	r3, #16
    4a96:	e00d      	b.n	4ab4 <vendor_request_handler+0xf0>
		else
			RXLED_CLR;
		break;

	case UBERTOOTH_GET_TXLED:
		data[0] = (TXLED) ? 1 : 0;
    4a98:	4b93      	ldr	r3, [pc, #588]	; (4ce8 <vendor_request_handler+0x324>)
    4a9a:	e024      	b.n	4ae6 <vendor_request_handler+0x122>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
    4a9c:	880a      	ldrh	r2, [r1, #0]
    4a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
    4aa2:	e007      	b.n	4ab4 <vendor_request_handler+0xf0>
		else
			TXLED_CLR;
		break;

	case UBERTOOTH_GET_1V8:
		data[0] = (CC1V8) ? 1 : 0;
    4aa4:	4b90      	ldr	r3, [pc, #576]	; (4ce8 <vendor_request_handler+0x324>)
    4aa6:	681b      	ldr	r3, [r3, #0]
    4aa8:	f3c3 2340 	ubfx	r3, r3, #9, #1
    4aac:	e0ed      	b.n	4c8a <vendor_request_handler+0x2c6>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
    4aae:	880a      	ldrh	r2, [r1, #0]
    4ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
    4ab4:	b10a      	cbz	r2, 4aba <vendor_request_handler+0xf6>
			CC1V8_SET;
    4ab6:	4a8d      	ldr	r2, [pc, #564]	; (4cec <vendor_request_handler+0x328>)
    4ab8:	e000      	b.n	4abc <vendor_request_handler+0xf8>
		else
			CC1V8_CLR;
    4aba:	4a8d      	ldr	r2, [pc, #564]	; (4cf0 <vendor_request_handler+0x32c>)
    4abc:	6013      	str	r3, [r2, #0]
    4abe:	e2aa      	b.n	5016 <vendor_request_handler+0x652>
		break;

	case UBERTOOTH_GET_PARTNUM:
		get_part_num(data, data_len);
    4ac0:	4610      	mov	r0, r2
    4ac2:	4621      	mov	r1, r4
    4ac4:	f003 fed8 	bl	8878 <get_part_num>
    4ac8:	e2a5      	b.n	5016 <vendor_request_handler+0x652>
	case UBERTOOTH_RESET:
		requested_mode = MODE_RESET;
		break;

	case UBERTOOTH_GET_SERIAL:
		get_device_serial(data, data_len);
    4aca:	4610      	mov	r0, r2
    4acc:	4621      	mov	r1, r4
    4ace:	f003 feef 	bl	88b0 <get_device_serial>
    4ad2:	e2a0      	b.n	5016 <vendor_request_handler+0x652>
		break;

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		data[0] = (PAEN) ? 1 : 0;
    4ad4:	4b87      	ldr	r3, [pc, #540]	; (4cf4 <vendor_request_handler+0x330>)
    4ad6:	681b      	ldr	r3, [r3, #0]
    4ad8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    4adc:	e0d5      	b.n	4c8a <vendor_request_handler+0x2c6>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
    4ade:	880a      	ldrh	r2, [r1, #0]
    4ae0:	2380      	movs	r3, #128	; 0x80
    4ae2:	e007      	b.n	4af4 <vendor_request_handler+0x130>
		else
			PAEN_CLR;
		break;

	case UBERTOOTH_GET_HGM:
		data[0] = (HGM) ? 1 : 0;
    4ae4:	4b83      	ldr	r3, [pc, #524]	; (4cf4 <vendor_request_handler+0x330>)
    4ae6:	681b      	ldr	r3, [r3, #0]
    4ae8:	f3c3 2300 	ubfx	r3, r3, #8, #1
    4aec:	e0cd      	b.n	4c8a <vendor_request_handler+0x2c6>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
    4aee:	880a      	ldrh	r2, [r1, #0]
    4af0:	f44f 7380 	mov.w	r3, #256	; 0x100
    4af4:	b10a      	cbz	r2, 4afa <vendor_request_handler+0x136>
			HGM_SET;
    4af6:	4a80      	ldr	r2, [pc, #512]	; (4cf8 <vendor_request_handler+0x334>)
    4af8:	e7e0      	b.n	4abc <vendor_request_handler+0xf8>
		else
			HGM_CLR;
    4afa:	4a80      	ldr	r2, [pc, #512]	; (4cfc <vendor_request_handler+0x338>)
    4afc:	e7de      	b.n	4abc <vendor_request_handler+0xf8>
		break;
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
    4afe:	2203      	movs	r2, #3
    4b00:	4b78      	ldr	r3, [pc, #480]	; (4ce4 <vendor_request_handler+0x320>)
    4b02:	749a      	strb	r2, [r3, #18]
    4b04:	e287      	b.n	5016 <vendor_request_handler+0x652>
		break;

	case UBERTOOTH_GET_PALEVEL:
		data[0] = cc2400_get(FREND) & 0x7;
    4b06:	2005      	movs	r0, #5
    4b08:	f003 fd24 	bl	8554 <cc2400_get>
    4b0c:	f000 0007 	and.w	r0, r0, #7
    4b10:	7028      	strb	r0, [r5, #0]
    4b12:	e1e6      	b.n	4ee2 <vendor_request_handler+0x51e>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
    4b14:	8809      	ldrh	r1, [r1, #0]
    4b16:	2907      	cmp	r1, #7
    4b18:	f200 827f 	bhi.w	501a <vendor_request_handler+0x656>
			cc2400_set(FREND, 8 | request_params[0]);
    4b1c:	2005      	movs	r0, #5
    4b1e:	f041 0108 	orr.w	r1, r1, #8
    4b22:	e1f9      	b.n	4f18 <vendor_request_handler+0x554>
			return 0;
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
    4b24:	2205      	movs	r2, #5
    4b26:	e7eb      	b.n	4b00 <vendor_request_handler+0x13c>
		break;

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
    4b28:	2206      	movs	r2, #6
    4b2a:	e7e9      	b.n	4b00 <vendor_request_handler+0x13c>
		break;
#endif

	case UBERTOOTH_RANGE_CHECK:
		data[0] = rr.valid;
    4b2c:	4b74      	ldr	r3, [pc, #464]	; (4d00 <vendor_request_handler+0x33c>)
    4b2e:	781a      	ldrb	r2, [r3, #0]
    4b30:	702a      	strb	r2, [r5, #0]
		data[1] = rr.request_pa;
    4b32:	785a      	ldrb	r2, [r3, #1]
    4b34:	706a      	strb	r2, [r5, #1]
		data[2] = rr.request_num;
    4b36:	789a      	ldrb	r2, [r3, #2]
    4b38:	70aa      	strb	r2, [r5, #2]
		data[3] = rr.reply_pa;
    4b3a:	78da      	ldrb	r2, [r3, #3]
    4b3c:	70ea      	strb	r2, [r5, #3]
		data[4] = rr.reply_num;
    4b3e:	791b      	ldrb	r3, [r3, #4]
    4b40:	712b      	strb	r3, [r5, #4]
		*data_len = 5;
    4b42:	2305      	movs	r3, #5
    4b44:	e04b      	b.n	4bde <vendor_request_handler+0x21a>
		break;

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
    4b46:	2200      	movs	r2, #0
    4b48:	e7da      	b.n	4b00 <vendor_request_handler+0x13c>
		break;

	case UBERTOOTH_GET_MOD:
		data[0] = modulation;
    4b4a:	4b66      	ldr	r3, [pc, #408]	; (4ce4 <vendor_request_handler+0x320>)
    4b4c:	e09c      	b.n	4c88 <vendor_request_handler+0x2c4>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_MOD:
		modulation = request_params[0];
    4b4e:	780a      	ldrb	r2, [r1, #0]
    4b50:	4b64      	ldr	r3, [pc, #400]	; (4ce4 <vendor_request_handler+0x320>)
    4b52:	701a      	strb	r2, [r3, #0]
    4b54:	e25f      	b.n	5016 <vendor_request_handler+0x652>
		break;

	case UBERTOOTH_GET_CHANNEL:
		data[0] = channel & 0xFF;
    4b56:	4b6b      	ldr	r3, [pc, #428]	; (4d04 <vendor_request_handler+0x340>)
    4b58:	881a      	ldrh	r2, [r3, #0]
    4b5a:	702a      	strb	r2, [r5, #0]
		data[1] = (channel >> 8) & 0xFF;
    4b5c:	881b      	ldrh	r3, [r3, #0]
    4b5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4b62:	e1a4      	b.n	4eae <vendor_request_handler+0x4ea>
		*data_len = 2;
		break;

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    4b64:	880a      	ldrh	r2, [r1, #0]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    4b66:	f640 21ea 	movw	r1, #2794	; 0xaea
		data[1] = (channel >> 8) & 0xFF;
		*data_len = 2;
		break;

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    4b6a:	4b5e      	ldr	r3, [pc, #376]	; (4ce4 <vendor_request_handler+0x320>)
    4b6c:	81da      	strh	r2, [r3, #14]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    4b6e:	89da      	ldrh	r2, [r3, #14]
    4b70:	b292      	uxth	r2, r2
    4b72:	428a      	cmp	r2, r1
    4b74:	d904      	bls.n	4b80 <vendor_request_handler+0x1bc>
			hop_mode = HOP_SWEEP;
    4b76:	2201      	movs	r2, #1
    4b78:	729a      	strb	r2, [r3, #10]
			requested_channel = 2402;
    4b7a:	f640 1262 	movw	r2, #2402	; 0x962
    4b7e:	e015      	b.n	4bac <vendor_request_handler+0x1e8>
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
    4b80:	2200      	movs	r2, #0
    4b82:	729a      	strb	r2, [r3, #10]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4b84:	f640 02dc 	movw	r2, #2268	; 0x8dc
    4b88:	89d9      	ldrh	r1, [r3, #14]
    4b8a:	b289      	uxth	r1, r1
    4b8c:	4291      	cmp	r1, r2
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4b8e:	f640 21e9 	movw	r1, #2793	; 0xae9
			requested_channel = 2402;
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4b92:	bf84      	itt	hi
    4b94:	89da      	ldrhhi	r2, [r3, #14]
    4b96:	b292      	uxthhi	r2, r2
    4b98:	81da      	strh	r2, [r3, #14]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4b9a:	89da      	ldrh	r2, [r3, #14]
    4b9c:	b292      	uxth	r2, r2
    4b9e:	428a      	cmp	r2, r1
    4ba0:	bf8f      	iteee	hi
    4ba2:	f640 22ea 	movwhi	r2, #2794	; 0xaea
    4ba6:	4a4f      	ldrls	r2, [pc, #316]	; (4ce4 <vendor_request_handler+0x320>)
    4ba8:	89d2      	ldrhls	r2, [r2, #14]
    4baa:	b292      	uxthls	r2, r2
    4bac:	81da      	strh	r2, [r3, #14]
		}

		le_adv_channel = requested_channel;
    4bae:	89d8      	ldrh	r0, [r3, #14]
    4bb0:	4a54      	ldr	r2, [pc, #336]	; (4d04 <vendor_request_handler+0x340>)
    4bb2:	b280      	uxth	r0, r0
    4bb4:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
		if (mode != MODE_BT_FOLLOW_LE && mode != MODE_BOSS_MASTER_LE) {
    4bb8:	7c5b      	ldrb	r3, [r3, #17]
			hop_mode = HOP_NONE;
			requested_channel = MAX(requested_channel, MIN_FREQ);
			requested_channel = MIN(requested_channel, MAX_FREQ);
		}

		le_adv_channel = requested_channel;
    4bba:	494a      	ldr	r1, [pc, #296]	; (4ce4 <vendor_request_handler+0x320>)
		if (mode != MODE_BT_FOLLOW_LE && mode != MODE_BOSS_MASTER_LE) {
    4bbc:	2b09      	cmp	r3, #9
    4bbe:	f000 822a 	beq.w	5016 <vendor_request_handler+0x652>
    4bc2:	7c4b      	ldrb	r3, [r1, #17]
    4bc4:	2b12      	cmp	r3, #18
    4bc6:	f000 8226 	beq.w	5016 <vendor_request_handler+0x652>
			channel = requested_channel;
    4bca:	89cb      	ldrh	r3, [r1, #14]
    4bcc:	b29b      	uxth	r3, r3
    4bce:	8013      	strh	r3, [r2, #0]
			requested_channel = 0;
    4bd0:	2300      	movs	r3, #0
    4bd2:	81cb      	strh	r3, [r1, #14]

			/* CS threshold is mode-dependent. Update it after
			 * possible mode change. TODO - kludgy. */
			cs_threshold_calc_and_set(channel);
    4bd4:	8810      	ldrh	r0, [r2, #0]
    4bd6:	e191      	b.n	4efc <vendor_request_handler+0x538>
		}
		break;

	case UBERTOOTH_SET_ISP:
		set_isp();
    4bd8:	f003 fe9e 	bl	8918 <set_isp>
		*data_len = 0; /* should never return */
    4bdc:	2300      	movs	r3, #0
    4bde:	6023      	str	r3, [r4, #0]
    4be0:	e219      	b.n	5016 <vendor_request_handler+0x652>
		break;

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
    4be2:	4a49      	ldr	r2, [pc, #292]	; (4d08 <vendor_request_handler+0x344>)
    4be4:	4b49      	ldr	r3, [pc, #292]	; (4d0c <vendor_request_handler+0x348>)
    4be6:	601a      	str	r2, [r3, #0]
		requested_mode = MODE_RESET;
    4be8:	220b      	movs	r2, #11
    4bea:	e789      	b.n	4b00 <vendor_request_handler+0x13c>
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    4bec:	880a      	ldrh	r2, [r1, #0]
    4bee:	f46f 6000 	mvn.w	r0, #2048	; 0x800
    4bf2:	1813      	adds	r3, r2, r0
    4bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4bf8:	f080 820f 	bcs.w	501a <vendor_request_handler+0x656>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4bfc:	884b      	ldrh	r3, [r1, #2]
		bootloader_ctrl = DFU_MODE;
		requested_mode = MODE_RESET;
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    4bfe:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    4c02:	1859      	adds	r1, r3, r1
    4c04:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    4c08:	f080 8207 	bcs.w	501a <vendor_request_handler+0x656>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4c0c:	4293      	cmp	r3, r2
    4c0e:	f0c0 8204 	bcc.w	501a <vendor_request_handler+0x656>
				request_params[1] < request_params[0])
			return 0;
		low_freq = request_params[0];
    4c12:	493c      	ldr	r1, [pc, #240]	; (4d04 <vendor_request_handler+0x340>)
    4c14:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
		high_freq = request_params[1];
    4c18:	f8a1 304e 	strh.w	r3, [r1, #78]	; 0x4e
		requested_mode = MODE_SPECAN;
    4c1c:	2204      	movs	r2, #4
    4c1e:	e1a8      	b.n	4f72 <vendor_request_handler+0x5ae>
		*data_len = 0;
		break;

	case UBERTOOTH_RX_GENERIC:
		requested_mode = MODE_RX_GENERIC;
    4c20:	220f      	movs	r2, #15
    4c22:	e1a6      	b.n	4f72 <vendor_request_handler+0x5ae>
		*data_len = 0;
		break;

	case UBERTOOTH_LED_SPECAN:
		if (request_params[0] > 256)
    4c24:	880b      	ldrh	r3, [r1, #0]
    4c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4c2a:	f200 81f6 	bhi.w	501a <vendor_request_handler+0x656>
			return 0;
		rssi_threshold = 54 - request_params[0];
    4c2e:	4a35      	ldr	r2, [pc, #212]	; (4d04 <vendor_request_handler+0x340>)
    4c30:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    4c34:	b2db      	uxtb	r3, r3
    4c36:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		requested_mode = MODE_LED_SPECAN;
    4c3a:	2207      	movs	r2, #7
    4c3c:	e199      	b.n	4f72 <vendor_request_handler+0x5ae>
		*data_len = 0;
		break;

	case UBERTOOTH_GET_REV_NUM:
		data[0] = 0x00;
    4c3e:	2300      	movs	r3, #0
    4c40:	7013      	strb	r3, [r2, #0]
		data[1] = 0x00;
    4c42:	7053      	strb	r3, [r2, #1]

		length = (u8)strlen(GIT_REVISION);
    4c44:	4832      	ldr	r0, [pc, #200]	; (4d10 <vendor_request_handler+0x34c>)
    4c46:	f004 fad1 	bl	91ec <strlen>
    4c4a:	b2c6      	uxtb	r6, r0
		data[2] = length;
    4c4c:	70ae      	strb	r6, [r5, #2]

		memcpy(&data[3], GIT_REVISION, length);
    4c4e:	4632      	mov	r2, r6
    4c50:	1ce8      	adds	r0, r5, #3
    4c52:	492f      	ldr	r1, [pc, #188]	; (4d10 <vendor_request_handler+0x34c>)
    4c54:	f004 fa54 	bl	9100 <memcpy>

		*data_len = 2 + 1 + length;
    4c58:	3603      	adds	r6, #3
    4c5a:	e00b      	b.n	4c74 <vendor_request_handler+0x2b0>
		break;

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
    4c5c:	482d      	ldr	r0, [pc, #180]	; (4d14 <vendor_request_handler+0x350>)
    4c5e:	f004 fac5 	bl	91ec <strlen>
    4c62:	b2c6      	uxtb	r6, r0
		data[0] = length;
    4c64:	4628      	mov	r0, r5
		memcpy(&data[1], compile_info, length);
    4c66:	4632      	mov	r2, r6
		*data_len = 2 + 1 + length;
		break;

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
		data[0] = length;
    4c68:	f800 6b01 	strb.w	r6, [r0], #1
		memcpy(&data[1], compile_info, length);
    4c6c:	4929      	ldr	r1, [pc, #164]	; (4d14 <vendor_request_handler+0x350>)
    4c6e:	f004 fa47 	bl	9100 <memcpy>
		*data_len = 1 + length;
    4c72:	3601      	adds	r6, #1
    4c74:	6026      	str	r6, [r4, #0]
    4c76:	e1ce      	b.n	5016 <vendor_request_handler+0x652>
		break;

	case UBERTOOTH_GET_BOARD_ID:
		data[0] = BOARD_ID;
    4c78:	2001      	movs	r0, #1
    4c7a:	7010      	strb	r0, [r2, #0]
    4c7c:	e132      	b.n	4ee4 <vendor_request_handler+0x520>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_SQUELCH:
		cs_threshold_req = (int8_t)request_params[0];
    4c7e:	880a      	ldrh	r2, [r1, #0]
    4c80:	4b25      	ldr	r3, [pc, #148]	; (4d18 <vendor_request_handler+0x354>)
    4c82:	701a      	strb	r2, [r3, #0]
    4c84:	e138      	b.n	4ef8 <vendor_request_handler+0x534>
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_SQUELCH:
		data[0] = cs_threshold_req;
    4c86:	4b24      	ldr	r3, [pc, #144]	; (4d18 <vendor_request_handler+0x354>)
    4c88:	781b      	ldrb	r3, [r3, #0]
    4c8a:	702b      	strb	r3, [r5, #0]
    4c8c:	e129      	b.n	4ee2 <vendor_request_handler+0x51e>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
    4c8e:	4c23      	ldr	r4, [pc, #140]	; (4d1c <vendor_request_handler+0x358>)
    4c90:	2200      	movs	r2, #0
    4c92:	2300      	movs	r3, #0
    4c94:	e9c4 2300 	strd	r2, r3, [r4]
		target.syncword = 0;
    4c98:	e9c4 2302 	strd	r2, r3, [r4, #8]
		for(int i=0; i < 8; i++) {
    4c9c:	2600      	movs	r6, #0
			target.address |= (uint64_t)data[i] << 8*i;
    4c9e:	5da8      	ldrb	r0, [r5, r6]
    4ca0:	00f2      	lsls	r2, r6, #3
    4ca2:	2100      	movs	r1, #0
    4ca4:	f004 f9ee 	bl	9084 <__aeabi_llsl>
    4ca8:	e9d4 2300 	ldrd	r2, r3, [r4]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4cac:	3601      	adds	r6, #1
			target.address |= (uint64_t)data[i] << 8*i;
    4cae:	4310      	orrs	r0, r2
    4cb0:	4319      	orrs	r1, r3
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4cb2:	2e08      	cmp	r6, #8
			target.address |= (uint64_t)data[i] << 8*i;
    4cb4:	e9c4 0100 	strd	r0, r1, [r4]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4cb8:	d1f1      	bne.n	4c9e <vendor_request_handler+0x2da>
    4cba:	3507      	adds	r5, #7
    4cbc:	2600      	movs	r6, #0
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4cbe:	00f2      	lsls	r2, r6, #3
    4cc0:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    4cc4:	2100      	movs	r1, #0
    4cc6:	f004 f9dd 	bl	9084 <__aeabi_llsl>
    4cca:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4cce:	3601      	adds	r6, #1
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4cd0:	4310      	orrs	r0, r2
    4cd2:	4319      	orrs	r1, r3
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4cd4:	2e08      	cmp	r6, #8
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4cd6:	e9c4 0102 	strd	r0, r1, [r4, #8]
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4cda:	d1f0      	bne.n	4cbe <vendor_request_handler+0x2fa>
			target.syncword |= (uint64_t)data[i+8] << 8*i;
		}
		precalc();
    4cdc:	f002 f982 	bl	6fe4 <precalc>
    4ce0:	e199      	b.n	5016 <vendor_request_handler+0x652>
    4ce2:	bf00      	nop
    4ce4:	10000a1c 	.word	0x10000a1c
    4ce8:	2009c034 	.word	0x2009c034
    4cec:	2009c038 	.word	0x2009c038
    4cf0:	2009c03c 	.word	0x2009c03c
    4cf4:	2009c054 	.word	0x2009c054
    4cf8:	2009c058 	.word	0x2009c058
    4cfc:	2009c05c 	.word	0x2009c05c
    4d00:	10001080 	.word	0x10001080
    4d04:	10000448 	.word	0x10000448
    4d08:	4305bb21 	.word	0x4305bb21
    4d0c:	1000001c 	.word	0x1000001c
    4d10:	00009b0c 	.word	0x00009b0c
    4d14:	000092f7 	.word	0x000092f7
    4d18:	10001048 	.word	0x10001048
    4d1c:	100010c0 	.word	0x100010c0
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
    4d20:	4bac      	ldr	r3, [pc, #688]	; (4fd4 <vendor_request_handler+0x610>)
    4d22:	2200      	movs	r2, #0
    4d24:	601a      	str	r2, [r3, #0]
    4d26:	1ce8      	adds	r0, r5, #3
    4d28:	1e6a      	subs	r2, r5, #1
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
    4d2a:	6819      	ldr	r1, [r3, #0]
    4d2c:	0209      	lsls	r1, r1, #8
    4d2e:	6019      	str	r1, [r3, #0]
			clkn_offset |= data[i];
    4d30:	f812 4f01 	ldrb.w	r4, [r2, #1]!
    4d34:	6819      	ldr	r1, [r3, #0]
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4d36:	4282      	cmp	r2, r0
			clkn_offset <<= 8;
			clkn_offset |= data[i];
    4d38:	ea41 0104 	orr.w	r1, r1, r4
    4d3c:	6019      	str	r1, [r3, #0]
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4d3e:	d1f4      	bne.n	4d2a <vendor_request_handler+0x366>
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
    4d40:	4ba5      	ldr	r3, [pc, #660]	; (4fd8 <vendor_request_handler+0x614>)
    4d42:	2202      	movs	r2, #2
    4d44:	729a      	strb	r2, [r3, #10]
		dma_discard = 1;
		DIO_SSEL_SET;
    4d46:	4aa5      	ldr	r2, [pc, #660]	; (4fdc <vendor_request_handler+0x618>)
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
		dma_discard = 1;
    4d48:	2001      	movs	r0, #1
		DIO_SSEL_SET;
    4d4a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
		dma_discard = 1;
    4d4e:	7418      	strb	r0, [r3, #16]
		DIO_SSEL_SET;
    4d50:	6011      	str	r1, [r2, #0]
		clk100ns_offset = (data[4] << 8) | (data[5] << 0);
    4d52:	7929      	ldrb	r1, [r5, #4]
    4d54:	796a      	ldrb	r2, [r5, #5]
    4d56:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4d5a:	49a1      	ldr	r1, [pc, #644]	; (4fe0 <vendor_request_handler+0x61c>)
    4d5c:	800a      	strh	r2, [r1, #0]
		requested_mode = MODE_BT_FOLLOW;
    4d5e:	2208      	movs	r2, #8
    4d60:	749a      	strb	r2, [r3, #18]
		break;
    4d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case UBERTOOTH_AFH:
		hop_mode = HOP_AFH;
    4d64:	4b9c      	ldr	r3, [pc, #624]	; (4fd8 <vendor_request_handler+0x614>)
    4d66:	2205      	movs	r2, #5
    4d68:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_AFH;
    4d6a:	220e      	movs	r2, #14
    4d6c:	749a      	strb	r2, [r3, #18]

		for(int i=0; i < 10; i++) {
    4d6e:	2300      	movs	r3, #0
			afh_map[i] = 0;
    4d70:	499c      	ldr	r1, [pc, #624]	; (4fe4 <vendor_request_handler+0x620>)
    4d72:	2200      	movs	r2, #0
    4d74:	545a      	strb	r2, [r3, r1]

	case UBERTOOTH_AFH:
		hop_mode = HOP_AFH;
		requested_mode = MODE_AFH;

		for(int i=0; i < 10; i++) {
    4d76:	3301      	adds	r3, #1
    4d78:	2b0a      	cmp	r3, #10
    4d7a:	d1f9      	bne.n	4d70 <vendor_request_handler+0x3ac>
			afh_map[i] = 0;
		}
		used_channels = 0;
    4d7c:	4b9a      	ldr	r3, [pc, #616]	; (4fe8 <vendor_request_handler+0x624>)
		afh_enabled = 1;
    4d7e:	2001      	movs	r0, #1
		requested_mode = MODE_AFH;

		for(int i=0; i < 10; i++) {
			afh_map[i] = 0;
		}
		used_channels = 0;
    4d80:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
    4d82:	4b9a      	ldr	r3, [pc, #616]	; (4fec <vendor_request_handler+0x628>)
    4d84:	7018      	strb	r0, [r3, #0]
		break;
    4d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case UBERTOOTH_HOP:
		do_hop = 1;
    4d88:	4b93      	ldr	r3, [pc, #588]	; (4fd8 <vendor_request_handler+0x614>)
    4d8a:	2001      	movs	r0, #1
    4d8c:	72d8      	strb	r0, [r3, #11]
		break;
    4d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case UBERTOOTH_SET_CLOCK:
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    4d90:	78ab      	ldrb	r3, [r5, #2]
    4d92:	7852      	ldrb	r2, [r2, #1]
    4d94:	041b      	lsls	r3, r3, #16
    4d96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4d9a:	782a      	ldrb	r2, [r5, #0]
    4d9c:	4313      	orrs	r3, r2
    4d9e:	78ea      	ldrb	r2, [r5, #3]
    4da0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		clkn = clock;
    4da4:	4a92      	ldr	r2, [pc, #584]	; (4ff0 <vendor_request_handler+0x62c>)
    4da6:	6013      	str	r3, [r2, #0]
    4da8:	e0a6      	b.n	4ef8 <vendor_request_handler+0x534>
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    4daa:	2300      	movs	r3, #0
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(int i=0; i < 10; i++) {
			afh_map[i] = data[i];
    4dac:	5ce9      	ldrb	r1, [r5, r3]
    4dae:	4a8d      	ldr	r2, [pc, #564]	; (4fe4 <vendor_request_handler+0x620>)
    4db0:	5499      	strb	r1, [r3, r2]
		clkn = clock;
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(int i=0; i < 10; i++) {
    4db2:	3301      	adds	r3, #1
    4db4:	2b0a      	cmp	r3, #10
    4db6:	d1f9      	bne.n	4dac <vendor_request_handler+0x3e8>
			afh_map[i] = data[i];
		}
		afh_enabled = 1;
    4db8:	4a8c      	ldr	r2, [pc, #560]	; (4fec <vendor_request_handler+0x628>)
    4dba:	2001      	movs	r0, #1
    4dbc:	7010      	strb	r0, [r2, #0]
		*data_len = 10;
    4dbe:	6023      	str	r3, [r4, #0]
		break;
    4dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    4dc2:	2300      	movs	r3, #0
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(int i=0; i < 10; i++) {
			afh_map[i] = 0;
    4dc4:	4987      	ldr	r1, [pc, #540]	; (4fe4 <vendor_request_handler+0x620>)
    4dc6:	2200      	movs	r2, #0
    4dc8:	545a      	strb	r2, [r3, r1]
		afh_enabled = 1;
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(int i=0; i < 10; i++) {
    4dca:	3301      	adds	r3, #1
    4dcc:	2b0a      	cmp	r3, #10
    4dce:	d1f9      	bne.n	4dc4 <vendor_request_handler+0x400>
			afh_map[i] = 0;
		}
		afh_enabled = 0;
    4dd0:	4986      	ldr	r1, [pc, #536]	; (4fec <vendor_request_handler+0x628>)
    4dd2:	700a      	strb	r2, [r1, #0]
    4dd4:	e703      	b.n	4bde <vendor_request_handler+0x21a>
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
    4dd6:	4b86      	ldr	r3, [pc, #536]	; (4ff0 <vendor_request_handler+0x62c>)
    4dd8:	6819      	ldr	r1, [r3, #0]
		for(int i=0; i < 4; i++) {
    4dda:	2300      	movs	r3, #0
    4ddc:	00da      	lsls	r2, r3, #3
			data[i] = (clock >> (8*i)) & 0xff;
    4dde:	fa21 f202 	lsr.w	r2, r1, r2
    4de2:	54ea      	strb	r2, [r5, r3]
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
		for(int i=0; i < 4; i++) {
    4de4:	3301      	adds	r3, #1
    4de6:	2b04      	cmp	r3, #4
    4de8:	d1f8      	bne.n	4ddc <vendor_request_handler+0x418>
			data[i] = (clock >> (8*i)) & 0xff;
		}
		*data_len = 4;
    4dea:	2304      	movs	r3, #4
    4dec:	e6f7      	b.n	4bde <vendor_request_handler+0x21a>
		break;

	case UBERTOOTH_TRIM_CLOCK:
		clk100ns_offset = (data[0] << 8) | (data[1] << 0);
    4dee:	7812      	ldrb	r2, [r2, #0]
    4df0:	786b      	ldrb	r3, [r5, #1]
    4df2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4df6:	4a7a      	ldr	r2, [pc, #488]	; (4fe0 <vendor_request_handler+0x61c>)
    4df8:	8013      	strh	r3, [r2, #0]
    4dfa:	e10c      	b.n	5016 <vendor_request_handler+0x652>
		break;

	case UBERTOOTH_FIX_CLOCK_DRIFT:
		clk_drift_ppm += (int16_t)(data[0] << 8) | (data[1] << 0);
    4dfc:	4b7d      	ldr	r3, [pc, #500]	; (4ff4 <vendor_request_handler+0x630>)
    4dfe:	7810      	ldrb	r0, [r2, #0]
    4e00:	7852      	ldrb	r2, [r2, #1]
    4e02:	8819      	ldrh	r1, [r3, #0]
    4e04:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4e08:	440a      	add	r2, r1
    4e0a:	b292      	uxth	r2, r2
    4e0c:	801a      	strh	r2, [r3, #0]

		// Too slow
		if (clk_drift_ppm < 0) {
    4e0e:	881a      	ldrh	r2, [r3, #0]
    4e10:	4879      	ldr	r0, [pc, #484]	; (4ff8 <vendor_request_handler+0x634>)
    4e12:	b212      	sxth	r2, r2
    4e14:	2a00      	cmp	r2, #0
    4e16:	4a79      	ldr	r2, [pc, #484]	; (4ffc <vendor_request_handler+0x638>)
    4e18:	da07      	bge.n	4e2a <vendor_request_handler+0x466>
			clk_drift_correction = 320 / (uint16_t)(-clk_drift_ppm);
    4e1a:	881b      	ldrh	r3, [r3, #0]
    4e1c:	f44f 71a0 	mov.w	r1, #320	; 0x140
    4e20:	425b      	negs	r3, r3
    4e22:	b29b      	uxth	r3, r3
    4e24:	fb91 f3f3 	sdiv	r3, r1, r3
    4e28:	e00a      	b.n	4e40 <vendor_request_handler+0x47c>
			clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
		}
		// Too fast
		else if (clk_drift_ppm > 0) {
    4e2a:	8819      	ldrh	r1, [r3, #0]
    4e2c:	b209      	sxth	r1, r1
    4e2e:	2900      	cmp	r1, #0
    4e30:	dd0d      	ble.n	4e4e <vendor_request_handler+0x48a>
			clk_drift_correction = 320 / clk_drift_ppm;
    4e32:	881b      	ldrh	r3, [r3, #0]
    4e34:	f44f 71a0 	mov.w	r1, #320	; 0x140
    4e38:	b21b      	sxth	r3, r3
    4e3a:	fb91 f3f3 	sdiv	r3, r1, r3
    4e3e:	b29b      	uxth	r3, r3
    4e40:	8013      	strh	r3, [r2, #0]
			clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    4e42:	4b6f      	ldr	r3, [pc, #444]	; (5000 <vendor_request_handler+0x63c>)
    4e44:	6819      	ldr	r1, [r3, #0]
    4e46:	8813      	ldrh	r3, [r2, #0]
    4e48:	b29b      	uxth	r3, r3
    4e4a:	440b      	add	r3, r1
    4e4c:	e001      	b.n	4e52 <vendor_request_handler+0x48e>
		}
		// Don't trim
		else {
			clk_drift_correction = 0;
    4e4e:	2300      	movs	r3, #0
    4e50:	8013      	strh	r3, [r2, #0]
			clkn_next_drift_fix = 0;
    4e52:	6003      	str	r3, [r0, #0]
    4e54:	e0df      	b.n	5016 <vendor_request_handler+0x652>
		break;

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;

		do_hop = 0;
    4e56:	4b60      	ldr	r3, [pc, #384]	; (4fd8 <vendor_request_handler+0x614>)
		}

		break;

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;
    4e58:	2200      	movs	r2, #0
    4e5a:	6022      	str	r2, [r4, #0]

		do_hop = 0;
    4e5c:	72da      	strb	r2, [r3, #11]
		hop_mode = HOP_BTLE;
    4e5e:	2203      	movs	r2, #3
    4e60:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_BT_FOLLOW_LE;
    4e62:	2209      	movs	r2, #9
    4e64:	e045      	b.n	4ef2 <vendor_request_handler+0x52e>
		break;

	case UBERTOOTH_BTLE_BOSS_MASTER:
		*data_len = 0;

		do_hop = 0;
    4e66:	4b5c      	ldr	r3, [pc, #368]	; (4fd8 <vendor_request_handler+0x614>)
		queue_init();
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_BTLE_BOSS_MASTER:
		*data_len = 0;
    4e68:	2200      	movs	r2, #0
    4e6a:	6022      	str	r2, [r4, #0]

		do_hop = 0;
    4e6c:	72da      	strb	r2, [r3, #11]
		hop_mode = HOP_BTLE;
    4e6e:	2203      	movs	r2, #3
    4e70:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_BOSS_MASTER_LE;
    4e72:	2212      	movs	r2, #18
    4e74:	e03d      	b.n	4ef2 <vendor_request_handler+0x52e>
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    4e76:	2300      	movs	r3, #0
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(int i=0; i < 4; i++) {
			data[i] = (le.access_address >> (8*i)) & 0xff;
    4e78:	4a62      	ldr	r2, [pc, #392]	; (5004 <vendor_request_handler+0x640>)
    4e7a:	00d9      	lsls	r1, r3, #3
    4e7c:	6852      	ldr	r2, [r2, #4]
    4e7e:	40ca      	lsrs	r2, r1
    4e80:	54ea      	strb	r2, [r5, r3]
		queue_init();
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(int i=0; i < 4; i++) {
    4e82:	3301      	adds	r3, #1
    4e84:	2b04      	cmp	r3, #4
    4e86:	d1f7      	bne.n	4e78 <vendor_request_handler+0x4b4>
    4e88:	e7af      	b.n	4dea <vendor_request_handler+0x426>
		}
		*data_len = 4;
		break;

	case UBERTOOTH_SET_ACCESS_ADDRESS:
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    4e8a:	7893      	ldrb	r3, [r2, #2]
    4e8c:	7850      	ldrb	r0, [r2, #1]
    4e8e:	041b      	lsls	r3, r3, #16
    4e90:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    4e94:	7810      	ldrb	r0, [r2, #0]
    4e96:	4303      	orrs	r3, r0
    4e98:	78d0      	ldrb	r0, [r2, #3]
    4e9a:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
    4e9e:	f7ff fb37 	bl	4510 <le_set_access_address>
		le.target_set = 1;
    4ea2:	2001      	movs	r0, #1
    4ea4:	4b57      	ldr	r3, [pc, #348]	; (5004 <vendor_request_handler+0x640>)
    4ea6:	e08e      	b.n	4fc6 <vendor_request_handler+0x602>
		break;

	case UBERTOOTH_DO_SOMETHING_REPLY:
		// after you do something, tell me what you did!
		// don't commit here please
		data[0] = 0x13;
    4ea8:	2313      	movs	r3, #19
    4eaa:	7013      	strb	r3, [r2, #0]
		data[1] = 0x37;
    4eac:	2337      	movs	r3, #55	; 0x37
    4eae:	706b      	strb	r3, [r5, #1]
    4eb0:	e02e      	b.n	4f10 <vendor_request_handler+0x54c>
		*data_len = 2;
		break;

	case UBERTOOTH_GET_CRC_VERIFY:
		data[0] = le.crc_verify ? 1 : 0;
    4eb2:	4b54      	ldr	r3, [pc, #336]	; (5004 <vendor_request_handler+0x640>)
    4eb4:	695b      	ldr	r3, [r3, #20]
    4eb6:	3300      	adds	r3, #0
    4eb8:	bf18      	it	ne
    4eba:	2301      	movne	r3, #1
    4ebc:	e6e5      	b.n	4c8a <vendor_request_handler+0x2c6>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_CRC_VERIFY:
		le.crc_verify = request_params[0] ? 1 : 0;
    4ebe:	880b      	ldrh	r3, [r1, #0]
    4ec0:	4a50      	ldr	r2, [pc, #320]	; (5004 <vendor_request_handler+0x640>)
    4ec2:	3300      	adds	r3, #0
    4ec4:	bf18      	it	ne
    4ec6:	2301      	movne	r3, #1
    4ec8:	6153      	str	r3, [r2, #20]
    4eca:	e0a4      	b.n	5016 <vendor_request_handler+0x652>
		break;

	case UBERTOOTH_POLL:
		p = dequeue();
    4ecc:	f002 faee 	bl	74ac <dequeue>
		if (p != NULL) {
    4ed0:	4601      	mov	r1, r0
    4ed2:	b128      	cbz	r0, 4ee0 <vendor_request_handler+0x51c>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    4ed4:	4628      	mov	r0, r5
    4ed6:	2240      	movs	r2, #64	; 0x40
    4ed8:	f004 f912 	bl	9100 <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    4edc:	2340      	movs	r3, #64	; 0x40
    4ede:	e67e      	b.n	4bde <vendor_request_handler+0x21a>
		} else {
			data[0] = 0;
    4ee0:	7028      	strb	r0, [r5, #0]
			*data_len = 1;
    4ee2:	2001      	movs	r0, #1
    4ee4:	6020      	str	r0, [r4, #0]
    4ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		break;

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;

		hop_mode = HOP_NONE;
    4ee8:	4b3b      	ldr	r3, [pc, #236]	; (4fd8 <vendor_request_handler+0x614>)
			*data_len = 1;
		}
		break;

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;
    4eea:	2200      	movs	r2, #0
    4eec:	6022      	str	r2, [r4, #0]

		hop_mode = HOP_NONE;
    4eee:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_BT_PROMISC_LE;
    4ef0:	220a      	movs	r2, #10
    4ef2:	749a      	strb	r2, [r3, #18]

		queue_init();
    4ef4:	f002 fab2 	bl	745c <queue_init>
		cs_threshold_calc_and_set(channel);
    4ef8:	4b42      	ldr	r3, [pc, #264]	; (5004 <vendor_request_handler+0x640>)
    4efa:	8818      	ldrh	r0, [r3, #0]
    4efc:	b280      	uxth	r0, r0
    4efe:	f002 fb9b 	bl	7638 <cs_threshold_calc_and_set>
    4f02:	e088      	b.n	5016 <vendor_request_handler+0x652>
		break;

	case UBERTOOTH_READ_REGISTER:
		reg_val = cc2400_get(request_params[0]);
    4f04:	7808      	ldrb	r0, [r1, #0]
    4f06:	f003 fb25 	bl	8554 <cc2400_get>
		data[0] = (reg_val >> 8) & 0xff;
    4f0a:	0a03      	lsrs	r3, r0, #8
    4f0c:	702b      	strb	r3, [r5, #0]
		data[1] = reg_val & 0xff;
    4f0e:	7068      	strb	r0, [r5, #1]
		*data_len = 2;
    4f10:	2302      	movs	r3, #2
    4f12:	e664      	b.n	4bde <vendor_request_handler+0x21a>
		break;

	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    4f14:	7808      	ldrb	r0, [r1, #0]
    4f16:	8849      	ldrh	r1, [r1, #2]
    4f18:	f003 fb25 	bl	8566 <cc2400_set>
    4f1c:	e07b      	b.n	5016 <vendor_request_handler+0x652>
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    4f1e:	2300      	movs	r3, #0
	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
		break;

	case UBERTOOTH_WRITE_REGISTERS:
		for(i=0; i<request_params[0]; i++) {
    4f20:	8832      	ldrh	r2, [r6, #0]
    4f22:	1c5c      	adds	r4, r3, #1
    4f24:	b2db      	uxtb	r3, r3
    4f26:	4293      	cmp	r3, r2
    4f28:	d275      	bcs.n	5016 <vendor_request_handler+0x652>
			reg_val = (data[(i*3)+1] << 8) | data[(i*3)+2];
    4f2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4f2e:	18ea      	adds	r2, r5, r3
    4f30:	7851      	ldrb	r1, [r2, #1]
    4f32:	7892      	ldrb	r2, [r2, #2]
			cc2400_set(data[i*3], reg_val);
    4f34:	5ce8      	ldrb	r0, [r5, r3]
    4f36:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    4f3a:	f003 fb14 	bl	8566 <cc2400_set>
    4f3e:	4623      	mov	r3, r4
    4f40:	e7ee      	b.n	4f20 <vendor_request_handler+0x55c>
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    4f42:	2600      	movs	r6, #0
    4f44:	b2f7      	uxtb	r7, r6
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
			reg_val = cc2400_get(i);
    4f46:	4638      	mov	r0, r7
    4f48:	f003 fb04 	bl	8554 <cc2400_get>
    4f4c:	3601      	adds	r6, #1
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4f4e:	0a03      	lsrs	r3, r0, #8
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4f50:	2e2e      	cmp	r6, #46	; 0x2e
			reg_val = cc2400_get(i);
			data[i*3] = i;
    4f52:	702f      	strb	r7, [r5, #0]
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4f54:	706b      	strb	r3, [r5, #1]
			data[(i*3)+2] = reg_val & 0xff;
    4f56:	70a8      	strb	r0, [r5, #2]
    4f58:	f105 0503 	add.w	r5, r5, #3
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4f5c:	d1f2      	bne.n	4f44 <vendor_request_handler+0x580>
			reg_val = cc2400_get(i);
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
			data[(i*3)+2] = reg_val & 0xff;
		}
		*data_len = MAX_READ_REG*3;
    4f5e:	2387      	movs	r3, #135	; 0x87
    4f60:	e63d      	b.n	4bde <vendor_request_handler+0x21a>
		break;

	case UBERTOOTH_TX_GENERIC_PACKET:
		i = 7 + data[6];
    4f62:	7992      	ldrb	r2, [r2, #6]
		memcpy(&tx_pkt, data, i);
    4f64:	4828      	ldr	r0, [pc, #160]	; (5008 <vendor_request_handler+0x644>)
		}
		*data_len = MAX_READ_REG*3;
		break;

	case UBERTOOTH_TX_GENERIC_PACKET:
		i = 7 + data[6];
    4f66:	3207      	adds	r2, #7
		memcpy(&tx_pkt, data, i);
    4f68:	b2d2      	uxtb	r2, r2
    4f6a:	4629      	mov	r1, r5
    4f6c:	f004 f8c8 	bl	9100 <memcpy>
		//tx_pkt.channel = data[4] << 8 | data[5];
		requested_mode = MODE_TX_GENERIC;
    4f70:	2210      	movs	r2, #16
    4f72:	4b19      	ldr	r3, [pc, #100]	; (4fd8 <vendor_request_handler+0x614>)
    4f74:	749a      	strb	r2, [r3, #18]
    4f76:	e631      	b.n	4bdc <vendor_request_handler+0x218>
		*data_len = 0;
		break;

	case UBERTOOTH_BTLE_SLAVE:
		memcpy(slave_mac_address, data, 6);
    4f78:	4c17      	ldr	r4, [pc, #92]	; (4fd8 <vendor_request_handler+0x614>)
    4f7a:	4611      	mov	r1, r2
    4f7c:	f104 0020 	add.w	r0, r4, #32
    4f80:	2206      	movs	r2, #6
    4f82:	f004 f8bd 	bl	9100 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    4f86:	230c      	movs	r3, #12
    4f88:	e007      	b.n	4f9a <vendor_request_handler+0x5d6>
		break;

	case UBERTOOTH_BTLE_BOSS_SLAVE:
		memcpy(slave_mac_address, data, 6);
    4f8a:	4c13      	ldr	r4, [pc, #76]	; (4fd8 <vendor_request_handler+0x614>)
    4f8c:	4611      	mov	r1, r2
    4f8e:	f104 0020 	add.w	r0, r4, #32
    4f92:	2206      	movs	r2, #6
    4f94:	f004 f8b4 	bl	9100 <memcpy>
		requested_mode = MODE_BOSS_SLAVE_LE;
    4f98:	2311      	movs	r3, #17
    4f9a:	74a3      	strb	r3, [r4, #18]
    4f9c:	e03b      	b.n	5016 <vendor_request_handler+0x652>
		break;

	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    4f9e:	7952      	ldrb	r2, [r2, #5]
    4fa0:	4b18      	ldr	r3, [pc, #96]	; (5004 <vendor_request_handler+0x640>)
		le.target[1] = data[4];
		le.target[2] = data[3];
		le.target[3] = data[2];
		le.target[4] = data[1];
		le.target[5] = data[0];
		le.target_set = 1;
    4fa2:	2001      	movs	r0, #1
		break;

	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    4fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		le.target[1] = data[4];
    4fa8:	792a      	ldrb	r2, [r5, #4]
    4faa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		le.target[2] = data[3];
    4fae:	78ea      	ldrb	r2, [r5, #3]
    4fb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		le.target[3] = data[2];
    4fb4:	78aa      	ldrb	r2, [r5, #2]
    4fb6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		le.target[4] = data[1];
    4fba:	786a      	ldrb	r2, [r5, #1]
    4fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		le.target[5] = data[0];
    4fc0:	782a      	ldrb	r2, [r5, #0]
    4fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		le.target_set = 1;
    4fc6:	6418      	str	r0, [r3, #64]	; 0x40
		break;
    4fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

#ifdef TX_ENABLE
	case UBERTOOTH_JAM_MODE:
		jam_mode = request_params[0];
    4fca:	780a      	ldrb	r2, [r1, #0]
    4fcc:	4b02      	ldr	r3, [pc, #8]	; (4fd8 <vendor_request_handler+0x614>)
    4fce:	74da      	strb	r2, [r3, #19]
    4fd0:	e021      	b.n	5016 <vendor_request_handler+0x652>
    4fd2:	bf00      	nop
    4fd4:	10000bb8 	.word	0x10000bb8
    4fd8:	10000a1c 	.word	0x10000a1c
    4fdc:	2009c098 	.word	0x2009c098
    4fe0:	10000d12 	.word	0x10000d12
    4fe4:	10000bab 	.word	0x10000bab
    4fe8:	10000ba9 	.word	0x10000ba9
    4fec:	10001047 	.word	0x10001047
    4ff0:	10000bc4 	.word	0x10000bc4
    4ff4:	10001044 	.word	0x10001044
    4ff8:	1000107c 	.word	0x1000107c
    4ffc:	10000bc0 	.word	0x10000bc0
    5000:	10000bbc 	.word	0x10000bbc
    5004:	10000448 	.word	0x10000448
    5008:	10000bc8 	.word	0x10000bc8
	case UBERTOOTH_EGO:
#ifndef TX_ENABLE
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
    500c:	4b04      	ldr	r3, [pc, #16]	; (5020 <vendor_request_handler+0x65c>)
    500e:	220d      	movs	r2, #13
    5010:	749a      	strb	r2, [r3, #18]
		ego_mode = request_params[0];
    5012:	780a      	ldrb	r2, [r1, #0]
    5014:	751a      	strb	r2, [r3, #20]
		break;

	default:
		return 0;
	}
	return 1;
    5016:	2001      	movs	r0, #1
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
		ego_mode = request_params[0];
		break;
    5018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
			cc2400_set(FREND, 8 | request_params[0]);
		} else {
			return 0;
    501a:	2000      	movs	r0, #0

	default:
		return 0;
	}
	return 1;
}
    501c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    501e:	bf00      	nop
    5020:	10000a1c 	.word	0x10000a1c

00005024 <msleep.constprop.3>:
 * Sleep (busy wait) for 'millis' milliseconds
 * Needs clkn. Be sure to call clkn_init() before using it.
 */
static void msleep(uint32_t millis)
{
	uint32_t now = (clkn & 0xffffff);
    5024:	4a05      	ldr	r2, [pc, #20]	; (503c <msleep.constprop.3+0x18>)
    5026:	6813      	ldr	r3, [r2, #0]
    5028:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	uint32_t stop_at = now + millis * 10000 / 3125; // millis -> clkn ticks
    502c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
	// handle clkn overflow
	if (stop_at >= ((uint32_t)1<<28)) {
		stop_at -= ((uint32_t)1<<28);
		while ((clkn & 0xffffff) >= now || (clkn & 0xffffff) < stop_at);
	} else {
		while ((clkn & 0xffffff) < stop_at);
    5030:	6811      	ldr	r1, [r2, #0]
    5032:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    5036:	4299      	cmp	r1, r3
    5038:	d3fa      	bcc.n	5030 <msleep.constprop.3+0xc>
	}
}
    503a:	4770      	bx	lr
    503c:	10000bc4 	.word	0x10000bc4

00005040 <enqueue_with_ts>:

	return 1;
}

int enqueue_with_ts(uint8_t type, uint8_t* buf, uint32_t ts)
{
    5040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5044:	4606      	mov	r6, r0
    5046:	460f      	mov	r7, r1
    5048:	4690      	mov	r8, r2
	usb_pkt_rx* f = usb_enqueue();
    504a:	f002 fa15 	bl	7478 <usb_enqueue>
    504e:	4d0f      	ldr	r5, [pc, #60]	; (508c <enqueue_with_ts+0x4c>)

	/* fail if queue is full */
	if (f == NULL) {
    5050:	4604      	mov	r4, r0
    5052:	b928      	cbnz	r0, 5060 <enqueue_with_ts+0x20>
		status |= FIFO_OVERFLOW;
    5054:	786b      	ldrb	r3, [r5, #1]
    5056:	f043 0304 	orr.w	r3, r3, #4
    505a:	706b      	strb	r3, [r5, #1]
		return 0;
    505c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	f->pkt_type = type;

	f->clkn_high = 0;
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    5060:	4b0b      	ldr	r3, [pc, #44]	; (5090 <enqueue_with_ts+0x50>)
	if (f == NULL) {
		status |= FIFO_OVERFLOW;
		return 0;
	}

	f->pkt_type = type;
    5062:	7006      	strb	r6, [r0, #0]

	f->clkn_high = 0;
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    5064:	881b      	ldrh	r3, [r3, #0]
		return 0;
	}

	f->pkt_type = type;

	f->clkn_high = 0;
    5066:	2600      	movs	r6, #0
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    5068:	3b62      	subs	r3, #98	; 0x62
		return 0;
	}

	f->pkt_type = type;

	f->clkn_high = 0;
    506a:	70c6      	strb	r6, [r0, #3]
	f->clk100ns = ts;
    506c:	f8c0 8004 	str.w	r8, [r0, #4]

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    5070:	7083      	strb	r3, [r0, #2]
	f->rssi_avg = 0;
    5072:	7286      	strb	r6, [r0, #10]
	f->rssi_count = 0;
    5074:	72c6      	strb	r6, [r0, #11]

	memcpy(f->data, buf, DMA_SIZE);
    5076:	4639      	mov	r1, r7
    5078:	2232      	movs	r2, #50	; 0x32
    507a:	300e      	adds	r0, #14
    507c:	f004 f840 	bl	9100 <memcpy>

	f->status = status;
    5080:	786b      	ldrb	r3, [r5, #1]
	status = 0;
    5082:	706e      	strb	r6, [r5, #1]
	f->rssi_avg = 0;
	f->rssi_count = 0;

	memcpy(f->data, buf, DMA_SIZE);

	f->status = status;
    5084:	7063      	strb	r3, [r4, #1]
	status = 0;

	return 1;
    5086:	2001      	movs	r0, #1
}
    5088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    508c:	10000a1c 	.word	0x10000a1c
    5090:	10000448 	.word	0x10000448

00005094 <TIMER0_IRQHandler>:
	return 1;
}

/* Update CLKN. */
void TIMER0_IRQHandler()
{
    5094:	b570      	push	{r4, r5, r6, lr}
	if (T0IR & TIR_MR0_Interrupt) {
    5096:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    509a:	681b      	ldr	r3, [r3, #0]
    509c:	07db      	lsls	r3, r3, #31
    509e:	d57d      	bpl.n	519c <TIMER0_IRQHandler+0x108>

		clkn += clkn_offset + 1;
    50a0:	493f      	ldr	r1, [pc, #252]	; (51a0 <TIMER0_IRQHandler+0x10c>)
    50a2:	4b40      	ldr	r3, [pc, #256]	; (51a4 <TIMER0_IRQHandler+0x110>)
    50a4:	6808      	ldr	r0, [r1, #0]
    50a6:	681a      	ldr	r2, [r3, #0]
    50a8:	4402      	add	r2, r0
    50aa:	3201      	adds	r2, #1
    50ac:	601a      	str	r2, [r3, #0]
		clkn_offset = 0;
    50ae:	2200      	movs	r2, #0
    50b0:	600a      	str	r2, [r1, #0]
		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    50b2:	493d      	ldr	r1, [pc, #244]	; (51a8 <TIMER0_IRQHandler+0x114>)
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    50b4:	6818      	ldr	r0, [r3, #0]
    50b6:	4a3d      	ldr	r2, [pc, #244]	; (51ac <TIMER0_IRQHandler+0x118>)

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    50b8:	7a8e      	ldrb	r6, [r1, #10]
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    50ba:	69d4      	ldr	r4, [r2, #28]
    50bc:	460d      	mov	r5, r1

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    50be:	b116      	cbz	r6, 50c6 <TIMER0_IRQHandler+0x32>
    50c0:	7a8e      	ldrb	r6, [r1, #10]
    50c2:	2e01      	cmp	r6, #1
    50c4:	d105      	bne.n	50d2 <TIMER0_IRQHandler+0x3e>
			if ((clkn & 0x7f) == 0)
    50c6:	681a      	ldr	r2, [r3, #0]
    50c8:	0656      	lsls	r6, r2, #25
    50ca:	d135      	bne.n	5138 <TIMER0_IRQHandler+0xa4>
				do_hop = 1;
    50cc:	2201      	movs	r2, #1
    50ce:	72ea      	strb	r2, [r5, #11]
    50d0:	e032      	b.n	5138 <TIMER0_IRQHandler+0xa4>
		}
		/* BLUETOOTH -> 1600 Hz */
		else if (hop_mode == HOP_BLUETOOTH) {
    50d2:	7a8d      	ldrb	r5, [r1, #10]
    50d4:	2d02      	cmp	r5, #2
    50d6:	d103      	bne.n	50e0 <TIMER0_IRQHandler+0x4c>
			if ((clkn & 0x1) == 0)
    50d8:	681a      	ldr	r2, [r3, #0]
    50da:	07d4      	lsls	r4, r2, #31
    50dc:	d42c      	bmi.n	5138 <TIMER0_IRQHandler+0xa4>
    50de:	e029      	b.n	5134 <TIMER0_IRQHandler+0xa0>
				do_hop = 1;
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
    50e0:	7a8d      	ldrb	r5, [r1, #10]
    50e2:	2d03      	cmp	r5, #3
    50e4:	d11a      	bne.n	511c <TIMER0_IRQHandler+0x88>
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    50e6:	7e15      	ldrb	r5, [r2, #24]
    50e8:	2d03      	cmp	r5, #3
    50ea:	d125      	bne.n	5138 <TIMER0_IRQHandler+0xa4>
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    50ec:	1b00      	subs	r0, r0, r4
				do_hop = 1;
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    50ee:	0780      	lsls	r0, r0, #30
    50f0:	d122      	bne.n	5138 <TIMER0_IRQHandler+0xa4>
				--le.interval_timer;
    50f2:	8c10      	ldrh	r0, [r2, #32]
    50f4:	3801      	subs	r0, #1
    50f6:	b280      	uxth	r0, r0
    50f8:	8410      	strh	r0, [r2, #32]
				if (le.interval_timer == 0) {
    50fa:	8c10      	ldrh	r0, [r2, #32]
    50fc:	b280      	uxth	r0, r0
    50fe:	b940      	cbnz	r0, 5112 <TIMER0_IRQHandler+0x7e>
					do_hop = 1;
    5100:	2001      	movs	r0, #1
    5102:	72c8      	strb	r0, [r1, #11]
					++le.conn_count;
    5104:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    5106:	4401      	add	r1, r0
    5108:	b289      	uxth	r1, r1
    510a:	8491      	strh	r1, [r2, #36]	; 0x24
					le.interval_timer = le.conn_interval;
    510c:	8c51      	ldrh	r1, [r2, #34]	; 0x22
    510e:	8411      	strh	r1, [r2, #32]
    5110:	e012      	b.n	5138 <TIMER0_IRQHandler+0xa4>
				} else {
					TXLED_CLR; // hack!
    5112:	4a27      	ldr	r2, [pc, #156]	; (51b0 <TIMER0_IRQHandler+0x11c>)
    5114:	f44f 7180 	mov.w	r1, #256	; 0x100
    5118:	6011      	str	r1, [r2, #0]
    511a:	e00d      	b.n	5138 <TIMER0_IRQHandler+0xa4>
				}
			}
		}
		else if (hop_mode == HOP_AFH) {
    511c:	7a88      	ldrb	r0, [r1, #10]
    511e:	2805      	cmp	r0, #5
    5120:	d10a      	bne.n	5138 <TIMER0_IRQHandler+0xa4>
			if( (last_hop + hop_timeout) == clkn ) {
    5122:	4824      	ldr	r0, [pc, #144]	; (51b4 <TIMER0_IRQHandler+0x120>)
    5124:	6800      	ldr	r0, [r0, #0]
    5126:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
    512a:	681c      	ldr	r4, [r3, #0]
    512c:	b292      	uxth	r2, r2
    512e:	4402      	add	r2, r0
    5130:	42a2      	cmp	r2, r4
    5132:	d101      	bne.n	5138 <TIMER0_IRQHandler+0xa4>
				do_hop = 1;
    5134:	2201      	movs	r2, #1
    5136:	72ca      	strb	r2, [r1, #11]
			}
		}

		// Fix linear clock drift deviation
		if(clkn_next_drift_fix != 0 && clk100ns_offset == 0) {
    5138:	491f      	ldr	r1, [pc, #124]	; (51b8 <TIMER0_IRQHandler+0x124>)
    513a:	4a20      	ldr	r2, [pc, #128]	; (51bc <TIMER0_IRQHandler+0x128>)
    513c:	6808      	ldr	r0, [r1, #0]
    513e:	b1c0      	cbz	r0, 5172 <TIMER0_IRQHandler+0xde>
    5140:	8810      	ldrh	r0, [r2, #0]
    5142:	b280      	uxth	r0, r0
    5144:	b9a8      	cbnz	r0, 5172 <TIMER0_IRQHandler+0xde>
			if(clkn >= clkn_next_drift_fix) {
    5146:	681c      	ldr	r4, [r3, #0]
    5148:	6808      	ldr	r0, [r1, #0]
    514a:	4284      	cmp	r4, r0
    514c:	d311      	bcc.n	5172 <TIMER0_IRQHandler+0xde>

				// Too fast
				if(clk_drift_ppm >= 0) {
    514e:	481c      	ldr	r0, [pc, #112]	; (51c0 <TIMER0_IRQHandler+0x12c>)
    5150:	8800      	ldrh	r0, [r0, #0]
    5152:	b200      	sxth	r0, r0
    5154:	2800      	cmp	r0, #0
					clk100ns_offset = 1;
				}

				// Too slow
				else {
					clk100ns_offset = 6249;
    5156:	bfb4      	ite	lt
    5158:	f641 0069 	movwlt	r0, #6249	; 0x1869
		if(clkn_next_drift_fix != 0 && clk100ns_offset == 0) {
			if(clkn >= clkn_next_drift_fix) {

				// Too fast
				if(clk_drift_ppm >= 0) {
					clk100ns_offset = 1;
    515c:	2001      	movge	r0, #1
				}

				// Too slow
				else {
					clk100ns_offset = 6249;
    515e:	8010      	strh	r0, [r2, #0]
				}
				clkn_last_drift_fix = clkn;
    5160:	681c      	ldr	r4, [r3, #0]
    5162:	4818      	ldr	r0, [pc, #96]	; (51c4 <TIMER0_IRQHandler+0x130>)
    5164:	6004      	str	r4, [r0, #0]
				clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    5166:	6804      	ldr	r4, [r0, #0]
    5168:	4817      	ldr	r0, [pc, #92]	; (51c8 <TIMER0_IRQHandler+0x134>)
    516a:	8800      	ldrh	r0, [r0, #0]
    516c:	b280      	uxth	r0, r0
    516e:	4420      	add	r0, r4
    5170:	6008      	str	r0, [r1, #0]
			}
		}

		// Negative clock correction
		if(clk100ns_offset > 3124)
    5172:	f640 4034 	movw	r0, #3124	; 0xc34
    5176:	8811      	ldrh	r1, [r2, #0]
    5178:	b289      	uxth	r1, r1
    517a:	4281      	cmp	r1, r0
			clkn += 2;
    517c:	bf82      	ittt	hi
    517e:	6819      	ldrhi	r1, [r3, #0]
    5180:	3102      	addhi	r1, #2
    5182:	6019      	strhi	r1, [r3, #0]

		T0MR0 = 3124 + clk100ns_offset;
    5184:	8813      	ldrh	r3, [r2, #0]
    5186:	4911      	ldr	r1, [pc, #68]	; (51cc <TIMER0_IRQHandler+0x138>)
    5188:	b29b      	uxth	r3, r3
    518a:	f603 4334 	addw	r3, r3, #3124	; 0xc34
    518e:	600b      	str	r3, [r1, #0]
		clk100ns_offset = 0;
    5190:	2300      	movs	r3, #0
    5192:	8013      	strh	r3, [r2, #0]

		/* Ack interrupt */
		T0IR = TIR_MR0_Interrupt;
    5194:	2201      	movs	r2, #1
    5196:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    519a:	601a      	str	r2, [r3, #0]
    519c:	bd70      	pop	{r4, r5, r6, pc}
    519e:	bf00      	nop
    51a0:	10000bb8 	.word	0x10000bb8
    51a4:	10000bc4 	.word	0x10000bc4
    51a8:	10000a1c 	.word	0x10000a1c
    51ac:	10000448 	.word	0x10000448
    51b0:	2009c03c 	.word	0x2009c03c
    51b4:	10000ba0 	.word	0x10000ba0
    51b8:	1000107c 	.word	0x1000107c
    51bc:	10000d12 	.word	0x10000d12
    51c0:	10001044 	.word	0x10001044
    51c4:	10000bbc 	.word	0x10000bbc
    51c8:	10000bc0 	.word	0x10000bc0
    51cc:	40004018 	.word	0x40004018

000051d0 <EINT3_IRQHandler>:
/* EINT3 handler is also defined in ubertooth.c for TC13BADGE. */
#ifndef TC13BADGE
void EINT3_IRQHandler()
{
	/* TODO - check specific source of shared interrupt */
	IO2IntClr   = PIN_GIO6; // clear interrupt
    51d0:	4b08      	ldr	r3, [pc, #32]	; (51f4 <EINT3_IRQHandler+0x24>)
    51d2:	2204      	movs	r2, #4
    51d4:	601a      	str	r2, [r3, #0]
	DIO_SSEL_CLR;           // enable SPI
    51d6:	4b08      	ldr	r3, [pc, #32]	; (51f8 <EINT3_IRQHandler+0x28>)
    51d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    51dc:	601a      	str	r2, [r3, #0]
	cs_trigger  = 1;        // signal trigger
    51de:	4b07      	ldr	r3, [pc, #28]	; (51fc <EINT3_IRQHandler+0x2c>)
    51e0:	2201      	movs	r2, #1
    51e2:	701a      	strb	r2, [r3, #0]
	if (hop_mode == HOP_BLUETOOTH)
    51e4:	4b06      	ldr	r3, [pc, #24]	; (5200 <EINT3_IRQHandler+0x30>)
    51e6:	7a9a      	ldrb	r2, [r3, #10]
    51e8:	2a02      	cmp	r2, #2
		dma_discard = 0;
    51ea:	bf04      	itt	eq
    51ec:	2200      	moveq	r2, #0
    51ee:	741a      	strbeq	r2, [r3, #16]
    51f0:	4770      	bx	lr
    51f2:	bf00      	nop
    51f4:	400280ac 	.word	0x400280ac
    51f8:	2009c09c 	.word	0x2009c09c
    51fc:	100010bd 	.word	0x100010bd
    5200:	10000a1c 	.word	0x10000a1c

00005204 <DMA_IRQHandler>:
		while ((clkn & 0xffffff) < stop_at);
	}
}

void DMA_IRQHandler()
{
    5204:	b510      	push	{r4, lr}
	if ( mode == MODE_RX_SYMBOLS
    5206:	4b2b      	ldr	r3, [pc, #172]	; (52b4 <DMA_IRQHandler+0xb0>)
    5208:	7c5a      	ldrb	r2, [r3, #17]
    520a:	2a01      	cmp	r2, #1
    520c:	d017      	beq.n	523e <DMA_IRQHandler+0x3a>
	   || mode == MODE_BT_FOLLOW
    520e:	7c5a      	ldrb	r2, [r3, #17]
    5210:	2a08      	cmp	r2, #8
    5212:	d014      	beq.n	523e <DMA_IRQHandler+0x3a>
	   || mode == MODE_SPECAN
    5214:	7c5a      	ldrb	r2, [r3, #17]
    5216:	2a04      	cmp	r2, #4
    5218:	d011      	beq.n	523e <DMA_IRQHandler+0x3a>
	   || mode == MODE_BT_FOLLOW_LE
    521a:	7c5a      	ldrb	r2, [r3, #17]
    521c:	2a09      	cmp	r2, #9
    521e:	d00e      	beq.n	523e <DMA_IRQHandler+0x3a>
	   || mode == MODE_BOSS_SLAVE_LE
    5220:	7c5a      	ldrb	r2, [r3, #17]
    5222:	2a11      	cmp	r2, #17
    5224:	d00b      	beq.n	523e <DMA_IRQHandler+0x3a>
	   || mode == MODE_BT_PROMISC_LE
    5226:	7c5a      	ldrb	r2, [r3, #17]
    5228:	2a0a      	cmp	r2, #10
    522a:	d008      	beq.n	523e <DMA_IRQHandler+0x3a>
	   || mode == MODE_BT_SLAVE_LE
    522c:	7c5a      	ldrb	r2, [r3, #17]
    522e:	2a0c      	cmp	r2, #12
    5230:	d005      	beq.n	523e <DMA_IRQHandler+0x3a>
	   || mode == MODE_BOSS_MASTER_LE
    5232:	7c5a      	ldrb	r2, [r3, #17]
    5234:	2a12      	cmp	r2, #18
    5236:	d002      	beq.n	523e <DMA_IRQHandler+0x3a>
	   || mode == MODE_RX_GENERIC)
    5238:	7c5a      	ldrb	r2, [r3, #17]
    523a:	2a0f      	cmp	r2, #15
    523c:	d139      	bne.n	52b2 <DMA_IRQHandler+0xae>
	{
		/* interrupt on channel 0 */
		if (DMACIntStat & (1 << 0)) {
    523e:	4a1e      	ldr	r2, [pc, #120]	; (52b8 <DMA_IRQHandler+0xb4>)
    5240:	6812      	ldr	r2, [r2, #0]
    5242:	07d1      	lsls	r1, r2, #31
    5244:	d535      	bpl.n	52b2 <DMA_IRQHandler+0xae>
			if (DMACIntTCStat & (1 << 0)) {
    5246:	4a1d      	ldr	r2, [pc, #116]	; (52bc <DMA_IRQHandler+0xb8>)
    5248:	6812      	ldr	r2, [r2, #0]
    524a:	07d2      	lsls	r2, r2, #31
    524c:	d526      	bpl.n	529c <DMA_IRQHandler+0x98>
				DMACIntTCClear = (1 << 0);

				if (hop_mode == HOP_BLUETOOTH)
					DIO_SSEL_SET;

				idle_buf_clk100ns  = CLK100NS;
    524e:	f640 4435 	movw	r4, #3125	; 0xc35
	   || mode == MODE_RX_GENERIC)
	{
		/* interrupt on channel 0 */
		if (DMACIntStat & (1 << 0)) {
			if (DMACIntTCStat & (1 << 0)) {
				DMACIntTCClear = (1 << 0);
    5252:	4a1b      	ldr	r2, [pc, #108]	; (52c0 <DMA_IRQHandler+0xbc>)
    5254:	2101      	movs	r1, #1
    5256:	6011      	str	r1, [r2, #0]

				if (hop_mode == HOP_BLUETOOTH)
    5258:	7a9a      	ldrb	r2, [r3, #10]
					DIO_SSEL_SET;

				idle_buf_clk100ns  = CLK100NS;
    525a:	481a      	ldr	r0, [pc, #104]	; (52c4 <DMA_IRQHandler+0xc0>)
		/* interrupt on channel 0 */
		if (DMACIntStat & (1 << 0)) {
			if (DMACIntTCStat & (1 << 0)) {
				DMACIntTCClear = (1 << 0);

				if (hop_mode == HOP_BLUETOOTH)
    525c:	2a02      	cmp	r2, #2
					DIO_SSEL_SET;
    525e:	bf02      	ittt	eq
    5260:	4a19      	ldreq	r2, [pc, #100]	; (52c8 <DMA_IRQHandler+0xc4>)
    5262:	f04f 5180 	moveq.w	r1, #268435456	; 0x10000000
    5266:	6011      	streq	r1, [r2, #0]

				idle_buf_clk100ns  = CLK100NS;
    5268:	4a18      	ldr	r2, [pc, #96]	; (52cc <DMA_IRQHandler+0xc8>)
    526a:	6801      	ldr	r1, [r0, #0]
    526c:	6812      	ldr	r2, [r2, #0]
    526e:	f3c1 0113 	ubfx	r1, r1, #0, #20
    5272:	fb04 2201 	mla	r2, r4, r1, r2
    5276:	605a      	str	r2, [r3, #4]
				idle_buf_clkn_high = (clkn >> 20) & 0xff;
    5278:	6802      	ldr	r2, [r0, #0]
    527a:	f3c2 5207 	ubfx	r2, r2, #20, #8
    527e:	709a      	strb	r2, [r3, #2]
				idle_buf_channel   = channel;
    5280:	4a13      	ldr	r2, [pc, #76]	; (52d0 <DMA_IRQHandler+0xcc>)
    5282:	8812      	ldrh	r2, [r2, #0]
    5284:	b292      	uxth	r2, r2
    5286:	811a      	strh	r2, [r3, #8]

				/* Keep buffer swapping in sync with DMA. */
				volatile uint8_t* tmp = active_rxbuf;
    5288:	4a12      	ldr	r2, [pc, #72]	; (52d4 <DMA_IRQHandler+0xd0>)
				active_rxbuf = idle_rxbuf;
    528a:	4b13      	ldr	r3, [pc, #76]	; (52d8 <DMA_IRQHandler+0xd4>)
				idle_buf_clk100ns  = CLK100NS;
				idle_buf_clkn_high = (clkn >> 20) & 0xff;
				idle_buf_channel   = channel;

				/* Keep buffer swapping in sync with DMA. */
				volatile uint8_t* tmp = active_rxbuf;
    528c:	6811      	ldr	r1, [r2, #0]
				active_rxbuf = idle_rxbuf;
    528e:	6818      	ldr	r0, [r3, #0]
    5290:	6010      	str	r0, [r2, #0]
				idle_rxbuf = tmp;

				++rx_tc;
    5292:	4a12      	ldr	r2, [pc, #72]	; (52dc <DMA_IRQHandler+0xd8>)
				idle_buf_channel   = channel;

				/* Keep buffer swapping in sync with DMA. */
				volatile uint8_t* tmp = active_rxbuf;
				active_rxbuf = idle_rxbuf;
				idle_rxbuf = tmp;
    5294:	6019      	str	r1, [r3, #0]

				++rx_tc;
    5296:	6813      	ldr	r3, [r2, #0]
    5298:	3301      	adds	r3, #1
    529a:	6013      	str	r3, [r2, #0]
			}
			if (DMACIntErrStat & (1 << 0)) {
    529c:	4b10      	ldr	r3, [pc, #64]	; (52e0 <DMA_IRQHandler+0xdc>)
    529e:	681b      	ldr	r3, [r3, #0]
    52a0:	07db      	lsls	r3, r3, #31
    52a2:	d506      	bpl.n	52b2 <DMA_IRQHandler+0xae>
				DMACIntErrClr = (1 << 0);
    52a4:	4b0f      	ldr	r3, [pc, #60]	; (52e4 <DMA_IRQHandler+0xe0>)
    52a6:	2201      	movs	r2, #1
    52a8:	601a      	str	r2, [r3, #0]
				++rx_err;
    52aa:	4a0f      	ldr	r2, [pc, #60]	; (52e8 <DMA_IRQHandler+0xe4>)
    52ac:	6813      	ldr	r3, [r2, #0]
    52ae:	3301      	adds	r3, #1
    52b0:	6013      	str	r3, [r2, #0]
    52b2:	bd10      	pop	{r4, pc}
    52b4:	10000a1c 	.word	0x10000a1c
    52b8:	50004000 	.word	0x50004000
    52bc:	50004004 	.word	0x50004004
    52c0:	50004008 	.word	0x50004008
    52c4:	10000bc4 	.word	0x10000bc4
    52c8:	2009c098 	.word	0x2009c098
    52cc:	40004008 	.word	0x40004008
    52d0:	10000448 	.word	0x10000448
    52d4:	10000c04 	.word	0x10000c04
    52d8:	10000d20 	.word	0x10000d20
    52dc:	10000ba4 	.word	0x10000ba4
    52e0:	5000400c 	.word	0x5000400c
    52e4:	50004010 	.word	0x50004010
    52e8:	100010b8 	.word	0x100010b8

000052ec <le_transmit>:
 * All modulation parameters are set within this function. The data
 * should not be pre-whitened, but the CRC should be calculated and
 * included in the data length.
 */
void le_transmit(u32 aa, u8 len, u8 *data)
{
    52ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    52f0:	b090      	sub	sp, #64	; 0x40
    52f2:	4605      	mov	r5, r0
    52f4:	460c      	mov	r4, r1
    52f6:	4691      	mov	r9, r2
    52f8:	f10d 0703 	add.w	r7, sp, #3
    52fc:	f10d 32ff 	add.w	r2, sp, #4294967295	; 0xffffffff
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
    5300:	b2e8      	uxtb	r0, r5
    5302:	3201      	adds	r2, #1
		aa >>= 8;
    5304:	0a2d      	lsrs	r5, r5, #8
    5306:	2107      	movs	r1, #7
    5308:	2300      	movs	r3, #0
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
			txbuf[i] |= (byte & 1) << (7 - j);
    530a:	f000 0601 	and.w	r6, r0, #1
    530e:	408e      	lsls	r6, r1
    5310:	4333      	orrs	r3, r6
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    5312:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
			txbuf[i] |= (byte & 1) << (7 - j);
    5316:	b2db      	uxtb	r3, r3
			byte >>= 1;
    5318:	ea4f 0050 	mov.w	r0, r0, lsr #1
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    531c:	d2f5      	bcs.n	530a <le_transmit+0x1e>
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    531e:	42ba      	cmp	r2, r7
    5320:	7013      	strb	r3, [r2, #0]
    5322:	d1ed      	bne.n	5300 <le_transmit+0x14>
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
    5324:	4e5a      	ldr	r6, [pc, #360]	; (5490 <le_transmit+0x1a4>)
    5326:	4f5b      	ldr	r7, [pc, #364]	; (5494 <le_transmit+0x1a8>)
    5328:	8830      	ldrh	r0, [r6, #0]
    532a:	f10d 0a04 	add.w	sl, sp, #4
    532e:	3862      	subs	r0, #98	; 0x62
    5330:	b2c0      	uxtb	r0, r0
    5332:	f001 ff97 	bl	7264 <btle_channel_index>
	for (i = 0; i < len; ++i) {
    5336:	46cc      	mov	ip, r9
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
    5338:	5c3b      	ldrb	r3, [r7, r0]
    533a:	ebc9 020c 	rsb	r2, r9, ip
	for (i = 0; i < len; ++i) {
    533e:	42a2      	cmp	r2, r4
    5340:	d221      	bcs.n	5386 <le_transmit+0x9a>
		byte = data[i];
    5342:	f81c 2b01 	ldrb.w	r2, [ip], #1
    5346:	f04f 0e07 	mov.w	lr, #7
    534a:	f04f 0800 	mov.w	r8, #0
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
    534e:	18f8      	adds	r0, r7, r3
    5350:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    5354:	f002 0101 	and.w	r1, r2, #1
    5358:	4041      	eors	r1, r0
			idx = (idx + 1) % sizeof(whitening);
    535a:	3301      	adds	r3, #1
    535c:	207f      	movs	r0, #127	; 0x7f
    535e:	fbb3 f0f0 	udiv	r0, r3, r0
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
    5362:	fa01 f10e 	lsl.w	r1, r1, lr
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    5366:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
    536a:	ea41 0808 	orr.w	r8, r1, r8
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    536e:	f11e 3eff 	adds.w	lr, lr, #4294967295	; 0xffffffff
			bit = (byte & 1) ^ whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    5372:	eba3 0300 	sub.w	r3, r3, r0
			byte >>= 1;
    5376:	ea4f 0252 	mov.w	r2, r2, lsr #1
			txbuf[i+4] |= bit << (7 - j);
    537a:	fa5f f888 	uxtb.w	r8, r8
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    537e:	d2e6      	bcs.n	534e <le_transmit+0x62>
    5380:	f80a 8b01 	strb.w	r8, [sl], #1
    5384:	e7d9      	b.n	533a <le_transmit+0x4e>
	}

	len += 4; // include the AA in len

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    5386:	200d      	movs	r0, #13
    5388:	f647 71ff 	movw	r1, #32767	; 0x7fff
    538c:	f003 f8eb 	bl	8566 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5390:	2012      	movs	r0, #18
    5392:	f642 3122 	movw	r1, #11042	; 0x2b22
    5396:	f003 f8e6 	bl	8566 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    539a:	2014      	movs	r0, #20
    539c:	f241 314b 	movw	r1, #4939	; 0x134b
    53a0:	f003 f8e1 	bl	8566 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    53a4:	2020      	movs	r0, #32
    53a6:	f640 4101 	movw	r1, #3073	; 0xc01
    53aa:	f003 f8dc 	bl	8566 <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(FSDIV,   channel);
    53ae:	8831      	ldrh	r1, [r6, #0]
    53b0:	2002      	movs	r0, #2
    53b2:	b289      	uxth	r1, r1
    53b4:	f003 f8d7 	bl	8566 <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    53b8:	2005      	movs	r0, #5
    53ba:	210b      	movs	r1, #11
    53bc:	f003 f8d3 	bl	8566 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    53c0:	2003      	movs	r0, #3
    53c2:	2140      	movs	r1, #64	; 0x40
    53c4:	f003 f8cf 	bl	8566 <cc2400_set>
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    53c8:	2114      	movs	r1, #20
    53ca:	2023      	movs	r0, #35	; 0x23
    53cc:	f003 f8cb 	bl	8566 <cc2400_set>

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
    53d0:	07ed      	lsls	r5, r5, #31
		cc2400_set(SYNCH,   0xaaaa);
    53d2:	bf4c      	ite	mi
    53d4:	f64a 21aa 	movwmi	r1, #43690	; 0xaaaa
	else
		cc2400_set(SYNCH,   0x5555);
    53d8:	f245 5155 	movwpl	r1, #21845	; 0x5555
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
		cc2400_set(SYNCH,   0xaaaa);
    53dc:	202d      	movs	r0, #45	; 0x2d
	else
		cc2400_set(SYNCH,   0x5555);
    53de:	f003 f8c2 	bl	8566 <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    53e2:	2008      	movs	r0, #8
    53e4:	f003 f8b6 	bl	8554 <cc2400_get>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    53e8:	f3c0 0108 	ubfx	r1, r0, #0, #9
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    53ec:	3404      	adds	r4, #4
		cc2400_set(SYNCH,   0xaaaa);
	else
		cc2400_set(SYNCH,   0x5555);

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    53ee:	4606      	mov	r6, r0
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    53f0:	f441 419c 	orr.w	r1, r1, #19968	; 0x4e00
    53f4:	2008      	movs	r0, #8
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    53f6:	b2e4      	uxtb	r4, r4
	else
		cc2400_set(SYNCH,   0x5555);

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    53f8:	f003 f8b5 	bl	8566 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    53fc:	f003 f954 	bl	86a8 <cc2400_status>
    5400:	0640      	lsls	r0, r0, #25
    5402:	d5fb      	bpl.n	53fc <le_transmit+0x110>
	cc2400_strobe(SFSON);
    5404:	2061      	movs	r0, #97	; 0x61
    5406:	f003 f956 	bl	86b6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    540a:	f003 f94d 	bl	86a8 <cc2400_status>
    540e:	0741      	lsls	r1, r0, #29
    5410:	d5fb      	bpl.n	540a <le_transmit+0x11e>
	TXLED_SET;
    5412:	4b21      	ldr	r3, [pc, #132]	; (5498 <le_transmit+0x1ac>)
    5414:	f44f 7280 	mov.w	r2, #256	; 0x100
    5418:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    541a:	2280      	movs	r2, #128	; 0x80
    541c:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    541e:	200e      	movs	r0, #14
    5420:	f003 f898 	bl	8554 <cc2400_get>
    5424:	f000 001f 	and.w	r0, r0, #31
    5428:	280f      	cmp	r0, #15
    542a:	d1f8      	bne.n	541e <le_transmit+0x132>
	cc2400_strobe(STX);
    542c:	2063      	movs	r0, #99	; 0x63
    542e:	f003 f942 	bl	86b6 <cc2400_strobe>

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    5432:	2500      	movs	r5, #0
    5434:	42a5      	cmp	r5, r4
    5436:	d20e      	bcs.n	5456 <le_transmit+0x16a>
		while (GIO6) ; // wait for the FIFO to drain (FIFO_FULL false)
    5438:	4b18      	ldr	r3, [pc, #96]	; (549c <le_transmit+0x1b0>)
    543a:	681b      	ldr	r3, [r3, #0]
    543c:	075a      	lsls	r2, r3, #29
    543e:	d4fb      	bmi.n	5438 <le_transmit+0x14c>
    5440:	1b60      	subs	r0, r4, r5
    5442:	b2c0      	uxtb	r0, r0
		tx_len = len - i;
		if (tx_len > 16)
			tx_len = 16;
		cc2400_fifo_write(tx_len, txbuf + i);
    5444:	2810      	cmp	r0, #16
    5446:	eb0d 0105 	add.w	r1, sp, r5
    544a:	bf28      	it	cs
    544c:	2010      	movcs	r0, #16
    544e:	f003 f89d 	bl	858c <cc2400_fifo_write>
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    5452:	3510      	adds	r5, #16
    5454:	e7ee      	b.n	5434 <le_transmit+0x148>
		if (tx_len > 16)
			tx_len = 16;
		cc2400_fifo_write(tx_len, txbuf + i);
	}

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5456:	200e      	movs	r0, #14
    5458:	f003 f87c 	bl	8554 <cc2400_get>
    545c:	f000 001f 	and.w	r0, r0, #31
    5460:	280f      	cmp	r0, #15
    5462:	d1f8      	bne.n	5456 <le_transmit+0x16a>
	TXLED_CLR;
    5464:	4b0e      	ldr	r3, [pc, #56]	; (54a0 <le_transmit+0x1b4>)
    5466:	f44f 7280 	mov.w	r2, #256	; 0x100
    546a:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    546c:	2064      	movs	r0, #100	; 0x64
    546e:	f003 f922 	bl	86b6 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    5472:	f003 f919 	bl	86a8 <cc2400_status>
    5476:	0743      	lsls	r3, r0, #29
    5478:	d4fb      	bmi.n	5472 <le_transmit+0x186>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    547a:	4b0a      	ldr	r3, [pc, #40]	; (54a4 <le_transmit+0x1b8>)
    547c:	2280      	movs	r2, #128	; 0x80
    547e:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    5480:	2008      	movs	r0, #8
    5482:	4631      	mov	r1, r6
    5484:	f003 f86f 	bl	8566 <cc2400_set>
}
    5488:	b010      	add	sp, #64	; 0x40
    548a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    548e:	bf00      	nop
    5490:	10000448 	.word	0x10000448
    5494:	00009250 	.word	0x00009250
    5498:	2009c038 	.word	0x2009c038
    549c:	2009c054 	.word	0x2009c054
    54a0:	2009c03c 	.word	0x2009c03c
    54a4:	2009c05c 	.word	0x2009c05c

000054a8 <le_jam>:

void le_jam(void) {
    54a8:	b508      	push	{r3, lr}
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    54aa:	200d      	movs	r0, #13
    54ac:	f647 71ff 	movw	r1, #32767	; 0x7fff
    54b0:	f003 f859 	bl	8566 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    54b4:	2012      	movs	r0, #18
    54b6:	f642 3122 	movw	r1, #11042	; 0x2b22
    54ba:	f003 f854 	bl	8566 <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    54be:	2014      	movs	r0, #20
    54c0:	f242 314b 	movw	r1, #9035	; 0x234b
    54c4:	f003 f84f 	bl	8566 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    54c8:	2020      	movs	r0, #32
    54ca:	f640 4101 	movw	r1, #3073	; 0xc01
    54ce:	f003 f84a 	bl	8566 <cc2400_set>
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	// cc2400_set(FSDIV,   channel);
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    54d2:	2005      	movs	r0, #5
    54d4:	210b      	movs	r1, #11
    54d6:	f003 f846 	bl	8566 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    54da:	2003      	movs	r0, #3
    54dc:	2140      	movs	r1, #64	; 0x40
    54de:	f003 f842 	bl	8566 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    54e2:	f003 f8e1 	bl	86a8 <cc2400_status>
    54e6:	0642      	lsls	r2, r0, #25
    54e8:	d5fb      	bpl.n	54e2 <le_jam+0x3a>
	cc2400_strobe(SFSON);
    54ea:	2061      	movs	r0, #97	; 0x61
    54ec:	f003 f8e3 	bl	86b6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    54f0:	f003 f8da 	bl	86a8 <cc2400_status>
    54f4:	0743      	lsls	r3, r0, #29
    54f6:	d5fb      	bpl.n	54f0 <le_jam+0x48>
	TXLED_SET;
    54f8:	4b08      	ldr	r3, [pc, #32]	; (551c <le_jam+0x74>)
    54fa:	f44f 7280 	mov.w	r2, #256	; 0x100
    54fe:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5500:	2280      	movs	r2, #128	; 0x80
    5502:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5504:	200e      	movs	r0, #14
    5506:	f003 f825 	bl	8554 <cc2400_get>
    550a:	f000 001f 	and.w	r0, r0, #31
    550e:	280f      	cmp	r0, #15
    5510:	d1f8      	bne.n	5504 <le_jam+0x5c>
	cc2400_strobe(STX);
    5512:	2063      	movs	r0, #99	; 0x63
#endif
}
    5514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);
    5518:	f003 b8cd 	b.w	86b6 <cc2400_strobe>
    551c:	2009c038 	.word	0x2009c038

00005520 <hop>:
}

/* TODO - return whether hop happened, or should caller have to keep
 * track of this? */
void hop(void)
{
    5520:	b538      	push	{r3, r4, r5, lr}
	do_hop = 0;
    5522:	4c5d      	ldr	r4, [pc, #372]	; (5698 <hop+0x178>)
    5524:	2300      	movs	r3, #0
    5526:	72e3      	strb	r3, [r4, #11]
	last_hop = clkn;
    5528:	4b5c      	ldr	r3, [pc, #368]	; (569c <hop+0x17c>)
    552a:	4a5d      	ldr	r2, [pc, #372]	; (56a0 <hop+0x180>)
    552c:	6819      	ldr	r1, [r3, #0]
    552e:	6011      	str	r1, [r2, #0]

	// No hopping, if channel is set correctly, do nothing
	if (hop_mode == HOP_NONE) {
    5530:	7aa2      	ldrb	r2, [r4, #10]
    5532:	b94a      	cbnz	r2, 5548 <hop+0x28>
		if (cc2400_get(FSDIV) == (channel - 1))
    5534:	2002      	movs	r0, #2
    5536:	f003 f80d 	bl	8554 <cc2400_get>
    553a:	4b5a      	ldr	r3, [pc, #360]	; (56a4 <hop+0x184>)
    553c:	881b      	ldrh	r3, [r3, #0]
    553e:	b29b      	uxth	r3, r3
    5540:	3b01      	subs	r3, #1
    5542:	4298      	cmp	r0, r3
    5544:	d17d      	bne.n	5642 <hop+0x122>
    5546:	bd38      	pop	{r3, r4, r5, pc}
			return;
	}
	/* Slow sweep (100 hops/sec)
	 * only hop to currently used channels if AFH is enabled
	 */
	else if (hop_mode == HOP_SWEEP) {
    5548:	7aa2      	ldrb	r2, [r4, #10]
    554a:	2a01      	cmp	r2, #1
    554c:	d130      	bne.n	55b0 <hop+0x90>
		do {
			channel += 32;
			if (channel > 2480)
				channel -= 79;
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    554e:	4b56      	ldr	r3, [pc, #344]	; (56a8 <hop+0x188>)
    5550:	7819      	ldrb	r1, [r3, #0]
    5552:	4b56      	ldr	r3, [pc, #344]	; (56ac <hop+0x18c>)
    5554:	7818      	ldrb	r0, [r3, #0]
	/* Slow sweep (100 hops/sec)
	 * only hop to currently used channels if AFH is enabled
	 */
	else if (hop_mode == HOP_SWEEP) {
		do {
			channel += 32;
    5556:	4a53      	ldr	r2, [pc, #332]	; (56a4 <hop+0x184>)
    5558:	8813      	ldrh	r3, [r2, #0]
    555a:	3320      	adds	r3, #32
    555c:	b29b      	uxth	r3, r3
    555e:	8013      	strh	r3, [r2, #0]
			if (channel > 2480)
    5560:	8813      	ldrh	r3, [r2, #0]
    5562:	b29b      	uxth	r3, r3
    5564:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
				channel -= 79;
    5568:	bf81      	itttt	hi
    556a:	8813      	ldrhhi	r3, [r2, #0]
    556c:	3b4f      	subhi	r3, #79	; 0x4f
    556e:	b29b      	uxthhi	r3, r3
    5570:	8013      	strhhi	r3, [r2, #0]
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    5572:	2900      	cmp	r1, #0
    5574:	d065      	beq.n	5642 <hop+0x122>
    5576:	2800      	cmp	r0, #0
    5578:	d063      	beq.n	5642 <hop+0x122>
    557a:	8813      	ldrh	r3, [r2, #0]
    557c:	2508      	movs	r5, #8
    557e:	b29b      	uxth	r3, r3
    5580:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    5584:	fb93 f3f5 	sdiv	r3, r3, r5
    5588:	8812      	ldrh	r2, [r2, #0]
    558a:	4d49      	ldr	r5, [pc, #292]	; (56b0 <hop+0x190>)
    558c:	b292      	uxth	r2, r2
    558e:	5ced      	ldrb	r5, [r5, r3]
    5590:	4b48      	ldr	r3, [pc, #288]	; (56b4 <hop+0x194>)
    5592:	f6a2 1262 	subw	r2, r2, #2402	; 0x962
    5596:	4013      	ands	r3, r2
    5598:	2b00      	cmp	r3, #0
    559a:	bfbe      	ittt	lt
    559c:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
    55a0:	f063 0307 	ornlt	r3, r3, #7
    55a4:	3301      	addlt	r3, #1
    55a6:	fa45 f303 	asr.w	r3, r5, r3
    55aa:	07dd      	lsls	r5, r3, #31
    55ac:	d5d3      	bpl.n	5556 <hop+0x36>
    55ae:	e048      	b.n	5642 <hop+0x122>
	}

	/* AFH detection
	 * only hop to currently unused channesl
	 */
	else if (hop_mode == HOP_AFH) {
    55b0:	7aa2      	ldrb	r2, [r4, #10]
    55b2:	2a05      	cmp	r2, #5
    55b4:	d12c      	bne.n	5610 <hop+0xf0>
		do {
			channel += 32;
			if (channel > 2480)
				channel -= 79;
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    55b6:	4b3c      	ldr	r3, [pc, #240]	; (56a8 <hop+0x188>)
    55b8:	7819      	ldrb	r1, [r3, #0]
	/* AFH detection
	 * only hop to currently unused channesl
	 */
	else if (hop_mode == HOP_AFH) {
		do {
			channel += 32;
    55ba:	4a3a      	ldr	r2, [pc, #232]	; (56a4 <hop+0x184>)
    55bc:	8813      	ldrh	r3, [r2, #0]
    55be:	3320      	adds	r3, #32
    55c0:	b29b      	uxth	r3, r3
    55c2:	8013      	strh	r3, [r2, #0]
			if (channel > 2480)
    55c4:	8813      	ldrh	r3, [r2, #0]
    55c6:	b29b      	uxth	r3, r3
    55c8:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
				channel -= 79;
    55cc:	bf81      	itttt	hi
    55ce:	8813      	ldrhhi	r3, [r2, #0]
    55d0:	3b4f      	subhi	r3, #79	; 0x4f
    55d2:	b29b      	uxthhi	r3, r3
    55d4:	8013      	strhhi	r3, [r2, #0]
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    55d6:	294f      	cmp	r1, #79	; 0x4f
    55d8:	d033      	beq.n	5642 <hop+0x122>
    55da:	8813      	ldrh	r3, [r2, #0]
    55dc:	2008      	movs	r0, #8
    55de:	b29b      	uxth	r3, r3
    55e0:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    55e4:	fb93 f3f0 	sdiv	r3, r3, r0
    55e8:	8812      	ldrh	r2, [r2, #0]
    55ea:	4831      	ldr	r0, [pc, #196]	; (56b0 <hop+0x190>)
    55ec:	b292      	uxth	r2, r2
    55ee:	5cc0      	ldrb	r0, [r0, r3]
    55f0:	4b30      	ldr	r3, [pc, #192]	; (56b4 <hop+0x194>)
    55f2:	f6a2 1262 	subw	r2, r2, #2402	; 0x962
    55f6:	4013      	ands	r3, r2
    55f8:	2b00      	cmp	r3, #0
    55fa:	bfbe      	ittt	lt
    55fc:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
    5600:	f063 0307 	ornlt	r3, r3, #7
    5604:	3301      	addlt	r3, #1
    5606:	fa40 f303 	asr.w	r3, r0, r3
    560a:	07d8      	lsls	r0, r3, #31
    560c:	d4d5      	bmi.n	55ba <hop+0x9a>
    560e:	e018      	b.n	5642 <hop+0x122>
	}

	else if (hop_mode == HOP_BLUETOOTH) {
    5610:	7aa2      	ldrb	r2, [r4, #10]
    5612:	2a02      	cmp	r2, #2
    5614:	d105      	bne.n	5622 <hop+0x102>
		channel = next_hop(clkn);
    5616:	6818      	ldr	r0, [r3, #0]
    5618:	f001 fd84 	bl	7124 <next_hop>
    561c:	4b21      	ldr	r3, [pc, #132]	; (56a4 <hop+0x184>)
    561e:	8018      	strh	r0, [r3, #0]
    5620:	e00f      	b.n	5642 <hop+0x122>
	}

	else if (hop_mode == HOP_BTLE) {
    5622:	7aa3      	ldrb	r3, [r4, #10]
    5624:	2b03      	cmp	r3, #3
    5626:	d105      	bne.n	5634 <hop+0x114>
		channel = btle_next_hop(&le);
    5628:	4d1e      	ldr	r5, [pc, #120]	; (56a4 <hop+0x184>)
    562a:	1d28      	adds	r0, r5, #4
    562c:	f001 fe45 	bl	72ba <btle_next_hop>
    5630:	8028      	strh	r0, [r5, #0]
    5632:	e006      	b.n	5642 <hop+0x122>
	}

	else if (hop_mode == HOP_DIRECT) {
    5634:	7aa3      	ldrb	r3, [r4, #10]
    5636:	2b04      	cmp	r3, #4
		channel = hop_direct_channel;
    5638:	bf01      	itttt	eq
    563a:	89a3      	ldrheq	r3, [r4, #12]
    563c:	4a19      	ldreq	r2, [pc, #100]	; (56a4 <hop+0x184>)
    563e:	b29b      	uxtheq	r3, r3
    5640:	8013      	strheq	r3, [r2, #0]
	}
	/* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
    5642:	2064      	movs	r0, #100	; 0x64
    5644:	f003 f837 	bl	86b6 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5648:	f003 f82e 	bl	86a8 <cc2400_status>
    564c:	0742      	lsls	r2, r0, #29
    564e:	d4fb      	bmi.n	5648 <hop+0x128>

	/* Retune */
	if(mode == MODE_TX_SYMBOLS)
    5650:	7c60      	ldrb	r0, [r4, #17]
    5652:	4d14      	ldr	r5, [pc, #80]	; (56a4 <hop+0x184>)
    5654:	b2c0      	uxtb	r0, r0
		cc2400_set(FSDIV, channel);
    5656:	8829      	ldrh	r1, [r5, #0]
	/* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?

	/* Retune */
	if(mode == MODE_TX_SYMBOLS)
    5658:	2802      	cmp	r0, #2
		cc2400_set(FSDIV, channel);
	else
		cc2400_set(FSDIV, channel - 1);
    565a:	bf1c      	itt	ne
    565c:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
    5660:	2002      	movne	r0, #2
    5662:	b289      	uxth	r1, r1
    5664:	f002 ff7f 	bl	8566 <cc2400_set>

	/* Update CS register if hopping.  */
	if (hop_mode > 0) {
    5668:	7aa3      	ldrb	r3, [r4, #10]
    566a:	b11b      	cbz	r3, 5674 <hop+0x154>
		cs_threshold_calc_and_set(channel);
    566c:	8828      	ldrh	r0, [r5, #0]
    566e:	b280      	uxth	r0, r0
    5670:	f001 ffe2 	bl	7638 <cs_threshold_calc_and_set>
	}

	/* Wait for lock */
	cc2400_strobe(SFSON);
    5674:	2061      	movs	r0, #97	; 0x61
    5676:	f003 f81e 	bl	86b6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    567a:	f003 f815 	bl	86a8 <cc2400_status>
    567e:	0743      	lsls	r3, r0, #29
    5680:	d5fb      	bpl.n	567a <hop+0x15a>

	dma_discard = 1;
    5682:	2301      	movs	r3, #1
    5684:	7423      	strb	r3, [r4, #16]

	if(mode == MODE_TX_SYMBOLS)
    5686:	7c63      	ldrb	r3, [r4, #17]
    5688:	2b02      	cmp	r3, #2
		cc2400_strobe(STX);
    568a:	bf0c      	ite	eq
    568c:	2063      	moveq	r0, #99	; 0x63
	else
		cc2400_strobe(SRX);
    568e:	2062      	movne	r0, #98	; 0x62
}
    5690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	dma_discard = 1;

	if(mode == MODE_TX_SYMBOLS)
		cc2400_strobe(STX);
	else
		cc2400_strobe(SRX);
    5694:	f003 b80f 	b.w	86b6 <cc2400_strobe>
    5698:	10000a1c 	.word	0x10000a1c
    569c:	10000bc4 	.word	0x10000bc4
    56a0:	10000ba0 	.word	0x10000ba0
    56a4:	10000448 	.word	0x10000448
    56a8:	10000ba9 	.word	0x10000ba9
    56ac:	10001047 	.word	0x10001047
    56b0:	10000bab 	.word	0x10000bab
    56b4:	80000007 	.word	0x80000007

000056b8 <bt_stream_rx>:
}

/* Bluetooth packet monitoring */
void bt_stream_rx()
{
    56b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int8_t rssi;
	int8_t rssi_at_trigger;

	RXLED_CLR;
    56bc:	4e4a      	ldr	r6, [pc, #296]	; (57e8 <bt_stream_rx+0x130>)
    56be:	2310      	movs	r3, #16
    56c0:	6033      	str	r3, [r6, #0]

	queue_init();
    56c2:	f001 fecb 	bl	745c <queue_init>
	dio_ssp_init();
    56c6:	f002 febf 	bl	8448 <dio_ssp_init>
	dma_init();
    56ca:	f002 f8a9 	bl	7820 <dma_init>
	dio_ssp_start();
    56ce:	f002 f92d 	bl	792c <dio_ssp_start>

	cc2400_rx();
    56d2:	f7fe fe29 	bl	4328 <cc2400_rx>

	cs_trigger_enable();
    56d6:	f001 ffe1 	bl	769c <cs_trigger_enable>

	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    56da:	4c44      	ldr	r4, [pc, #272]	; (57ec <bt_stream_rx+0x134>)
    56dc:	7ca3      	ldrb	r3, [r4, #18]
    56de:	46a0      	mov	r8, r4
    56e0:	2b01      	cmp	r3, #1
    56e2:	d178      	bne.n	57d6 <bt_stream_rx+0x11e>
	{

		RXLED_CLR;
    56e4:	2310      	movs	r3, #16
    56e6:	6033      	str	r3, [r6, #0]
		 * cover all the symbols in a DMA transfer. Can not do
		 * RSSI sampling in CS interrupt, but could log time
		 * at multiple trigger points there. The MAX() below
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
    56e8:	f001 ff2e 	bl	7548 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    56ec:	2580      	movs	r5, #128	; 0x80
		while (!rx_tc) {
    56ee:	4b40      	ldr	r3, [pc, #256]	; (57f0 <bt_stream_rx+0x138>)
    56f0:	f8df a120 	ldr.w	sl, [pc, #288]	; 5814 <bt_stream_rx+0x15c>
    56f4:	681a      	ldr	r2, [r3, #0]
    56f6:	4f3f      	ldr	r7, [pc, #252]	; (57f4 <bt_stream_rx+0x13c>)
    56f8:	4699      	mov	r9, r3
    56fa:	bb1a      	cbnz	r2, 5744 <bt_stream_rx+0x8c>
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    56fc:	2006      	movs	r0, #6
    56fe:	f002 ff29 	bl	8554 <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5702:	f89a 3000 	ldrb.w	r3, [sl]
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while (!rx_tc) {
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5706:	f3c0 2007 	ubfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    570a:	b15b      	cbz	r3, 5724 <bt_stream_rx+0x6c>
    570c:	2d80      	cmp	r5, #128	; 0x80
    570e:	d109      	bne.n	5724 <bt_stream_rx+0x6c>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    5710:	4b39      	ldr	r3, [pc, #228]	; (57f8 <bt_stream_rx+0x140>)
    5712:	b240      	sxtb	r0, r0
    5714:	f993 5000 	ldrsb.w	r5, [r3]
    5718:	3536      	adds	r5, #54	; 0x36
    571a:	42a8      	cmp	r0, r5
    571c:	bfb8      	it	lt
    571e:	4628      	movlt	r0, r5
    5720:	b2c5      	uxtb	r5, r0
				rssi_at_trigger = rssi;
    5722:	4628      	mov	r0, r5
			}
			rssi_add(rssi);
    5724:	b240      	sxtb	r0, r0
    5726:	f001 ff2b 	bl	7580 <rssi_add>

			handle_usb(clkn);
    572a:	6838      	ldr	r0, [r7, #0]
    572c:	f001 fef8 	bl	7520 <handle_usb>

			/* If timer says time to hop, do it. */
			if (do_hop) {
    5730:	f898 300b 	ldrb.w	r3, [r8, #11]
    5734:	b113      	cbz	r3, 573c <bt_stream_rx+0x84>
				hop();
    5736:	f7ff fef3 	bl	5520 <hop>
    573a:	e7d8      	b.n	56ee <bt_stream_rx+0x36>
			} else {
				TXLED_CLR;
    573c:	f44f 7380 	mov.w	r3, #256	; 0x100
    5740:	6033      	str	r3, [r6, #0]
    5742:	e7d4      	b.n	56ee <bt_stream_rx+0x36>
			}
			/* TODO - set per-channel carrier sense threshold.
			 * Set by firmware or host. */
		}

		RXLED_SET;
    5744:	4b2d      	ldr	r3, [pc, #180]	; (57fc <bt_stream_rx+0x144>)
    5746:	2210      	movs	r2, #16

		if (rx_err) {
    5748:	4d2d      	ldr	r5, [pc, #180]	; (5800 <bt_stream_rx+0x148>)
			}
			/* TODO - set per-channel carrier sense threshold.
			 * Set by firmware or host. */
		}

		RXLED_SET;
    574a:	601a      	str	r2, [r3, #0]

		if (rx_err) {
    574c:	682b      	ldr	r3, [r5, #0]
    574e:	b11b      	cbz	r3, 5758 <bt_stream_rx+0xa0>
			status |= DMA_ERROR;
    5750:	7863      	ldrb	r3, [r4, #1]
    5752:	f043 0302 	orr.w	r3, r3, #2
    5756:	7063      	strb	r3, [r4, #1]
		}

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    5758:	f8d9 3000 	ldr.w	r3, [r9]
    575c:	2b01      	cmp	r3, #1
			status |= DMA_OVERFLOW;
    575e:	bf82      	ittt	hi
    5760:	7863      	ldrbhi	r3, [r4, #1]
    5762:	f043 0301 	orrhi.w	r3, r3, #1
    5766:	7063      	strbhi	r3, [r4, #1]

		if (dma_discard) {
    5768:	7c22      	ldrb	r2, [r4, #16]
    576a:	4b20      	ldr	r3, [pc, #128]	; (57ec <bt_stream_rx+0x134>)
    576c:	b12a      	cbz	r2, 577a <bt_stream_rx+0xc2>
			status |= DISCARD;
    576e:	785a      	ldrb	r2, [r3, #1]
    5770:	f042 0220 	orr.w	r2, r2, #32
    5774:	705a      	strb	r2, [r3, #1]
			dma_discard = 0;
    5776:	2200      	movs	r2, #0
    5778:	741a      	strb	r2, [r3, #16]
		}

		rssi_iir_update(channel);
    577a:	4b22      	ldr	r3, [pc, #136]	; (5804 <bt_stream_rx+0x14c>)
    577c:	8818      	ldrh	r0, [r3, #0]
    577e:	b280      	uxth	r0, r0
    5780:	f001 ff1e 	bl	75c0 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    5784:	f89a 3000 	ldrb.w	r3, [sl]
    5788:	b913      	cbnz	r3, 5790 <bt_stream_rx+0xd8>
    578a:	4b1f      	ldr	r3, [pc, #124]	; (5808 <bt_stream_rx+0x150>)
    578c:	781b      	ldrb	r3, [r3, #0]
    578e:	b133      	cbz	r3, 579e <bt_stream_rx+0xe6>
			status |= CS_TRIGGER;
    5790:	7863      	ldrb	r3, [r4, #1]
    5792:	f043 0308 	orr.w	r3, r3, #8
    5796:	7063      	strb	r3, [r4, #1]
			cs_trigger = 0;
    5798:	2300      	movs	r3, #0
    579a:	f88a 3000 	strb.w	r3, [sl]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    579e:	4b16      	ldr	r3, [pc, #88]	; (57f8 <bt_stream_rx+0x140>)
    57a0:	4a1a      	ldr	r2, [pc, #104]	; (580c <bt_stream_rx+0x154>)
    57a2:	f993 3000 	ldrsb.w	r3, [r3]
    57a6:	f992 2000 	ldrsb.w	r2, [r2]
    57aa:	3335      	adds	r3, #53	; 0x35
    57ac:	4293      	cmp	r3, r2
			status |= RSSI_TRIGGER;
    57ae:	bfb8      	it	lt
    57b0:	7863      	ldrblt	r3, [r4, #1]
		}

		enqueue(BR_PACKET, (uint8_t*)idle_rxbuf);
    57b2:	f04f 0000 	mov.w	r0, #0
			status |= CS_TRIGGER;
			cs_trigger = 0;
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
			status |= RSSI_TRIGGER;
    57b6:	bfbc      	itt	lt
    57b8:	f043 0310 	orrlt.w	r3, r3, #16
    57bc:	7063      	strblt	r3, [r4, #1]
		}

		enqueue(BR_PACKET, (uint8_t*)idle_rxbuf);
    57be:	4b14      	ldr	r3, [pc, #80]	; (5810 <bt_stream_rx+0x158>)
    57c0:	6819      	ldr	r1, [r3, #0]
    57c2:	f7fe fe59 	bl	4478 <enqueue>

		handle_usb(clkn);
    57c6:	6838      	ldr	r0, [r7, #0]
    57c8:	f001 feaa 	bl	7520 <handle_usb>
		rx_tc = 0;
    57cc:	2300      	movs	r3, #0
    57ce:	f8c9 3000 	str.w	r3, [r9]
		rx_err = 0;
    57d2:	602b      	str	r3, [r5, #0]
    57d4:	e781      	b.n	56da <bt_stream_rx+0x22>

	cc2400_rx();

	cs_trigger_enable();

	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    57d6:	7ca3      	ldrb	r3, [r4, #18]
    57d8:	2b08      	cmp	r3, #8
    57da:	d083      	beq.n	56e4 <bt_stream_rx+0x2c>

	/* This call is a nop so far. Since bt_rx_stream() starts the
	 * stream, it makes sense that it would stop it. TODO - how
	 * should setup/teardown be handled? Should every new mode be
	 * starting from scratch? */
	dio_ssp_stop();
    57dc:	f002 f8cc 	bl	7978 <dio_ssp_stop>
	cs_trigger_disable();
}
    57e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	/* This call is a nop so far. Since bt_rx_stream() starts the
	 * stream, it makes sense that it would stop it. TODO - how
	 * should setup/teardown be handled? Should every new mode be
	 * starting from scratch? */
	dio_ssp_stop();
	cs_trigger_disable();
    57e4:	f001 bf72 	b.w	76cc <cs_trigger_disable>
    57e8:	2009c03c 	.word	0x2009c03c
    57ec:	10000a1c 	.word	0x10000a1c
    57f0:	10000ba4 	.word	0x10000ba4
    57f4:	10000bc4 	.word	0x10000bc4
    57f8:	100010bc 	.word	0x100010bc
    57fc:	2009c038 	.word	0x2009c038
    5800:	100010b8 	.word	0x100010b8
    5804:	10000448 	.word	0x10000448
    5808:	10000d10 	.word	0x10000d10
    580c:	10000ba8 	.word	0x10000ba8
    5810:	10000d20 	.word	0x10000d20
    5814:	100010bd 	.word	0x100010bd

00005818 <br_transmit>:
 * Transmit a BTBR packet with the specified access code.
 *
 * All modulation parameters are set within this function.
 */
void br_transmit()
{
    5818:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    581c:	4b93      	ldr	r3, [pc, #588]	; (5a6c <br_transmit+0x254>)
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    581e:	2700      	movs	r7, #0
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    5820:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    5824:	2300      	movs	r3, #0
    5826:	f004 0201 	and.w	r2, r4, #1
    582a:	4313      	orrs	r3, r2
    582c:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    5830:	ea4f 76d5 	mov.w	r6, r5, lsr #31
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    5834:	f245 5855 	movw	r8, #21845	; 0x5555
    5838:	bf08      	it	eq
    583a:	4698      	moveq	r8, r3
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    583c:	2f00      	cmp	r7, #0
    583e:	bf08      	it	eq
    5840:	2e01      	cmpeq	r6, #1

	uint8_t data[16] = {
		reverse8((target.syncword >> 0) & 0xFF),
    5842:	b2e0      	uxtb	r0, r4
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    5844:	bf0c      	ite	eq
    5846:	26aa      	moveq	r6, #170	; 0xaa
    5848:	2655      	movne	r6, #85	; 0x55

	uint8_t data[16] = {
		reverse8((target.syncword >> 0) & 0xFF),
    584a:	f7fe fd5b 	bl	4304 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    584e:	f88d 0000 	strb.w	r0, [sp]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
    5852:	f3c4 2007 	ubfx	r0, r4, #8, #8
    5856:	f7fe fd55 	bl	4304 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    585a:	f88d 0001 	strb.w	r0, [sp, #1]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
    585e:	f3c4 4007 	ubfx	r0, r4, #16, #8
    5862:	f7fe fd4f 	bl	4304 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5866:	f88d 0002 	strb.w	r0, [sp, #2]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
    586a:	0e20      	lsrs	r0, r4, #24
    586c:	f7fe fd4a 	bl	4304 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5870:	f88d 0003 	strb.w	r0, [sp, #3]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
    5874:	b2e8      	uxtb	r0, r5
    5876:	f7fe fd45 	bl	4304 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    587a:	f88d 0004 	strb.w	r0, [sp, #4]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
    587e:	f3c5 2007 	ubfx	r0, r5, #8, #8
    5882:	f7fe fd3f 	bl	4304 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5886:	f88d 0005 	strb.w	r0, [sp, #5]
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
    588a:	f3c5 4007 	ubfx	r0, r5, #16, #8
    588e:	f7fe fd39 	bl	4304 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5892:	f88d 0006 	strb.w	r0, [sp, #6]
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
    5896:	0e28      	lsrs	r0, r5, #24
    5898:	f7fe fd34 	bl	4304 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    589c:	f88d 0007 	strb.w	r0, [sp, #7]
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
    58a0:	4630      	mov	r0, r6
    58a2:	f7fe fd2f 	bl	4304 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58a6:	f88d 0008 	strb.w	r0, [sp, #8]
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
    58aa:	2077      	movs	r0, #119	; 0x77
    58ac:	f7fe fd2a 	bl	4304 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58b0:	f88d 0009 	strb.w	r0, [sp, #9]
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
    58b4:	2066      	movs	r0, #102	; 0x66
    58b6:	f7fe fd25 	bl	4304 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58ba:	f88d 000a 	strb.w	r0, [sp, #10]
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
    58be:	2055      	movs	r0, #85	; 0x55
    58c0:	f7fe fd20 	bl	4304 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58c4:	f88d 000b 	strb.w	r0, [sp, #11]
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
    58c8:	2044      	movs	r0, #68	; 0x44
    58ca:	f7fe fd1b 	bl	4304 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58ce:	f88d 000c 	strb.w	r0, [sp, #12]
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
    58d2:	2033      	movs	r0, #51	; 0x33
    58d4:	f7fe fd16 	bl	4304 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58d8:	f88d 000d 	strb.w	r0, [sp, #13]
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
		reverse8(0x22),
    58dc:	2022      	movs	r0, #34	; 0x22
    58de:	f7fe fd11 	bl	4304 <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58e2:	f88d 000e 	strb.w	r0, [sp, #14]
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
		reverse8(0x22),
		reverse8(0x11)
    58e6:	2011      	movs	r0, #17
    58e8:	f7fe fd0c 	bl	4304 <reverse8>
	return reversed;
}

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;
    58ec:	463c      	mov	r4, r7

	for(size_t i=0; i<16; i++)
    58ee:	463b      	mov	r3, r7
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    58f0:	f88d 000f 	strb.w	r0, [sp, #15]
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    58f4:	fa48 f203 	asr.w	r2, r8, r3
    58f8:	f1c3 010f 	rsb	r1, r3, #15
    58fc:	f002 0201 	and.w	r2, r2, #1
    5900:	408a      	lsls	r2, r1

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    5902:	3301      	adds	r3, #1
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    5904:	4314      	orrs	r4, r2

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    5906:	2b10      	cmp	r3, #16
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    5908:	b2a4      	uxth	r4, r4

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    590a:	d1f3      	bne.n	58f4 <br_transmit+0xdc>
/* start buffered tx */
static void cc2400_tx_sync(uint32_t sync)
{
#ifdef TX_ENABLE
	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    590c:	200d      	movs	r0, #13
    590e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5912:	f002 fe28 	bl	8566 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5916:	2012      	movs	r0, #18
    5918:	f642 3122 	movw	r1, #11042	; 0x2b22
    591c:	f002 fe23 	bl	8566 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    5920:	2014      	movs	r0, #20
    5922:	f241 314b 	movw	r1, #4939	; 0x134b
    5926:	f002 fe1e 	bl	8566 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    592a:	2020      	movs	r0, #32
    592c:	f640 4101 	movw	r1, #3073	; 0xc01
    5930:	f002 fe19 	bl	8566 <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(SYNCL,   sync & 0xffff);
    5934:	4621      	mov	r1, r4
    5936:	202c      	movs	r0, #44	; 0x2c
    5938:	f002 fe15 	bl	8566 <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    593c:	202d      	movs	r0, #45	; 0x2d
    593e:	2100      	movs	r1, #0
    5940:	f002 fe11 	bl	8566 <cc2400_set>

	cc2400_set(FSDIV,   channel);
    5944:	4b4a      	ldr	r3, [pc, #296]	; (5a70 <br_transmit+0x258>)
    5946:	2002      	movs	r0, #2
    5948:	8819      	ldrh	r1, [r3, #0]
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)

	if (modulation == MOD_BT_BASIC_RATE) {
    594a:	4c4a      	ldr	r4, [pc, #296]	; (5a74 <br_transmit+0x25c>)
	//      +--------------------> buffered mode

	cc2400_set(SYNCL,   sync & 0xffff);
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);

	cc2400_set(FSDIV,   channel);
    594c:	b289      	uxth	r1, r1
    594e:	f002 fe0a 	bl	8566 <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    5952:	2005      	movs	r0, #5
    5954:	210b      	movs	r1, #11
    5956:	f002 fe06 	bl	8566 <cc2400_set>

	if (modulation == MOD_BT_BASIC_RATE) {
    595a:	7823      	ldrb	r3, [r4, #0]
    595c:	b913      	cbnz	r3, 5964 <br_transmit+0x14c>
		cc2400_set(MDMCTRL, 0x0029);    // 160 kHz frequency deviation
    595e:	2003      	movs	r0, #3
    5960:	2129      	movs	r1, #41	; 0x29
    5962:	e004      	b.n	596e <br_transmit+0x156>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5964:	7823      	ldrb	r3, [r4, #0]
    5966:	2b01      	cmp	r3, #1
    5968:	d11d      	bne.n	59a6 <br_transmit+0x18e>
		cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    596a:	2003      	movs	r0, #3
    596c:	2140      	movs	r1, #64	; 0x40
    596e:	f002 fdfa 	bl	8566 <cc2400_set>
	} else {
		/* oops */
		return;
	}

	clkn_start();
    5972:	f001 fefd 	bl	7770 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5976:	f002 fe97 	bl	86a8 <cc2400_status>
    597a:	0645      	lsls	r5, r0, #25
    597c:	d5fb      	bpl.n	5976 <br_transmit+0x15e>
	cc2400_strobe(SFSON);
    597e:	2061      	movs	r0, #97	; 0x61
    5980:	f002 fe99 	bl	86b6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5984:	f002 fe90 	bl	86a8 <cc2400_status>
    5988:	0740      	lsls	r0, r0, #29
    598a:	d5fb      	bpl.n	5984 <br_transmit+0x16c>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    598c:	4b3a      	ldr	r3, [pc, #232]	; (5a78 <br_transmit+0x260>)
    598e:	2280      	movs	r2, #128	; 0x80
    5990:	601a      	str	r2, [r3, #0]
#endif

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5992:	200e      	movs	r0, #14
    5994:	f002 fdde 	bl	8554 <cc2400_get>
    5998:	f000 001f 	and.w	r0, r0, #31
    599c:	280f      	cmp	r0, #15
    599e:	d1f8      	bne.n	5992 <br_transmit+0x17a>
	cc2400_strobe(STX);
    59a0:	2063      	movs	r0, #99	; 0x63
    59a2:	f002 fe88 	bl	86b6 <cc2400_strobe>
		reverse8(0x11)
	};

	cc2400_tx_sync(reverse16(preamble));

	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    59a6:	2114      	movs	r1, #20
    59a8:	2023      	movs	r0, #35	; 0x23
    59aa:	f002 fddc 	bl	8566 <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    59ae:	2008      	movs	r0, #8
    59b0:	f002 fdd0 	bl	8554 <cc2400_get>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    59b4:	f3c0 0108 	ubfx	r1, r0, #0, #9
	cc2400_tx_sync(reverse16(preamble));

	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    59b8:	4607      	mov	r7, r0
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    59ba:	f441 419c 	orr.w	r1, r1, #19968	; 0x4e00
    59be:	2008      	movs	r0, #8
    59c0:	f002 fdd1 	bl	8566 <cc2400_set>
 */
void br_transmit()
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;
    59c4:	2600      	movs	r6, #0

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));

	while ( requested_mode == MODE_TX_SYMBOLS )
    59c6:	7ca3      	ldrb	r3, [r4, #18]
    59c8:	2b02      	cmp	r3, #2
    59ca:	d145      	bne.n	5a58 <br_transmit+0x240>
	{

		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    59cc:	0876      	lsrs	r6, r6, #1
    59ce:	4d2b      	ldr	r5, [pc, #172]	; (5a7c <br_transmit+0x264>)
    59d0:	682b      	ldr	r3, [r5, #0]
    59d2:	ebb6 0f53 	cmp.w	r6, r3, lsr #1
    59d6:	d105      	bne.n	59e4 <br_transmit+0x1cc>

			// If timer says time to hop, do it.
			if (do_hop) {
    59d8:	7ae3      	ldrb	r3, [r4, #11]
    59da:	2b00      	cmp	r3, #0
    59dc:	d0f7      	beq.n	59ce <br_transmit+0x1b6>
				hop();
    59de:	f7ff fd9f 	bl	5520 <hop>
    59e2:	e7f4      	b.n	59ce <br_transmit+0x1b6>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));

	while ( requested_mode == MODE_TX_SYMBOLS )
	{

		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    59e4:	4b26      	ldr	r3, [pc, #152]	; (5a80 <br_transmit+0x268>)
    59e6:	681a      	ldr	r2, [r3, #0]
    59e8:	f640 03c9 	movw	r3, #2249	; 0x8c9
    59ec:	429a      	cmp	r2, r3
    59ee:	d9f3      	bls.n	59d8 <br_transmit+0x1c0>
			}
		}

		clkn_saved = clkn;

		TXLED_SET;
    59f0:	4b24      	ldr	r3, [pc, #144]	; (5a84 <br_transmit+0x26c>)
    59f2:	f44f 7280 	mov.w	r2, #256	; 0x100
			if (do_hop) {
				hop();
			}
		}

		clkn_saved = clkn;
    59f6:	682e      	ldr	r6, [r5, #0]

		TXLED_SET;

		cc2400_fifo_write(16, data);
    59f8:	2010      	movs	r0, #16
			}
		}

		clkn_saved = clkn;

		TXLED_SET;
    59fa:	601a      	str	r2, [r3, #0]

		cc2400_fifo_write(16, data);
    59fc:	4669      	mov	r1, sp
    59fe:	f002 fdc5 	bl	858c <cc2400_fifo_write>

		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5a02:	200e      	movs	r0, #14
    5a04:	f002 fda6 	bl	8554 <cc2400_get>
    5a08:	f000 001f 	and.w	r0, r0, #31
    5a0c:	280f      	cmp	r0, #15
    5a0e:	d1f8      	bne.n	5a02 <br_transmit+0x1ea>
		TXLED_CLR;
    5a10:	4b1d      	ldr	r3, [pc, #116]	; (5a88 <br_transmit+0x270>)
    5a12:	f44f 7280 	mov.w	r2, #256	; 0x100
    5a16:	601a      	str	r2, [r3, #0]

		cc2400_strobe(SRFOFF);
    5a18:	2064      	movs	r0, #100	; 0x64
    5a1a:	f002 fe4c 	bl	86b6 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    5a1e:	f002 fe43 	bl	86a8 <cc2400_status>
    5a22:	0741      	lsls	r1, r0, #29
    5a24:	d4fb      	bmi.n	5a1e <br_transmit+0x206>

		while (!(cc2400_status() & XOSC16M_STABLE));
    5a26:	f002 fe3f 	bl	86a8 <cc2400_status>
    5a2a:	0642      	lsls	r2, r0, #25
    5a2c:	d5fb      	bpl.n	5a26 <br_transmit+0x20e>
		cc2400_strobe(SFSON);
    5a2e:	2061      	movs	r0, #97	; 0x61
    5a30:	f002 fe41 	bl	86b6 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    5a34:	f002 fe38 	bl	86a8 <cc2400_status>
    5a38:	0743      	lsls	r3, r0, #29
    5a3a:	d5fb      	bpl.n	5a34 <br_transmit+0x21c>

		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5a3c:	200e      	movs	r0, #14
    5a3e:	f002 fd89 	bl	8554 <cc2400_get>
    5a42:	f000 001f 	and.w	r0, r0, #31
    5a46:	280f      	cmp	r0, #15
    5a48:	d1f8      	bne.n	5a3c <br_transmit+0x224>
		cc2400_strobe(STX);
    5a4a:	2063      	movs	r0, #99	; 0x63
    5a4c:	f002 fe33 	bl	86b6 <cc2400_strobe>

		handle_usb(clkn);
    5a50:	6828      	ldr	r0, [r5, #0]
    5a52:	f001 fd65 	bl	7520 <handle_usb>
    5a56:	e7b6      	b.n	59c6 <br_transmit+0x1ae>
	}

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5a58:	4b0c      	ldr	r3, [pc, #48]	; (5a8c <br_transmit+0x274>)
    5a5a:	2280      	movs	r2, #128	; 0x80
    5a5c:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    5a5e:	2008      	movs	r0, #8
    5a60:	4639      	mov	r1, r7
    5a62:	f002 fd80 	bl	8566 <cc2400_set>
}
    5a66:	b004      	add	sp, #16
    5a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a6c:	100010c0 	.word	0x100010c0
    5a70:	10000448 	.word	0x10000448
    5a74:	10000a1c 	.word	0x10000a1c
    5a78:	2009c058 	.word	0x2009c058
    5a7c:	10000bc4 	.word	0x10000bc4
    5a80:	40004008 	.word	0x40004008
    5a84:	2009c038 	.word	0x2009c038
    5a88:	2009c03c 	.word	0x2009c03c
    5a8c:	2009c05c 	.word	0x2009c05c

00005a90 <reset_le>:
	le.syncl = aa_rev & 0xffff;
	le.synch = aa_rev >> 16;
}

/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
    5a90:	b508      	push	{r3, lr}
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    5a92:	480f      	ldr	r0, [pc, #60]	; (5ad0 <reset_le+0x40>)
    5a94:	f7fe fd3c 	bl	4510 <le_set_access_address>
	le.crc_init  = 0x555555;               // advertising channel CRCInit
    5a98:	4b0e      	ldr	r3, [pc, #56]	; (5ad4 <reset_le+0x44>)
    5a9a:	4a0f      	ldr	r2, [pc, #60]	; (5ad8 <reset_le+0x48>)
    5a9c:	60da      	str	r2, [r3, #12]
	le.crc_init_reversed = 0xAAAAAA;
    5a9e:	4a0f      	ldr	r2, [pc, #60]	; (5adc <reset_le+0x4c>)
    5aa0:	611a      	str	r2, [r3, #16]
	le.crc_verify = 0;
    5aa2:	2200      	movs	r2, #0

	le.channel_idx = 0;
	le.channel_increment = 0;

	le.conn_epoch = 0;
	le.interval_timer = 0;
    5aa4:	841a      	strh	r2, [r3, #32]
/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
	le_set_access_address(0x8e89bed6);     // advertising channel access address
	le.crc_init  = 0x555555;               // advertising channel CRCInit
	le.crc_init_reversed = 0xAAAAAA;
	le.crc_verify = 0;
    5aa6:	615a      	str	r2, [r3, #20]

	le.conn_epoch = 0;
	le.interval_timer = 0;
	le.conn_interval = 0;
	le.conn_interval = 0;
	le.conn_count = 0;
    5aa8:	849a      	strh	r2, [r3, #36]	; 0x24
void reset_le() {
	le_set_access_address(0x8e89bed6);     // advertising channel access address
	le.crc_init  = 0x555555;               // advertising channel CRCInit
	le.crc_init_reversed = 0xAAAAAA;
	le.crc_verify = 0;
	le.last_packet = 0;
    5aaa:	645a      	str	r2, [r3, #68]	; 0x44

	le.link_state = LINK_INACTIVE;
    5aac:	761a      	strb	r2, [r3, #24]

	le.channel_idx = 0;
    5aae:	765a      	strb	r2, [r3, #25]
	le.channel_increment = 0;
    5ab0:	769a      	strb	r2, [r3, #26]

	le.conn_epoch = 0;
    5ab2:	61da      	str	r2, [r3, #28]
	le.interval_timer = 0;
	le.conn_interval = 0;
    5ab4:	845a      	strh	r2, [r3, #34]	; 0x22
	le.conn_interval = 0;
	le.conn_count = 0;

	le.win_size = 0;
    5ab6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	le.win_offset = 0;
    5aba:	851a      	strh	r2, [r3, #40]	; 0x28

	le.update_pending = 0;
    5abc:	62da      	str	r2, [r3, #44]	; 0x2c
	le.update_instant = 0;
    5abe:	861a      	strh	r2, [r3, #48]	; 0x30
	le.interval_update = 0;
    5ac0:	865a      	strh	r2, [r3, #50]	; 0x32
	le.win_size_update = 0;
    5ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	le.win_offset_update = 0;
    5ac6:	86da      	strh	r2, [r3, #54]	; 0x36

	do_hop = 0;
    5ac8:	4b05      	ldr	r3, [pc, #20]	; (5ae0 <reset_le+0x50>)
    5aca:	72da      	strb	r2, [r3, #11]
    5acc:	bd08      	pop	{r3, pc}
    5ace:	bf00      	nop
    5ad0:	8e89bed6 	.word	0x8e89bed6
    5ad4:	10000448 	.word	0x10000448
    5ad8:	00555555 	.word	0x00555555
    5adc:	00aaaaaa 	.word	0x00aaaaaa
    5ae0:	10000a1c 	.word	0x10000a1c

00005ae4 <reset_le_promisc>:
}

// reset LE Promisc state
void reset_le_promisc(void) {
    5ae4:	b510      	push	{r4, lr}
	memset(&le_promisc, 0, sizeof(le_promisc));
    5ae6:	4c06      	ldr	r4, [pc, #24]	; (5b00 <reset_le_promisc+0x1c>)
    5ae8:	2100      	movs	r1, #0
    5aea:	4620      	mov	r0, r4
    5aec:	f44f 7284 	mov.w	r2, #264	; 0x108
    5af0:	f7fe fb42 	bl	4178 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    5af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5af8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    5afc:	bd10      	pop	{r4, pc}
    5afe:	bf00      	nop
    5b00:	10000c08 	.word	0x10000c08

00005b04 <bt_generic_le>:
}

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    5b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    5b08:	4c6a      	ldr	r4, [pc, #424]	; (5cb4 <bt_generic_le+0x1b0>)
    5b0a:	2301      	movs	r3, #1
	le_promisc.smallest_hop_interval = 0xffffffff;
}

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    5b0c:	4682      	mov	sl, r0
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    5b0e:	7023      	strb	r3, [r4, #0]
	mode = active_mode;
    5b10:	7460      	strb	r0, [r4, #17]

	reset_le();
    5b12:	f7ff ffbd 	bl	5a90 <reset_le>

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5b16:	4b68      	ldr	r3, [pc, #416]	; (5cb8 <bt_generic_le+0x1b4>)
    5b18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000

	RXLED_CLR;
    5b1c:	4f67      	ldr	r7, [pc, #412]	; (5cbc <bt_generic_le+0x1b8>)
	mode = active_mode;

	reset_le();

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5b1e:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    5b20:	2310      	movs	r3, #16
    5b22:	603b      	str	r3, [r7, #0]

	queue_init();
    5b24:	f001 fc9a 	bl	745c <queue_init>
	dio_ssp_init();
    5b28:	f002 fc8e 	bl	8448 <dio_ssp_init>
	dma_init();
    5b2c:	f001 fe78 	bl	7820 <dma_init>
	dio_ssp_start();
    5b30:	f001 fefc 	bl	792c <dio_ssp_start>
	cc2400_rx();
    5b34:	f7fe fbf8 	bl	4328 <cc2400_rx>

	cs_trigger_enable();
    5b38:	f001 fdb0 	bl	769c <cs_trigger_enable>

	hold = 0;
    5b3c:	2600      	movs	r6, #0

	while (requested_mode == active_mode) {
    5b3e:	7ca3      	ldrb	r3, [r4, #18]
    5b40:	4553      	cmp	r3, sl
    5b42:	f040 80a5 	bne.w	5c90 <bt_generic_le+0x18c>
		if (requested_channel != 0) {
    5b46:	4b5b      	ldr	r3, [pc, #364]	; (5cb4 <bt_generic_le+0x1b0>)
    5b48:	89db      	ldrh	r3, [r3, #14]
    5b4a:	b29b      	uxth	r3, r3
    5b4c:	b1cb      	cbz	r3, 5b82 <bt_generic_le+0x7e>
			cc2400_strobe(SRFOFF);
    5b4e:	2064      	movs	r0, #100	; 0x64
    5b50:	f002 fdb1 	bl	86b6 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5b54:	f002 fda8 	bl	86a8 <cc2400_status>
    5b58:	0742      	lsls	r2, r0, #29
    5b5a:	d4fb      	bmi.n	5b54 <bt_generic_le+0x50>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    5b5c:	4b58      	ldr	r3, [pc, #352]	; (5cc0 <bt_generic_le+0x1bc>)
    5b5e:	2002      	movs	r0, #2
    5b60:	8819      	ldrh	r1, [r3, #0]
    5b62:	3901      	subs	r1, #1
    5b64:	b289      	uxth	r1, r1
    5b66:	f002 fcfe 	bl	8566 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    5b6a:	2061      	movs	r0, #97	; 0x61
    5b6c:	f002 fda3 	bl	86b6 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5b70:	f002 fd9a 	bl	86a8 <cc2400_status>
    5b74:	0743      	lsls	r3, r0, #29
    5b76:	d5fb      	bpl.n	5b70 <bt_generic_le+0x6c>

			/* RX mode */
			cc2400_strobe(SRX);
    5b78:	2062      	movs	r0, #98	; 0x62
    5b7a:	f002 fd9c 	bl	86b6 <cc2400_strobe>

			requested_channel = 0;
    5b7e:	2300      	movs	r3, #0
    5b80:	81e3      	strh	r3, [r4, #14]
		}

		if (do_hop) {
    5b82:	7ae3      	ldrb	r3, [r4, #11]
    5b84:	b113      	cbz	r3, 5b8c <bt_generic_le+0x88>
			hop();
    5b86:	f7ff fccb 	bl	5520 <hop>
    5b8a:	e002      	b.n	5b92 <bt_generic_le+0x8e>
		} else {
			TXLED_CLR;
    5b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
    5b90:	603b      	str	r3, [r7, #0]
		}

		RXLED_CLR;
    5b92:	2310      	movs	r3, #16
    5b94:	603b      	str	r3, [r7, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    5b96:	f001 fcd7 	bl	7548 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    5b9a:	2580      	movs	r5, #128	; 0x80
		while ((rx_tc == 0) && (rx_err == 0))
    5b9c:	4b49      	ldr	r3, [pc, #292]	; (5cc4 <bt_generic_le+0x1c0>)
    5b9e:	f8df 9144 	ldr.w	r9, [pc, #324]	; 5ce4 <bt_generic_le+0x1e0>
    5ba2:	681a      	ldr	r2, [r3, #0]
    5ba4:	4698      	mov	r8, r3
    5ba6:	b9d2      	cbnz	r2, 5bde <bt_generic_le+0xda>
    5ba8:	f8d9 3000 	ldr.w	r3, [r9]
    5bac:	b9bb      	cbnz	r3, 5bde <bt_generic_le+0xda>
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5bae:	2006      	movs	r0, #6
    5bb0:	f002 fcd0 	bl	8554 <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5bb4:	4b44      	ldr	r3, [pc, #272]	; (5cc8 <bt_generic_le+0x1c4>)
		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0))
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5bb6:	f3c0 2007 	ubfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5bba:	781b      	ldrb	r3, [r3, #0]
    5bbc:	b15b      	cbz	r3, 5bd6 <bt_generic_le+0xd2>
    5bbe:	2d80      	cmp	r5, #128	; 0x80
    5bc0:	d109      	bne.n	5bd6 <bt_generic_le+0xd2>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    5bc2:	4b42      	ldr	r3, [pc, #264]	; (5ccc <bt_generic_le+0x1c8>)
    5bc4:	b240      	sxtb	r0, r0
    5bc6:	f993 5000 	ldrsb.w	r5, [r3]
    5bca:	3536      	adds	r5, #54	; 0x36
    5bcc:	42a8      	cmp	r0, r5
    5bce:	bfb8      	it	lt
    5bd0:	4628      	movlt	r0, r5
    5bd2:	b2c5      	uxtb	r5, r0
				rssi_at_trigger = rssi;
    5bd4:	4628      	mov	r0, r5
			}
			rssi_add(rssi);
    5bd6:	b240      	sxtb	r0, r0
    5bd8:	f001 fcd2 	bl	7580 <rssi_add>
    5bdc:	e7de      	b.n	5b9c <bt_generic_le+0x98>
		}

		if (rx_err) {
    5bde:	f8d9 3000 	ldr.w	r3, [r9]
    5be2:	b11b      	cbz	r3, 5bec <bt_generic_le+0xe8>
			status |= DMA_ERROR;
    5be4:	7863      	ldrb	r3, [r4, #1]
    5be6:	f043 0302 	orr.w	r3, r3, #2
    5bea:	7063      	strb	r3, [r4, #1]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    5bec:	f8d8 3000 	ldr.w	r3, [r8]
    5bf0:	2b00      	cmp	r3, #0
    5bf2:	d059      	beq.n	5ca8 <bt_generic_le+0x1a4>
			goto rx_continue;

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    5bf4:	4b33      	ldr	r3, [pc, #204]	; (5cc4 <bt_generic_le+0x1c0>)
    5bf6:	681b      	ldr	r3, [r3, #0]
    5bf8:	2b01      	cmp	r3, #1
			status |= DMA_OVERFLOW;
    5bfa:	bf82      	ittt	hi
    5bfc:	7863      	ldrbhi	r3, [r4, #1]
    5bfe:	f043 0301 	orrhi.w	r3, r3, #1
    5c02:	7063      	strbhi	r3, [r4, #1]

		rssi_iir_update(channel);
    5c04:	4b2e      	ldr	r3, [pc, #184]	; (5cc0 <bt_generic_le+0x1bc>)
    5c06:	8818      	ldrh	r0, [r3, #0]
    5c08:	b280      	uxth	r0, r0
    5c0a:	f001 fcd9 	bl	75c0 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    5c0e:	4a2e      	ldr	r2, [pc, #184]	; (5cc8 <bt_generic_le+0x1c4>)
    5c10:	7813      	ldrb	r3, [r2, #0]
    5c12:	b913      	cbnz	r3, 5c1a <bt_generic_le+0x116>
    5c14:	4b2e      	ldr	r3, [pc, #184]	; (5cd0 <bt_generic_le+0x1cc>)
    5c16:	781b      	ldrb	r3, [r3, #0]
    5c18:	b133      	cbz	r3, 5c28 <bt_generic_le+0x124>
			status |= CS_TRIGGER;
    5c1a:	7863      	ldrb	r3, [r4, #1]
			hold = CS_HOLD_TIME;
    5c1c:	2602      	movs	r6, #2
		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
			status |= CS_TRIGGER;
    5c1e:	f043 0308 	orr.w	r3, r3, #8
    5c22:	7063      	strb	r3, [r4, #1]
			hold = CS_HOLD_TIME;
			cs_trigger = 0;
    5c24:	2300      	movs	r3, #0
    5c26:	7013      	strb	r3, [r2, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    5c28:	4b28      	ldr	r3, [pc, #160]	; (5ccc <bt_generic_le+0x1c8>)
    5c2a:	4a2a      	ldr	r2, [pc, #168]	; (5cd4 <bt_generic_le+0x1d0>)
    5c2c:	f993 3000 	ldrsb.w	r3, [r3]
    5c30:	f992 2000 	ldrsb.w	r2, [r2]
    5c34:	3335      	adds	r3, #53	; 0x35
    5c36:	4293      	cmp	r3, r2
    5c38:	da05      	bge.n	5c46 <bt_generic_le+0x142>
			status |= RSSI_TRIGGER;
    5c3a:	7863      	ldrb	r3, [r4, #1]
			hold = CS_HOLD_TIME;
    5c3c:	2602      	movs	r6, #2
			hold = CS_HOLD_TIME;
			cs_trigger = 0;
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
			status |= RSSI_TRIGGER;
    5c3e:	f043 0310 	orr.w	r3, r3, #16
    5c42:	7063      	strb	r3, [r4, #1]
    5c44:	e000      	b.n	5c48 <bt_generic_le+0x144>
			hold = CS_HOLD_TIME;
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    5c46:	b37e      	cbz	r6, 5ca8 <bt_generic_le+0x1a4>
			goto rx_continue;
		}
		hold--;

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    5c48:	4823      	ldr	r0, [pc, #140]	; (5cd8 <bt_generic_le+0x1d4>)
    5c4a:	f44f 72c8 	mov.w	r2, #400	; 0x190

		/* Hold expired? Ignore data. */
		if (hold == 0) {
			goto rx_continue;
		}
		hold--;
    5c4e:	3e01      	subs	r6, #1

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    5c50:	f500 71c8 	add.w	r1, r0, #400	; 0x190
    5c54:	f003 fa54 	bl	9100 <memcpy>

		/* Hold expired? Ignore data. */
		if (hold == 0) {
			goto rx_continue;
		}
		hold--;
    5c58:	b2f6      	uxtb	r6, r6

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    5c5a:	2200      	movs	r2, #0
    5c5c:	4b1e      	ldr	r3, [pc, #120]	; (5cd8 <bt_generic_le+0x1d4>)
    5c5e:	f102 0032 	add.w	r0, r2, #50	; 0x32
    5c62:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
			cs_trigger = 0;
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
			status |= RSSI_TRIGGER;
			hold = CS_HOLD_TIME;
    5c66:	2100      	movs	r1, #0

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5c68:	4d1c      	ldr	r5, [pc, #112]	; (5cdc <bt_generic_le+0x1d8>)
    5c6a:	682b      	ldr	r3, [r5, #0]
    5c6c:	5c9b      	ldrb	r3, [r3, r2]
				idle_rxbuf[i] <<= 1;
    5c6e:	682d      	ldr	r5, [r5, #0]

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5c70:	09db      	lsrs	r3, r3, #7
    5c72:	5443      	strb	r3, [r0, r1]
				idle_rxbuf[i] <<= 1;
    5c74:	5cab      	ldrb	r3, [r5, r2]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5c76:	3101      	adds	r1, #1
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
    5c78:	005b      	lsls	r3, r3, #1
    5c7a:	b2db      	uxtb	r3, r3
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5c7c:	2908      	cmp	r1, #8
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
    5c7e:	54ab      	strb	r3, [r5, r2]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5c80:	d1f2      	bne.n	5c68 <bt_generic_le+0x164>

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    5c82:	3201      	adds	r2, #1
    5c84:	2a32      	cmp	r2, #50	; 0x32
    5c86:	d1e9      	bne.n	5c5c <bt_generic_le+0x158>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
			}
		}

		int ret = data_cb(unpacked);
    5c88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5c8a:	4813      	ldr	r0, [pc, #76]	; (5cd8 <bt_generic_le+0x1d4>)
    5c8c:	4798      	blx	r3
		if (!ret) break;
    5c8e:	b958      	cbnz	r0, 5ca8 <bt_generic_le+0x1a4>
		rx_tc = 0;
		rx_err = 0;
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    5c90:	4b13      	ldr	r3, [pc, #76]	; (5ce0 <bt_generic_le+0x1dc>)
    5c92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5c96:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    5c98:	f7fe fc46 	bl	4528 <cc2400_idle>
	dio_ssp_stop();
    5c9c:	f001 fe6c 	bl	7978 <dio_ssp_stop>
	cs_trigger_disable();
}
    5ca0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ICER0 = ICER0_ICE_USB;

	// reset the radio completely
	cc2400_idle();
	dio_ssp_stop();
	cs_trigger_disable();
    5ca4:	f001 bd12 	b.w	76cc <cs_trigger_disable>

		int ret = data_cb(unpacked);
		if (!ret) break;

	rx_continue:
		rx_tc = 0;
    5ca8:	2300      	movs	r3, #0
    5caa:	f8c8 3000 	str.w	r3, [r8]
		rx_err = 0;
    5cae:	f8c9 3000 	str.w	r3, [r9]
    5cb2:	e744      	b.n	5b3e <bt_generic_le+0x3a>
    5cb4:	10000a1c 	.word	0x10000a1c
    5cb8:	e000e100 	.word	0xe000e100
    5cbc:	2009c03c 	.word	0x2009c03c
    5cc0:	10000448 	.word	0x10000448
    5cc4:	10000ba4 	.word	0x10000ba4
    5cc8:	100010bd 	.word	0x100010bd
    5ccc:	100010bc 	.word	0x100010bc
    5cd0:	10000d10 	.word	0x10000d10
    5cd4:	10000ba8 	.word	0x10000ba8
    5cd8:	10000d24 	.word	0x10000d24
    5cdc:	10000d20 	.word	0x10000d20
    5ce0:	e000e180 	.word	0xe000e180
    5ce4:	100010b8 	.word	0x100010b8

00005ce8 <bt_le_sync>:
	cs_trigger_disable();
}


void bt_le_sync(u8 active_mode)
{
    5ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5cec:	b093      	sub	sp, #76	; 0x4c
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    5cee:	4da7      	ldr	r5, [pc, #668]	; (5f8c <bt_le_sync+0x2a4>)
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    5cf0:	4ca7      	ldr	r4, [pc, #668]	; (5f90 <bt_le_sync+0x2a8>)
{
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    5cf2:	2301      	movs	r3, #1
    5cf4:	702b      	strb	r3, [r5, #0]
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    5cf6:	7623      	strb	r3, [r4, #24]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5cf8:	4ba6      	ldr	r3, [pc, #664]	; (5f94 <bt_le_sync+0x2ac>)
    5cfa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000

	RXLED_CLR;
    5cfe:	4ea6      	ldr	r6, [pc, #664]	; (5f98 <bt_le_sync+0x2b0>)
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
	mode = active_mode;
    5d00:	7468      	strb	r0, [r5, #17]

	le.link_state = LINK_LISTENING;

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5d02:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    5d04:	2310      	movs	r3, #16
    5d06:	6033      	str	r3, [r6, #0]
	cs_trigger_disable();
}


void bt_le_sync(u8 active_mode)
{
    5d08:	4680      	mov	r8, r0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;

	RXLED_CLR;

	queue_init();
    5d0a:	f001 fba7 	bl	745c <queue_init>
	dio_ssp_init();
    5d0e:	f002 fb9b 	bl	8448 <dio_ssp_init>
	dma_init_le();
    5d12:	f001 fdc3 	bl	789c <dma_init_le>
	dio_ssp_start();
    5d16:	f001 fe09 	bl	792c <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    5d1a:	6860      	ldr	r0, [r4, #4]
    5d1c:	f002 fb30 	bl	8380 <rbit>
    5d20:	f7fe fb54 	bl	43cc <cc2400_rx_sync>
    5d24:	46b1      	mov	r9, r6

	while (requested_mode == active_mode) {
    5d26:	7cab      	ldrb	r3, [r5, #18]
    5d28:	4543      	cmp	r3, r8
    5d2a:	f040 81a2 	bne.w	6072 <bt_le_sync+0x38a>
		if (requested_channel != 0) {
    5d2e:	4b97      	ldr	r3, [pc, #604]	; (5f8c <bt_le_sync+0x2a4>)
    5d30:	89db      	ldrh	r3, [r3, #14]
    5d32:	b29b      	uxth	r3, r3
    5d34:	b1c3      	cbz	r3, 5d68 <bt_le_sync+0x80>
			cc2400_strobe(SRFOFF);
    5d36:	2064      	movs	r0, #100	; 0x64
    5d38:	f002 fcbd 	bl	86b6 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5d3c:	f002 fcb4 	bl	86a8 <cc2400_status>
    5d40:	0747      	lsls	r7, r0, #29
    5d42:	d4fb      	bmi.n	5d3c <bt_le_sync+0x54>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    5d44:	8821      	ldrh	r1, [r4, #0]
    5d46:	2002      	movs	r0, #2
    5d48:	3901      	subs	r1, #1
    5d4a:	b289      	uxth	r1, r1
    5d4c:	f002 fc0b 	bl	8566 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    5d50:	2061      	movs	r0, #97	; 0x61
    5d52:	f002 fcb0 	bl	86b6 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5d56:	f002 fca7 	bl	86a8 <cc2400_status>
    5d5a:	0746      	lsls	r6, r0, #29
    5d5c:	d5fb      	bpl.n	5d56 <bt_le_sync+0x6e>

			/* RX mode */
			cc2400_strobe(SRX);
    5d5e:	2062      	movs	r0, #98	; 0x62
    5d60:	f002 fca9 	bl	86b6 <cc2400_strobe>

			requested_channel = 0;
    5d64:	2300      	movs	r3, #0
    5d66:	81eb      	strh	r3, [r5, #14]
		}

		RXLED_CLR;
    5d68:	2310      	movs	r3, #16
    5d6a:	f8c9 3000 	str.w	r3, [r9]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    5d6e:	f001 fbeb 	bl	7548 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    5d72:	4b8a      	ldr	r3, [pc, #552]	; (5f9c <bt_le_sync+0x2b4>)
    5d74:	681a      	ldr	r2, [r3, #0]
    5d76:	469a      	mov	sl, r3
    5d78:	b942      	cbnz	r2, 5d8c <bt_le_sync+0xa4>
    5d7a:	4b89      	ldr	r3, [pc, #548]	; (5fa0 <bt_le_sync+0x2b8>)
    5d7c:	681b      	ldr	r3, [r3, #0]
    5d7e:	b92b      	cbnz	r3, 5d8c <bt_le_sync+0xa4>
    5d80:	7aeb      	ldrb	r3, [r5, #11]
    5d82:	b91b      	cbnz	r3, 5d8c <bt_le_sync+0xa4>
    5d84:	4b81      	ldr	r3, [pc, #516]	; (5f8c <bt_le_sync+0x2a4>)
    5d86:	7c9b      	ldrb	r3, [r3, #18]
    5d88:	4543      	cmp	r3, r8
    5d8a:	d0f2      	beq.n	5d72 <bt_le_sync+0x8a>
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5d8c:	2006      	movs	r0, #6
    5d8e:	f002 fbe1 	bl	8554 <cc2400_get>
		rssi_min = rssi_max = rssi;
    5d92:	4b84      	ldr	r3, [pc, #528]	; (5fa4 <bt_le_sync+0x2bc>)
		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5d94:	f3c0 2007 	ubfx	r0, r0, #8, #8
		rssi_min = rssi_max = rssi;
    5d98:	7018      	strb	r0, [r3, #0]
    5d9a:	4b83      	ldr	r3, [pc, #524]	; (5fa8 <bt_le_sync+0x2c0>)

		if (requested_mode != active_mode) {
    5d9c:	4a7b      	ldr	r2, [pc, #492]	; (5f8c <bt_le_sync+0x2a4>)
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
		rssi_min = rssi_max = rssi;
    5d9e:	7018      	strb	r0, [r3, #0]

		if (requested_mode != active_mode) {
    5da0:	7cab      	ldrb	r3, [r5, #18]
    5da2:	4543      	cmp	r3, r8
    5da4:	f040 8165 	bne.w	6072 <bt_le_sync+0x38a>
			goto cleanup;
		}

		if (rx_err) {
    5da8:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 5fa0 <bt_le_sync+0x2b8>
    5dac:	f8db 3000 	ldr.w	r3, [fp]
    5db0:	46dc      	mov	ip, fp
    5db2:	b11b      	cbz	r3, 5dbc <bt_le_sync+0xd4>
			status |= DMA_ERROR;
    5db4:	7853      	ldrb	r3, [r2, #1]
    5db6:	f043 0302 	orr.w	r3, r3, #2
    5dba:	7053      	strb	r3, [r2, #1]
		}

		if (do_hop)
    5dbc:	7aeb      	ldrb	r3, [r5, #11]
    5dbe:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    5dc2:	2b00      	cmp	r3, #0
    5dc4:	f040 80a6 	bne.w	5f14 <bt_le_sync+0x22c>
			goto rx_flush;

		/* No DMA transfer? */
		if (!rx_tc)
    5dc8:	f8da 3000 	ldr.w	r3, [sl]
    5dcc:	2b00      	cmp	r3, #0
    5dce:	d0aa      	beq.n	5d26 <bt_le_sync+0x3e>
			continue;

		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
    5dd0:	2234      	movs	r2, #52	; 0x34
    5dd2:	a805      	add	r0, sp, #20
    5dd4:	f8cd c00c 	str.w	ip, [sp, #12]
    5dd8:	f7fe f9ce 	bl	4178 <memset>
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    5ddc:	8820      	ldrh	r0, [r4, #0]
		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;
    5dde:	6863      	ldr	r3, [r4, #4]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    5de0:	3862      	subs	r0, #98	; 0x62
    5de2:	b2c0      	uxtb	r0, r0
		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;
    5de4:	9305      	str	r3, [sp, #20]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    5de6:	f001 fa3d 	bl	7264 <btle_channel_index>
    5dea:	2630      	movs	r6, #48	; 0x30
    5dec:	4346      	muls	r6, r0
    5dee:	4f6f      	ldr	r7, [pc, #444]	; (5fac <bt_le_sync+0x2c4>)
    5df0:	19bb      	adds	r3, r7, r6
    5df2:	9301      	str	r3, [sp, #4]
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    5df4:	4b6e      	ldr	r3, [pc, #440]	; (5fb0 <bt_le_sync+0x2c8>)
    5df6:	7818      	ldrb	r0, [r3, #0]
					   | rxbuf1[i+1] << 16
    5df8:	785a      	ldrb	r2, [r3, #1]
					   | rxbuf1[i+2] << 8
    5dfa:	f893 e002 	ldrb.w	lr, [r3, #2]
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    5dfe:	0412      	lsls	r2, r2, #16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
    5e00:	78d9      	ldrb	r1, [r3, #3]
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    5e02:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    5e06:	4308      	orrs	r0, r1
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e08:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
    5e0c:	9302      	str	r3, [sp, #8]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e0e:	f002 fab7 	bl	8380 <rbit>
    5e12:	59be      	ldr	r6, [r7, r6]
		}

		unsigned len = (p[5] & 0x3f) + 2;
		if (len > 39)
    5e14:	9b02      	ldr	r3, [sp, #8]
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e16:	4070      	eors	r0, r6
		}

		unsigned len = (p[5] & 0x3f) + 2;
    5e18:	f3c0 2605 	ubfx	r6, r0, #8, #6
    5e1c:	1cb7      	adds	r7, r6, #2
		if (len > 39)
    5e1e:	2f27      	cmp	r7, #39	; 0x27
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e20:	9006      	str	r0, [sp, #24]
		}

		unsigned len = (p[5] & 0x3f) + 2;
		if (len > 39)
    5e22:	f8dd c00c 	ldr.w	ip, [sp, #12]
    5e26:	dc75      	bgt.n	5f14 <bt_le_sync+0x22c>
			goto rx_flush;

		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    5e28:	3608      	adds	r6, #8
    5e2a:	08b2      	lsrs	r2, r6, #2
		if (total_transfers < 11) {
    5e2c:	2a0b      	cmp	r2, #11
    5e2e:	d00d      	beq.n	5e4c <bt_le_sync+0x164>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    5e30:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5e34:	4a5f      	ldr	r2, [pc, #380]	; (5fb4 <bt_le_sync+0x2cc>)
    5e36:	6812      	ldr	r2, [r2, #0]
    5e38:	429a      	cmp	r2, r3
    5e3a:	d20b      	bcs.n	5e54 <bt_le_sync+0x16c>
    5e3c:	f8dc 2000 	ldr.w	r2, [ip]
    5e40:	2a00      	cmp	r2, #0
    5e42:	d0f7      	beq.n	5e34 <bt_le_sync+0x14c>
    5e44:	e006      	b.n	5e54 <bt_le_sync+0x16c>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    5e46:	f8dc 3000 	ldr.w	r3, [ip]
    5e4a:	b91b      	cbnz	r3, 5e54 <bt_le_sync+0x16c>
    5e4c:	4b5a      	ldr	r3, [pc, #360]	; (5fb8 <bt_le_sync+0x2d0>)
    5e4e:	681b      	ldr	r3, [r3, #0]
    5e50:	07d8      	lsls	r0, r3, #31
    5e52:	d4f8      	bmi.n	5e46 <bt_le_sync+0x15e>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5e54:	4a59      	ldr	r2, [pc, #356]	; (5fbc <bt_le_sync+0x2d4>)

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);
    5e56:	2061      	movs	r0, #97	; 0x61
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5e58:	6813      	ldr	r3, [r2, #0]
    5e5a:	f023 0301 	bic.w	r3, r3, #1
    5e5e:	6013      	str	r3, [r2, #0]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);
    5e60:	f002 fc29 	bl	86b6 <cc2400_strobe>

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5e64:	2304      	movs	r3, #4
			uint32_t v = rxbuf1[i+0] << 24
    5e66:	4952      	ldr	r1, [pc, #328]	; (5fb0 <bt_le_sync+0x2c8>)
    5e68:	1c58      	adds	r0, r3, #1
    5e6a:	5cca      	ldrb	r2, [r1, r3]
    5e6c:	f103 0e03 	add.w	lr, r3, #3
					   | rxbuf1[i+1] << 16
    5e70:	f811 c000 	ldrb.w	ip, [r1, r0]
    5e74:	1c98      	adds	r0, r3, #2
					   | rxbuf1[i+2] << 8
    5e76:	5c08      	ldrb	r0, [r1, r0]
					   | rxbuf1[i+3] << 0;
    5e78:	f811 e00e 	ldrb.w	lr, [r1, lr]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e7c:	1099      	asrs	r1, r3, #2
    5e7e:	ea4e 6202 	orr.w	r2, lr, r2, lsl #24
    5e82:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
    5e86:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    5e8a:	9303      	str	r3, [sp, #12]
    5e8c:	9102      	str	r1, [sp, #8]
    5e8e:	f002 fa77 	bl	8380 <rbit>
    5e92:	9902      	ldr	r1, [sp, #8]
    5e94:	ab12      	add	r3, sp, #72	; 0x48
    5e96:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
    5e9a:	9b01      	ldr	r3, [sp, #4]
    5e9c:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5ea0:	9b03      	ldr	r3, [sp, #12]
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5ea2:	4050      	eors	r0, r2

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5ea4:	3304      	adds	r3, #4
    5ea6:	2b2c      	cmp	r3, #44	; 0x2c
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5ea8:	f84e 0c30 	str.w	r0, [lr, #-48]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5eac:	d1db      	bne.n	5e66 <bt_le_sync+0x17e>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
    5eae:	6963      	ldr	r3, [r4, #20]
    5eb0:	b9db      	cbnz	r3, 5eea <bt_le_sync+0x202>
			if (calc_crc != wire_crc) // skip packets with a bad CRC
				goto rx_flush;
		}


		RXLED_SET;
    5eb2:	4b43      	ldr	r3, [pc, #268]	; (5fc0 <bt_le_sync+0x2d8>)
    5eb4:	2210      	movs	r2, #16
    5eb6:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    5eb8:	a805      	add	r0, sp, #20
    5eba:	69ab      	ldr	r3, [r5, #24]
    5ebc:	4798      	blx	r3

		// disable USB interrupts while we touch USB data structures
		ICER0 = ICER0_ICE_USB;
    5ebe:	4b41      	ldr	r3, [pc, #260]	; (5fc4 <bt_le_sync+0x2dc>)
    5ec0:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    5ec4:	601e      	str	r6, [r3, #0]
		enqueue(LE_PACKET, (uint8_t *)packet);
    5ec6:	a905      	add	r1, sp, #20
    5ec8:	2001      	movs	r0, #1
    5eca:	f7fe fad5 	bl	4478 <enqueue>
		ISER0 = ISER0_ISE_USB;

		le.last_packet = CLK100NS;
    5ece:	f640 4135 	movw	r1, #3125	; 0xc35
		packet_cb((uint8_t *)packet);

		// disable USB interrupts while we touch USB data structures
		ICER0 = ICER0_ICE_USB;
		enqueue(LE_PACKET, (uint8_t *)packet);
		ISER0 = ISER0_ISE_USB;
    5ed2:	4b30      	ldr	r3, [pc, #192]	; (5f94 <bt_le_sync+0x2ac>)
    5ed4:	601e      	str	r6, [r3, #0]

		le.last_packet = CLK100NS;
    5ed6:	4b3c      	ldr	r3, [pc, #240]	; (5fc8 <bt_le_sync+0x2e0>)
    5ed8:	681a      	ldr	r2, [r3, #0]
    5eda:	4b3c      	ldr	r3, [pc, #240]	; (5fcc <bt_le_sync+0x2e4>)
    5edc:	f3c2 0213 	ubfx	r2, r2, #0, #20
    5ee0:	681b      	ldr	r3, [r3, #0]
    5ee2:	fb01 3302 	mla	r3, r1, r2, r3
    5ee6:	6463      	str	r3, [r4, #68]	; 0x44
    5ee8:	e014      	b.n	5f14 <bt_le_sync+0x22c>
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    5eea:	4b29      	ldr	r3, [pc, #164]	; (5f90 <bt_le_sync+0x2a8>)
    5eec:	463a      	mov	r2, r7
    5eee:	6918      	ldr	r0, [r3, #16]
    5ef0:	a906      	add	r1, sp, #24
    5ef2:	f001 fa37 	bl	7364 <btle_crcgen_lut>
			u32 wire_crc = (p[4+len+2] << 16)
    5ef6:	ab12      	add	r3, sp, #72	; 0x48
						 | (p[4+len+1] << 8)
    5ef8:	441f      	add	r7, r3
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
			u32 wire_crc = (p[4+len+2] << 16)
    5efa:	441e      	add	r6, r3
						 | (p[4+len+1] << 8)
    5efc:	f817 3c2f 	ldrb.w	r3, [r7, #-47]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
			u32 wire_crc = (p[4+len+2] << 16)
    5f00:	f816 2c34 	ldrb.w	r2, [r6, #-52]
						 | (p[4+len+1] << 8)
    5f04:	021b      	lsls	r3, r3, #8
    5f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						 | (p[4+len+0] << 0);
    5f0a:	f817 2c30 	ldrb.w	r2, [r7, #-48]
    5f0e:	4313      	orrs	r3, r2
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    5f10:	4298      	cmp	r0, r3
    5f12:	d0ce      	beq.n	5eb2 <bt_le_sync+0x1ca>

		le.last_packet = CLK100NS;

	rx_flush:
		// this might happen twice, but it's safe to do so
		cc2400_strobe(SFSON);
    5f14:	2061      	movs	r0, #97	; 0x61
    5f16:	f002 fbce 	bl	86b6 <cc2400_strobe>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5f1a:	4a28      	ldr	r2, [pc, #160]	; (5fbc <bt_le_sync+0x2d4>)
    5f1c:	6813      	ldr	r3, [r2, #0]
    5f1e:	f023 0301 	bic.w	r3, r3, #1
    5f22:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    5f24:	4b2a      	ldr	r3, [pc, #168]	; (5fd0 <bt_le_sync+0x2e8>)
    5f26:	681b      	ldr	r3, [r3, #0]
    5f28:	0759      	lsls	r1, r3, #29
    5f2a:	d502      	bpl.n	5f32 <bt_le_sync+0x24a>
			u8 tmp = (u8)DIO_SSP_DR;
    5f2c:	4b29      	ldr	r3, [pc, #164]	; (5fd4 <bt_le_sync+0x2ec>)
    5f2e:	681b      	ldr	r3, [r3, #0]
    5f30:	e7f8      	b.n	5f24 <bt_le_sync+0x23c>
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    5f32:	f640 4135 	movw	r1, #3125	; 0xc35
    5f36:	4b24      	ldr	r3, [pc, #144]	; (5fc8 <bt_le_sync+0x2e0>)
    5f38:	681a      	ldr	r2, [r3, #0]
    5f3a:	4b24      	ldr	r3, [pc, #144]	; (5fcc <bt_le_sync+0x2e4>)
    5f3c:	f3c2 0213 	ubfx	r2, r2, #0, #20
    5f40:	681b      	ldr	r3, [r3, #0]
    5f42:	fb01 3302 	mla	r3, r1, r2, r3
		if (now < le.last_packet)
    5f46:	6c61      	ldr	r1, [r4, #68]	; 0x44
			now += 3276800000; // handle rollover
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    5f48:	7e22      	ldrb	r2, [r4, #24]
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
    5f4a:	428b      	cmp	r3, r1
			now += 3276800000; // handle rollover
    5f4c:	bf38      	it	cc
    5f4e:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
		if  ( // timeout
    5f52:	f1a2 0202 	sub.w	r2, r2, #2
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
    5f56:	bf38      	it	cc
    5f58:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
		if  ( // timeout
    5f5c:	2a01      	cmp	r2, #1
    5f5e:	d803      	bhi.n	5f68 <bt_le_sync+0x280>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
			&& (now - le.last_packet > 50000000))
    5f60:	4a1d      	ldr	r2, [pc, #116]	; (5fd8 <bt_le_sync+0x2f0>)
    5f62:	1a5b      	subs	r3, r3, r1
    5f64:	4293      	cmp	r3, r2
    5f66:	d802      	bhi.n	5f6e <bt_le_sync+0x286>
			// jam finished
			|| (le_jam_count == 1)
    5f68:	69eb      	ldr	r3, [r5, #28]
    5f6a:	2b01      	cmp	r3, #1
    5f6c:	d150      	bne.n	6010 <bt_le_sync+0x328>
			)
		{
			reset_le();
    5f6e:	f7ff fd8f 	bl	5a90 <reset_le>
			le_jam_count = 0;
			TXLED_CLR;
    5f72:	f44f 7180 	mov.w	r1, #256	; 0x100
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    5f76:	2300      	movs	r3, #0
    5f78:	61eb      	str	r3, [r5, #28]
			TXLED_CLR;
    5f7a:	f8c9 1000 	str.w	r1, [r9]

			if (jam_mode == JAM_ONCE) {
    5f7e:	7ce9      	ldrb	r1, [r5, #19]
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    5f80:	4a02      	ldr	r2, [pc, #8]	; (5f8c <bt_le_sync+0x2a4>)
			TXLED_CLR;

			if (jam_mode == JAM_ONCE) {
    5f82:	2901      	cmp	r1, #1
    5f84:	d12a      	bne.n	5fdc <bt_le_sync+0x2f4>
				jam_mode = JAM_NONE;
    5f86:	74d3      	strb	r3, [r2, #19]
				requested_mode = MODE_IDLE;
    5f88:	7493      	strb	r3, [r2, #18]
				goto cleanup;
    5f8a:	e072      	b.n	6072 <bt_le_sync+0x38a>
    5f8c:	10000a1c 	.word	0x10000a1c
    5f90:	10000448 	.word	0x10000448
    5f94:	e000e100 	.word	0xe000e100
    5f98:	2009c03c 	.word	0x2009c03c
    5f9c:	10000ba4 	.word	0x10000ba4
    5fa0:	100010b8 	.word	0x100010b8
    5fa4:	10000ba8 	.word	0x10000ba8
    5fa8:	10000baa 	.word	0x10000baa
    5fac:	00009340 	.word	0x00009340
    5fb0:	10001085 	.word	0x10001085
    5fb4:	50004104 	.word	0x50004104
    5fb8:	50004110 	.word	0x50004110
    5fbc:	40030024 	.word	0x40030024
    5fc0:	2009c038 	.word	0x2009c038
    5fc4:	e000e180 	.word	0xe000e180
    5fc8:	10000bc4 	.word	0x10000bc4
    5fcc:	40004008 	.word	0x40004008
    5fd0:	4003000c 	.word	0x4003000c
    5fd4:	40030008 	.word	0x40030008
    5fd8:	02faf080 	.word	0x02faf080
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    5fdc:	f1b8 0f0a 	cmp.w	r8, #10
    5fe0:	d047      	beq.n	6072 <bt_le_sync+0x38a>
				goto cleanup;

			le.link_state = LINK_LISTENING;
    5fe2:	2301      	movs	r3, #1

			cc2400_strobe(SRFOFF);
    5fe4:	2064      	movs	r0, #100	; 0x64

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
				goto cleanup;

			le.link_state = LINK_LISTENING;
    5fe6:	7623      	strb	r3, [r4, #24]

			cc2400_strobe(SRFOFF);
    5fe8:	f002 fb65 	bl	86b6 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    5fec:	f002 fb5c 	bl	86a8 <cc2400_status>
    5ff0:	0742      	lsls	r2, r0, #29
    5ff2:	d4fb      	bmi.n	5fec <bt_le_sync+0x304>

			/* Retune */
			channel = le_adv_channel != 0 ? le_adv_channel : 2402;
    5ff4:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    5ff8:	b29b      	uxth	r3, r3
    5ffa:	b123      	cbz	r3, 6006 <bt_le_sync+0x31e>
    5ffc:	4b23      	ldr	r3, [pc, #140]	; (608c <bt_le_sync+0x3a4>)
    5ffe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    6002:	b29b      	uxth	r3, r3
    6004:	e001      	b.n	600a <bt_le_sync+0x322>
    6006:	f640 1362 	movw	r3, #2402	; 0x962
    600a:	8023      	strh	r3, [r4, #0]
			restart_jamming = 1;
    600c:	2301      	movs	r3, #1
    600e:	62eb      	str	r3, [r5, #44]	; 0x2c
		}

		cc2400_set(SYNCL, le.syncl);
    6010:	202c      	movs	r0, #44	; 0x2c
    6012:	8961      	ldrh	r1, [r4, #10]
    6014:	f002 faa7 	bl	8566 <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    6018:	202d      	movs	r0, #45	; 0x2d
    601a:	8921      	ldrh	r1, [r4, #8]
    601c:	f002 faa3 	bl	8566 <cc2400_set>

		if (do_hop)
    6020:	7aeb      	ldrb	r3, [r5, #11]
    6022:	b10b      	cbz	r3, 6028 <bt_le_sync+0x340>
			hop();
    6024:	f7ff fa7c 	bl	5520 <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    6028:	69eb      	ldr	r3, [r5, #28]
    602a:	4e19      	ldr	r6, [pc, #100]	; (6090 <bt_le_sync+0x3a8>)
    602c:	2b00      	cmp	r3, #0
    602e:	dd05      	ble.n	603c <bt_le_sync+0x354>
			le_jam();
    6030:	f7ff fa3a 	bl	54a8 <le_jam>
			--le_jam_count;
    6034:	69f3      	ldr	r3, [r6, #28]
    6036:	3b01      	subs	r3, #1
    6038:	61f3      	str	r3, [r6, #28]
    603a:	e014      	b.n	6066 <bt_le_sync+0x37e>
		} else {
			/* RX mode */
			dma_init_le();
    603c:	f001 fc2e 	bl	789c <dma_init_le>
			dio_ssp_start();
    6040:	f001 fc74 	bl	792c <dio_ssp_start>

			if (restart_jamming) {
    6044:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    6046:	b13b      	cbz	r3, 6058 <bt_le_sync+0x370>
				cc2400_rx_sync(rbit(le.access_address));
    6048:	6860      	ldr	r0, [r4, #4]
    604a:	f002 f999 	bl	8380 <rbit>
    604e:	f7fe f9bd 	bl	43cc <cc2400_rx_sync>
				restart_jamming = 0;
    6052:	2300      	movs	r3, #0
    6054:	62f3      	str	r3, [r6, #44]	; 0x2c
    6056:	e006      	b.n	6066 <bt_le_sync+0x37e>
			} else {
				// wait till we're in FSLOCK before strobing RX
				while (!(cc2400_status() & FS_LOCK));
    6058:	f002 fb26 	bl	86a8 <cc2400_status>
    605c:	0743      	lsls	r3, r0, #29
    605e:	d5fb      	bpl.n	6058 <bt_le_sync+0x370>
				cc2400_strobe(SRX);
    6060:	2062      	movs	r0, #98	; 0x62
    6062:	f002 fb28 	bl	86b6 <cc2400_strobe>
			}
		}

		rx_tc = 0;
    6066:	2300      	movs	r3, #0
    6068:	f8ca 3000 	str.w	r3, [sl]
		rx_err = 0;
    606c:	f8cb 3000 	str.w	r3, [fp]
    6070:	e659      	b.n	5d26 <bt_le_sync+0x3e>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    6072:	4b08      	ldr	r3, [pc, #32]	; (6094 <bt_le_sync+0x3ac>)
    6074:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6078:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    607a:	f7fe fa55 	bl	4528 <cc2400_idle>
	dio_ssp_stop();
    607e:	f001 fc7b 	bl	7978 <dio_ssp_stop>
	cs_trigger_disable();
    6082:	f001 fb23 	bl	76cc <cs_trigger_disable>
}
    6086:	b013      	add	sp, #76	; 0x4c
    6088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    608c:	10000448 	.word	0x10000448
    6090:	10000a1c 	.word	0x10000a1c
    6094:	e000e180 	.word	0xe000e180

00006098 <bt_le_sync_boss_master>:


void bt_le_sync_boss_master(u8 active_mode)
{
    6098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    609c:	b093      	sub	sp, #76	; 0x4c

	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    609e:	4dac      	ldr	r5, [pc, #688]	; (6350 <bt_le_sync_boss_master+0x2b8>)
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    60a0:	4cac      	ldr	r4, [pc, #688]	; (6354 <bt_le_sync_boss_master+0x2bc>)

	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    60a2:	2301      	movs	r3, #1
    60a4:	702b      	strb	r3, [r5, #0]
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    60a6:	7623      	strb	r3, [r4, #24]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    60a8:	4bab      	ldr	r3, [pc, #684]	; (6358 <bt_le_sync_boss_master+0x2c0>)
    60aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000

	RXLED_CLR;
    60ae:	4eab      	ldr	r6, [pc, #684]	; (635c <bt_le_sync_boss_master+0x2c4>)
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
	mode = active_mode;
    60b0:	7468      	strb	r0, [r5, #17]

	le.link_state = LINK_LISTENING;

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    60b2:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    60b4:	2310      	movs	r3, #16
    60b6:	6033      	str	r3, [r6, #0]
	cs_trigger_disable();
}


void bt_le_sync_boss_master(u8 active_mode)
{
    60b8:	4680      	mov	r8, r0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;

	RXLED_CLR;

	queue_init();
    60ba:	f001 f9cf 	bl	745c <queue_init>
	dio_ssp_init();
    60be:	f002 f9c3 	bl	8448 <dio_ssp_init>
	dma_init_le();
    60c2:	f001 fbeb 	bl	789c <dma_init_le>
	dio_ssp_start();
    60c6:	f001 fc31 	bl	792c <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    60ca:	6860      	ldr	r0, [r4, #4]
    60cc:	f002 f958 	bl	8380 <rbit>
    60d0:	f7fe f97c 	bl	43cc <cc2400_rx_sync>
    60d4:	46b1      	mov	r9, r6

	while (requested_mode == active_mode) {
    60d6:	7cab      	ldrb	r3, [r5, #18]
    60d8:	4543      	cmp	r3, r8
    60da:	f040 81ae 	bne.w	643a <bt_le_sync_boss_master+0x3a2>
		if (requested_channel != 0) {
    60de:	4b9c      	ldr	r3, [pc, #624]	; (6350 <bt_le_sync_boss_master+0x2b8>)
    60e0:	89db      	ldrh	r3, [r3, #14]
    60e2:	b29b      	uxth	r3, r3
    60e4:	b1c3      	cbz	r3, 6118 <bt_le_sync_boss_master+0x80>
			cc2400_strobe(SRFOFF);
    60e6:	2064      	movs	r0, #100	; 0x64
    60e8:	f002 fae5 	bl	86b6 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    60ec:	f002 fadc 	bl	86a8 <cc2400_status>
    60f0:	0747      	lsls	r7, r0, #29
    60f2:	d4fb      	bmi.n	60ec <bt_le_sync_boss_master+0x54>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    60f4:	8821      	ldrh	r1, [r4, #0]
    60f6:	2002      	movs	r0, #2
    60f8:	3901      	subs	r1, #1
    60fa:	b289      	uxth	r1, r1
    60fc:	f002 fa33 	bl	8566 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    6100:	2061      	movs	r0, #97	; 0x61
    6102:	f002 fad8 	bl	86b6 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    6106:	f002 facf 	bl	86a8 <cc2400_status>
    610a:	0746      	lsls	r6, r0, #29
    610c:	d5fb      	bpl.n	6106 <bt_le_sync_boss_master+0x6e>

			/* RX mode */
			cc2400_strobe(SRX);
    610e:	2062      	movs	r0, #98	; 0x62
    6110:	f002 fad1 	bl	86b6 <cc2400_strobe>

			requested_channel = 0;
    6114:	2300      	movs	r3, #0
    6116:	81eb      	strh	r3, [r5, #14]
		}

		RXLED_CLR;
    6118:	2310      	movs	r3, #16
    611a:	f8c9 3000 	str.w	r3, [r9]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    611e:	f001 fa13 	bl	7548 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    6122:	4b8f      	ldr	r3, [pc, #572]	; (6360 <bt_le_sync_boss_master+0x2c8>)
    6124:	681a      	ldr	r2, [r3, #0]
    6126:	469a      	mov	sl, r3
    6128:	b942      	cbnz	r2, 613c <bt_le_sync_boss_master+0xa4>
    612a:	4b8e      	ldr	r3, [pc, #568]	; (6364 <bt_le_sync_boss_master+0x2cc>)
    612c:	681b      	ldr	r3, [r3, #0]
    612e:	b92b      	cbnz	r3, 613c <bt_le_sync_boss_master+0xa4>
    6130:	7aeb      	ldrb	r3, [r5, #11]
    6132:	b91b      	cbnz	r3, 613c <bt_le_sync_boss_master+0xa4>
    6134:	4b86      	ldr	r3, [pc, #536]	; (6350 <bt_le_sync_boss_master+0x2b8>)
    6136:	7c9b      	ldrb	r3, [r3, #18]
    6138:	4543      	cmp	r3, r8
    613a:	d0f2      	beq.n	6122 <bt_le_sync_boss_master+0x8a>
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    613c:	2006      	movs	r0, #6
    613e:	f002 fa09 	bl	8554 <cc2400_get>
		rssi_min = rssi_max = rssi;
    6142:	4b89      	ldr	r3, [pc, #548]	; (6368 <bt_le_sync_boss_master+0x2d0>)
		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    6144:	f3c0 2007 	ubfx	r0, r0, #8, #8
		rssi_min = rssi_max = rssi;
    6148:	7018      	strb	r0, [r3, #0]
    614a:	4b88      	ldr	r3, [pc, #544]	; (636c <bt_le_sync_boss_master+0x2d4>)

		if (requested_mode != active_mode) {
    614c:	4a80      	ldr	r2, [pc, #512]	; (6350 <bt_le_sync_boss_master+0x2b8>)
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
		rssi_min = rssi_max = rssi;
    614e:	7018      	strb	r0, [r3, #0]

		if (requested_mode != active_mode) {
    6150:	7cab      	ldrb	r3, [r5, #18]
    6152:	4543      	cmp	r3, r8
    6154:	f040 8171 	bne.w	643a <bt_le_sync_boss_master+0x3a2>
			goto cleanup;
		}

		if (rx_err) {
    6158:	f8df b208 	ldr.w	fp, [pc, #520]	; 6364 <bt_le_sync_boss_master+0x2cc>
    615c:	f8db 3000 	ldr.w	r3, [fp]
    6160:	46dc      	mov	ip, fp
    6162:	b11b      	cbz	r3, 616c <bt_le_sync_boss_master+0xd4>
			status |= DMA_ERROR;
    6164:	7853      	ldrb	r3, [r2, #1]
    6166:	f043 0302 	orr.w	r3, r3, #2
    616a:	7053      	strb	r3, [r2, #1]
		}

		if (do_hop)
    616c:	7aeb      	ldrb	r3, [r5, #11]
    616e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    6172:	2b00      	cmp	r3, #0
    6174:	f040 80b0 	bne.w	62d8 <bt_le_sync_boss_master+0x240>
			goto rx_flush;

		/* No DMA transfer? */
		if (!rx_tc)
    6178:	f8da 3000 	ldr.w	r3, [sl]
    617c:	2b00      	cmp	r3, #0
    617e:	d0aa      	beq.n	60d6 <bt_le_sync_boss_master+0x3e>


		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
    6180:	2234      	movs	r2, #52	; 0x34
    6182:	a805      	add	r0, sp, #20
    6184:	f8cd c00c 	str.w	ip, [sp, #12]
    6188:	f7fd fff6 	bl	4178 <memset>
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;


		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    618c:	8820      	ldrh	r0, [r4, #0]
		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;
    618e:	6863      	ldr	r3, [r4, #4]


		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    6190:	3862      	subs	r0, #98	; 0x62
    6192:	b2c0      	uxtb	r0, r0
		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;
    6194:	9305      	str	r3, [sp, #20]


		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    6196:	f001 f865 	bl	7264 <btle_channel_index>
    619a:	2630      	movs	r6, #48	; 0x30
    619c:	4346      	muls	r6, r0
    619e:	4f74      	ldr	r7, [pc, #464]	; (6370 <bt_le_sync_boss_master+0x2d8>)
    61a0:	19bb      	adds	r3, r7, r6
    61a2:	9301      	str	r3, [sp, #4]
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    61a4:	4b73      	ldr	r3, [pc, #460]	; (6374 <bt_le_sync_boss_master+0x2dc>)
    61a6:	7818      	ldrb	r0, [r3, #0]
					   | rxbuf1[i+1] << 16
    61a8:	785a      	ldrb	r2, [r3, #1]
					   | rxbuf1[i+2] << 8
    61aa:	f893 e002 	ldrb.w	lr, [r3, #2]


		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    61ae:	0412      	lsls	r2, r2, #16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
    61b0:	78d9      	ldrb	r1, [r3, #3]


		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    61b2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    61b6:	4308      	orrs	r0, r1
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    61b8:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
    61bc:	9302      	str	r3, [sp, #8]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    61be:	f002 f8df 	bl	8380 <rbit>
    61c2:	59be      	ldr	r6, [r7, r6]
		}


		unsigned len = (p[5] & 0x3f) + 2;
		if (len > 39)
    61c4:	9b02      	ldr	r3, [sp, #8]
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    61c6:	4070      	eors	r0, r6
		}


		unsigned len = (p[5] & 0x3f) + 2;
    61c8:	f3c0 2605 	ubfx	r6, r0, #8, #6
    61cc:	1cb7      	adds	r7, r6, #2
		if (len > 39)
    61ce:	2f27      	cmp	r7, #39	; 0x27
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    61d0:	9006      	str	r0, [sp, #24]
		}


		unsigned len = (p[5] & 0x3f) + 2;
		if (len > 39)
    61d2:	f8dd c00c 	ldr.w	ip, [sp, #12]
    61d6:	dc7f      	bgt.n	62d8 <bt_le_sync_boss_master+0x240>
			goto rx_flush;


		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    61d8:	3608      	adds	r6, #8
    61da:	08b2      	lsrs	r2, r6, #2
		if (total_transfers < 11) {
    61dc:	2a0b      	cmp	r2, #11
    61de:	d00d      	beq.n	61fc <bt_le_sync_boss_master+0x164>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    61e0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    61e4:	4a64      	ldr	r2, [pc, #400]	; (6378 <bt_le_sync_boss_master+0x2e0>)
    61e6:	6812      	ldr	r2, [r2, #0]
    61e8:	429a      	cmp	r2, r3
    61ea:	d20b      	bcs.n	6204 <bt_le_sync_boss_master+0x16c>
    61ec:	f8dc 2000 	ldr.w	r2, [ip]
    61f0:	2a00      	cmp	r2, #0
    61f2:	d0f7      	beq.n	61e4 <bt_le_sync_boss_master+0x14c>
    61f4:	e006      	b.n	6204 <bt_le_sync_boss_master+0x16c>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    61f6:	f8dc 3000 	ldr.w	r3, [ip]
    61fa:	b91b      	cbnz	r3, 6204 <bt_le_sync_boss_master+0x16c>
    61fc:	4b5f      	ldr	r3, [pc, #380]	; (637c <bt_le_sync_boss_master+0x2e4>)
    61fe:	681b      	ldr	r3, [r3, #0]
    6200:	07d8      	lsls	r0, r3, #31
    6202:	d4f8      	bmi.n	61f6 <bt_le_sync_boss_master+0x15e>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6204:	4a5e      	ldr	r2, [pc, #376]	; (6380 <bt_le_sync_boss_master+0x2e8>)

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);
    6206:	2061      	movs	r0, #97	; 0x61
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6208:	6813      	ldr	r3, [r2, #0]
    620a:	f023 0301 	bic.w	r3, r3, #1
    620e:	6013      	str	r3, [r2, #0]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);
    6210:	f002 fa51 	bl	86b6 <cc2400_strobe>



		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    6214:	2304      	movs	r3, #4
			uint32_t v = rxbuf1[i+0] << 24
    6216:	4957      	ldr	r1, [pc, #348]	; (6374 <bt_le_sync_boss_master+0x2dc>)
    6218:	1c58      	adds	r0, r3, #1
    621a:	5cca      	ldrb	r2, [r1, r3]
    621c:	f103 0e03 	add.w	lr, r3, #3
					   | rxbuf1[i+1] << 16
    6220:	f811 c000 	ldrb.w	ip, [r1, r0]
    6224:	1c98      	adds	r0, r3, #2
					   | rxbuf1[i+2] << 8
    6226:	5c08      	ldrb	r0, [r1, r0]
					   | rxbuf1[i+3] << 0;
    6228:	f811 e00e 	ldrb.w	lr, [r1, lr]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    622c:	1099      	asrs	r1, r3, #2
    622e:	ea4e 6202 	orr.w	r2, lr, r2, lsl #24
    6232:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
    6236:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    623a:	9303      	str	r3, [sp, #12]
    623c:	9102      	str	r1, [sp, #8]
    623e:	f002 f89f 	bl	8380 <rbit>
    6242:	9902      	ldr	r1, [sp, #8]
    6244:	ab12      	add	r3, sp, #72	; 0x48
    6246:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
    624a:	9b01      	ldr	r3, [sp, #4]
    624c:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
		cc2400_strobe(SFSON);



		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    6250:	9b03      	ldr	r3, [sp, #12]
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    6252:	4050      	eors	r0, r2
		cc2400_strobe(SFSON);



		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    6254:	3304      	adds	r3, #4
    6256:	2b2c      	cmp	r3, #44	; 0x2c
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    6258:	f84e 0c30 	str.w	r0, [lr, #-48]
		cc2400_strobe(SFSON);



		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    625c:	d1db      	bne.n	6216 <bt_le_sync_boss_master+0x17e>
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}


		if (le.crc_verify) {
    625e:	6963      	ldr	r3, [r4, #20]
    6260:	b913      	cbnz	r3, 6268 <bt_le_sync_boss_master+0x1d0>
		/**
		 * @author: Ahmed Salem
		 * @Date: 4/5/2017
		 * Filter off all communication but the Master device whose mac address is (le.target)
		 * */
		if( le.target_set &&
    6262:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6264:	b9b3      	cbnz	r3, 6294 <bt_le_sync_boss_master+0x1fc>
    6266:	e01c      	b.n	62a2 <bt_le_sync_boss_master+0x20a>
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}


		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    6268:	4b3a      	ldr	r3, [pc, #232]	; (6354 <bt_le_sync_boss_master+0x2bc>)
    626a:	463a      	mov	r2, r7
    626c:	6918      	ldr	r0, [r3, #16]
    626e:	a906      	add	r1, sp, #24
    6270:	f001 f878 	bl	7364 <btle_crcgen_lut>
			u32 wire_crc = (p[4+len+2] << 16)
    6274:	ab12      	add	r3, sp, #72	; 0x48
						 | (p[4+len+1] << 8)
    6276:	441f      	add	r7, r3
		}


		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
			u32 wire_crc = (p[4+len+2] << 16)
    6278:	441e      	add	r6, r3
						 | (p[4+len+1] << 8)
    627a:	f817 3c2f 	ldrb.w	r3, [r7, #-47]
		}


		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
			u32 wire_crc = (p[4+len+2] << 16)
    627e:	f816 2c34 	ldrb.w	r2, [r6, #-52]
						 | (p[4+len+1] << 8)
    6282:	021b      	lsls	r3, r3, #8
    6284:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						 | (p[4+len+0] << 0);
    6288:	f817 2c30 	ldrb.w	r2, [r7, #-48]
    628c:	4313      	orrs	r3, r2
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    628e:	4298      	cmp	r0, r3
    6290:	d122      	bne.n	62d8 <bt_le_sync_boss_master+0x240>
    6292:	e7e6      	b.n	6262 <bt_le_sync_boss_master+0x1ca>
		 * @author: Ahmed Salem
		 * @Date: 4/5/2017
		 * Filter off all communication but the Master device whose mac address is (le.target)
		 * */
		if( le.target_set &&
			memcmp(le.target, &p[6], 6) != 0
    6294:	483b      	ldr	r0, [pc, #236]	; (6384 <bt_le_sync_boss_master+0x2ec>)
    6296:	f10d 011a 	add.w	r1, sp, #26
    629a:	2206      	movs	r2, #6
    629c:	f002 fefe 	bl	909c <memcmp>
		/**
		 * @author: Ahmed Salem
		 * @Date: 4/5/2017
		 * Filter off all communication but the Master device whose mac address is (le.target)
		 * */
		if( le.target_set &&
    62a0:	b9d0      	cbnz	r0, 62d8 <bt_le_sync_boss_master+0x240>
		  ){
			goto rx_flush;
		}


		RXLED_SET;
    62a2:	4b39      	ldr	r3, [pc, #228]	; (6388 <bt_le_sync_boss_master+0x2f0>)
    62a4:	2210      	movs	r2, #16
    62a6:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    62a8:	a805      	add	r0, sp, #20
    62aa:	69ab      	ldr	r3, [r5, #24]
    62ac:	4798      	blx	r3


		// disable USB interrupts while we touch USB data structures
		ICER0 = ICER0_ICE_USB;
    62ae:	4b37      	ldr	r3, [pc, #220]	; (638c <bt_le_sync_boss_master+0x2f4>)
    62b0:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    62b4:	601e      	str	r6, [r3, #0]
		enqueue(LE_PACKET, (uint8_t *)packet);
    62b6:	a905      	add	r1, sp, #20
    62b8:	2001      	movs	r0, #1
    62ba:	f7fe f8dd 	bl	4478 <enqueue>
		ISER0 = ISER0_ISE_USB;

		le.last_packet = CLK100NS;
    62be:	f640 4135 	movw	r1, #3125	; 0xc35


		// disable USB interrupts while we touch USB data structures
		ICER0 = ICER0_ICE_USB;
		enqueue(LE_PACKET, (uint8_t *)packet);
		ISER0 = ISER0_ISE_USB;
    62c2:	4b25      	ldr	r3, [pc, #148]	; (6358 <bt_le_sync_boss_master+0x2c0>)
    62c4:	601e      	str	r6, [r3, #0]

		le.last_packet = CLK100NS;
    62c6:	4b32      	ldr	r3, [pc, #200]	; (6390 <bt_le_sync_boss_master+0x2f8>)
    62c8:	681a      	ldr	r2, [r3, #0]
    62ca:	4b32      	ldr	r3, [pc, #200]	; (6394 <bt_le_sync_boss_master+0x2fc>)
    62cc:	f3c2 0213 	ubfx	r2, r2, #0, #20
    62d0:	681b      	ldr	r3, [r3, #0]
    62d2:	fb01 3302 	mla	r3, r1, r2, r3
    62d6:	6463      	str	r3, [r4, #68]	; 0x44

	rx_flush:
		// this might happen twice, but it's safe to do so
		cc2400_strobe(SFSON);
    62d8:	2061      	movs	r0, #97	; 0x61
    62da:	f002 f9ec 	bl	86b6 <cc2400_strobe>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    62de:	4a28      	ldr	r2, [pc, #160]	; (6380 <bt_le_sync_boss_master+0x2e8>)
    62e0:	6813      	ldr	r3, [r2, #0]
    62e2:	f023 0301 	bic.w	r3, r3, #1
    62e6:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    62e8:	4b2b      	ldr	r3, [pc, #172]	; (6398 <bt_le_sync_boss_master+0x300>)
    62ea:	681b      	ldr	r3, [r3, #0]
    62ec:	0759      	lsls	r1, r3, #29
    62ee:	d502      	bpl.n	62f6 <bt_le_sync_boss_master+0x25e>
			u8 tmp = (u8)DIO_SSP_DR;
    62f0:	4b2a      	ldr	r3, [pc, #168]	; (639c <bt_le_sync_boss_master+0x304>)
    62f2:	681b      	ldr	r3, [r3, #0]
    62f4:	e7f8      	b.n	62e8 <bt_le_sync_boss_master+0x250>
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    62f6:	f640 4135 	movw	r1, #3125	; 0xc35
    62fa:	4b25      	ldr	r3, [pc, #148]	; (6390 <bt_le_sync_boss_master+0x2f8>)
    62fc:	681a      	ldr	r2, [r3, #0]
    62fe:	4b25      	ldr	r3, [pc, #148]	; (6394 <bt_le_sync_boss_master+0x2fc>)
    6300:	f3c2 0213 	ubfx	r2, r2, #0, #20
    6304:	681b      	ldr	r3, [r3, #0]
    6306:	fb01 3302 	mla	r3, r1, r2, r3
		if (now < le.last_packet)
    630a:	6c61      	ldr	r1, [r4, #68]	; 0x44
			now += 3276800000; // handle rollover
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    630c:	7e22      	ldrb	r2, [r4, #24]
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
    630e:	428b      	cmp	r3, r1
			now += 3276800000; // handle rollover
    6310:	bf38      	it	cc
    6312:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
		if  ( // timeout
    6316:	f1a2 0202 	sub.w	r2, r2, #2
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
    631a:	bf38      	it	cc
    631c:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
		if  ( // timeout
    6320:	2a01      	cmp	r2, #1
    6322:	d803      	bhi.n	632c <bt_le_sync_boss_master+0x294>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
			&& (now - le.last_packet > 50000000))
    6324:	4a1e      	ldr	r2, [pc, #120]	; (63a0 <bt_le_sync_boss_master+0x308>)
    6326:	1a5b      	subs	r3, r3, r1
    6328:	4293      	cmp	r3, r2
    632a:	d802      	bhi.n	6332 <bt_le_sync_boss_master+0x29a>
			// jam finished
			|| (le_jam_count == 1)
    632c:	69eb      	ldr	r3, [r5, #28]
    632e:	2b01      	cmp	r3, #1
    6330:	d152      	bne.n	63d8 <bt_le_sync_boss_master+0x340>
			)
		{
			reset_le();
    6332:	f7ff fbad 	bl	5a90 <reset_le>
			le_jam_count = 0;
			TXLED_CLR;
    6336:	f44f 7180 	mov.w	r1, #256	; 0x100
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    633a:	2300      	movs	r3, #0
    633c:	61eb      	str	r3, [r5, #28]
			TXLED_CLR;
    633e:	f8c9 1000 	str.w	r1, [r9]

			if (jam_mode == JAM_ONCE) {
    6342:	7ce9      	ldrb	r1, [r5, #19]
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    6344:	4a02      	ldr	r2, [pc, #8]	; (6350 <bt_le_sync_boss_master+0x2b8>)
			TXLED_CLR;

			if (jam_mode == JAM_ONCE) {
    6346:	2901      	cmp	r1, #1
    6348:	d12c      	bne.n	63a4 <bt_le_sync_boss_master+0x30c>
				jam_mode = JAM_NONE;
    634a:	74d3      	strb	r3, [r2, #19]
				requested_mode = MODE_IDLE;
    634c:	7493      	strb	r3, [r2, #18]
				goto cleanup;
    634e:	e074      	b.n	643a <bt_le_sync_boss_master+0x3a2>
    6350:	10000a1c 	.word	0x10000a1c
    6354:	10000448 	.word	0x10000448
    6358:	e000e100 	.word	0xe000e100
    635c:	2009c03c 	.word	0x2009c03c
    6360:	10000ba4 	.word	0x10000ba4
    6364:	100010b8 	.word	0x100010b8
    6368:	10000ba8 	.word	0x10000ba8
    636c:	10000baa 	.word	0x10000baa
    6370:	00009340 	.word	0x00009340
    6374:	10001085 	.word	0x10001085
    6378:	50004104 	.word	0x50004104
    637c:	50004110 	.word	0x50004110
    6380:	40030024 	.word	0x40030024
    6384:	10000480 	.word	0x10000480
    6388:	2009c038 	.word	0x2009c038
    638c:	e000e180 	.word	0xe000e180
    6390:	10000bc4 	.word	0x10000bc4
    6394:	40004008 	.word	0x40004008
    6398:	4003000c 	.word	0x4003000c
    639c:	40030008 	.word	0x40030008
    63a0:	02faf080 	.word	0x02faf080
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    63a4:	f1b8 0f0a 	cmp.w	r8, #10
    63a8:	d047      	beq.n	643a <bt_le_sync_boss_master+0x3a2>
				goto cleanup;

			le.link_state = LINK_LISTENING;
    63aa:	2301      	movs	r3, #1

			cc2400_strobe(SRFOFF);
    63ac:	2064      	movs	r0, #100	; 0x64

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
				goto cleanup;

			le.link_state = LINK_LISTENING;
    63ae:	7623      	strb	r3, [r4, #24]

			cc2400_strobe(SRFOFF);
    63b0:	f002 f981 	bl	86b6 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    63b4:	f002 f978 	bl	86a8 <cc2400_status>
    63b8:	0742      	lsls	r2, r0, #29
    63ba:	d4fb      	bmi.n	63b4 <bt_le_sync_boss_master+0x31c>

			/* Retune */
			channel = le_adv_channel != 0 ? le_adv_channel : 2402;
    63bc:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    63c0:	b29b      	uxth	r3, r3
    63c2:	b123      	cbz	r3, 63ce <bt_le_sync_boss_master+0x336>
    63c4:	4b23      	ldr	r3, [pc, #140]	; (6454 <bt_le_sync_boss_master+0x3bc>)
    63c6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    63ca:	b29b      	uxth	r3, r3
    63cc:	e001      	b.n	63d2 <bt_le_sync_boss_master+0x33a>
    63ce:	f640 1362 	movw	r3, #2402	; 0x962
    63d2:	8023      	strh	r3, [r4, #0]
			restart_jamming = 1;
    63d4:	2301      	movs	r3, #1
    63d6:	632b      	str	r3, [r5, #48]	; 0x30
		}

		cc2400_set(SYNCL, le.syncl);
    63d8:	202c      	movs	r0, #44	; 0x2c
    63da:	8961      	ldrh	r1, [r4, #10]
    63dc:	f002 f8c3 	bl	8566 <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    63e0:	202d      	movs	r0, #45	; 0x2d
    63e2:	8921      	ldrh	r1, [r4, #8]
    63e4:	f002 f8bf 	bl	8566 <cc2400_set>

		if (do_hop)
    63e8:	7aeb      	ldrb	r3, [r5, #11]
    63ea:	b10b      	cbz	r3, 63f0 <bt_le_sync_boss_master+0x358>
			hop();
    63ec:	f7ff f898 	bl	5520 <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    63f0:	69eb      	ldr	r3, [r5, #28]
    63f2:	4e19      	ldr	r6, [pc, #100]	; (6458 <bt_le_sync_boss_master+0x3c0>)
    63f4:	2b00      	cmp	r3, #0
    63f6:	dd05      	ble.n	6404 <bt_le_sync_boss_master+0x36c>
			le_jam();
    63f8:	f7ff f856 	bl	54a8 <le_jam>
			--le_jam_count;
    63fc:	69f3      	ldr	r3, [r6, #28]
    63fe:	3b01      	subs	r3, #1
    6400:	61f3      	str	r3, [r6, #28]
    6402:	e014      	b.n	642e <bt_le_sync_boss_master+0x396>
		} else {
			/* RX mode */
			dma_init_le();
    6404:	f001 fa4a 	bl	789c <dma_init_le>
			dio_ssp_start();
    6408:	f001 fa90 	bl	792c <dio_ssp_start>

			if (restart_jamming) {
    640c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    640e:	b13b      	cbz	r3, 6420 <bt_le_sync_boss_master+0x388>
				cc2400_rx_sync(rbit(le.access_address));
    6410:	6860      	ldr	r0, [r4, #4]
    6412:	f001 ffb5 	bl	8380 <rbit>
    6416:	f7fd ffd9 	bl	43cc <cc2400_rx_sync>
				restart_jamming = 0;
    641a:	2300      	movs	r3, #0
    641c:	6333      	str	r3, [r6, #48]	; 0x30
    641e:	e006      	b.n	642e <bt_le_sync_boss_master+0x396>
			} else {
				// wait till we're in FSLOCK before strobing RX
				while (!(cc2400_status() & FS_LOCK));
    6420:	f002 f942 	bl	86a8 <cc2400_status>
    6424:	0743      	lsls	r3, r0, #29
    6426:	d5fb      	bpl.n	6420 <bt_le_sync_boss_master+0x388>
				cc2400_strobe(SRX);
    6428:	2062      	movs	r0, #98	; 0x62
    642a:	f002 f944 	bl	86b6 <cc2400_strobe>
			}
		}

		rx_tc = 0;
    642e:	2300      	movs	r3, #0
    6430:	f8ca 3000 	str.w	r3, [sl]
		rx_err = 0;
    6434:	f8cb 3000 	str.w	r3, [fp]
    6438:	e64d      	b.n	60d6 <bt_le_sync_boss_master+0x3e>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    643a:	4b08      	ldr	r3, [pc, #32]	; (645c <bt_le_sync_boss_master+0x3c4>)
    643c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6440:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    6442:	f7fe f871 	bl	4528 <cc2400_idle>
	dio_ssp_stop();
    6446:	f001 fa97 	bl	7978 <dio_ssp_stop>
	cs_trigger_disable();
    644a:	f001 f93f 	bl	76cc <cs_trigger_disable>
}
    644e:	b013      	add	sp, #76	; 0x4c
    6450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6454:	10000448 	.word	0x10000448
    6458:	10000a1c 	.word	0x10000a1c
    645c:	e000e180 	.word	0xe000e180

00006460 <bt_follow_le>:
			do_hop = 1;
		}
	}
}

void bt_follow_le() {
    6460:	b510      	push	{r4, lr}
	reset_le();
    6462:	f7ff fb15 	bl	5a90 <reset_le>
	packet_cb = connection_follow_cb;
    6466:	4c04      	ldr	r4, [pc, #16]	; (6478 <bt_follow_le+0x18>)
    6468:	4b04      	ldr	r3, [pc, #16]	; (647c <bt_follow_le+0x1c>)
	bt_le_sync(MODE_BT_FOLLOW_LE);
    646a:	2009      	movs	r0, #9
	}
}

void bt_follow_le() {
	reset_le();
	packet_cb = connection_follow_cb;
    646c:	61a3      	str	r3, [r4, #24]
	bt_le_sync(MODE_BT_FOLLOW_LE);
    646e:	f7ff fc3b 	bl	5ce8 <bt_le_sync>
	data_cb = cb_follow_le;
	packet_cb = connection_follow_cb;
	bt_generic_le(MODE_BT_FOLLOW_LE);
	*/

	mode = MODE_IDLE;
    6472:	2300      	movs	r3, #0
    6474:	7463      	strb	r3, [r4, #17]
    6476:	bd10      	pop	{r4, pc}
    6478:	10000a1c 	.word	0x10000a1c
    647c:	00004851 	.word	0x00004851

00006480 <bt_boss_master_le>:
}

void bt_boss_master_le() {
    6480:	b510      	push	{r4, lr}
	reset_le();
    6482:	f7ff fb05 	bl	5a90 <reset_le>
	packet_cb = connection_follow_cb_boss_master;
    6486:	4c04      	ldr	r4, [pc, #16]	; (6498 <bt_boss_master_le+0x18>)
    6488:	4b04      	ldr	r3, [pc, #16]	; (649c <bt_boss_master_le+0x1c>)
	bt_le_sync_boss_master(MODE_BOSS_MASTER_LE);
    648a:	2012      	movs	r0, #18
	mode = MODE_IDLE;
}

void bt_boss_master_le() {
	reset_le();
	packet_cb = connection_follow_cb_boss_master;
    648c:	61a3      	str	r3, [r4, #24]
	bt_le_sync_boss_master(MODE_BOSS_MASTER_LE);
    648e:	f7ff fe03 	bl	6098 <bt_le_sync_boss_master>
	data_cb = cb_follow_le;
	packet_cb = connection_follow_cb;
	bt_generic_le(MODE_BT_FOLLOW_LE);
	*/

	mode = MODE_IDLE;
    6492:	2300      	movs	r3, #0
    6494:	7463      	strb	r3, [r4, #17]
    6496:	bd10      	pop	{r4, pc}
    6498:	10000a1c 	.word	0x10000a1c
    649c:	000046dd 	.word	0x000046dd

000064a0 <le_promisc_state>:
}

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    64a0:	b570      	push	{r4, r5, r6, lr}
    64a2:	b08e      	sub	sp, #56	; 0x38
    64a4:	4614      	mov	r4, r2
    64a6:	460d      	mov	r5, r1
    64a8:	4606      	mov	r6, r0
	u8 buf[50] = { 0, };
    64aa:	2100      	movs	r1, #0
    64ac:	a801      	add	r0, sp, #4
    64ae:	2232      	movs	r2, #50	; 0x32
    64b0:	f7fd fe62 	bl	4178 <memset>
	if (len > 49)
		len = 49;

	buf[0] = type;
	memcpy(&buf[1], data, len);
    64b4:	2c31      	cmp	r4, #49	; 0x31
    64b6:	4622      	mov	r2, r4
    64b8:	4629      	mov	r1, r5
    64ba:	bf28      	it	cs
    64bc:	2231      	movcs	r2, #49	; 0x31
    64be:	f10d 0005 	add.w	r0, sp, #5
void le_promisc_state(u8 type, void *data, unsigned len) {
	u8 buf[50] = { 0, };
	if (len > 49)
		len = 49;

	buf[0] = type;
    64c2:	f88d 6004 	strb.w	r6, [sp, #4]
	memcpy(&buf[1], data, len);
    64c6:	f002 fe1b 	bl	9100 <memcpy>
	enqueue(LE_PROMISC, (uint8_t*)buf);
    64ca:	a901      	add	r1, sp, #4
    64cc:	2005      	movs	r0, #5
    64ce:	f7fd ffd3 	bl	4478 <enqueue>
}
    64d2:	b00e      	add	sp, #56	; 0x38
    64d4:	bd70      	pop	{r4, r5, r6, pc}
    64d6:	0000      	movs	r0, r0

000064d8 <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    64d8:	b538      	push	{r3, r4, r5, lr}
	static u32 first_ts = 0;
	if (channel == 2404) {
    64da:	f640 1264 	movw	r2, #2404	; 0x964
    64de:	4831      	ldr	r0, [pc, #196]	; (65a4 <promisc_recover_hop_increment+0xcc>)
    64e0:	4c31      	ldr	r4, [pc, #196]	; (65a8 <promisc_recover_hop_increment+0xd0>)
    64e2:	8803      	ldrh	r3, [r0, #0]
    64e4:	b29b      	uxth	r3, r3
    64e6:	4293      	cmp	r3, r2
    64e8:	d10d      	bne.n	6506 <promisc_recover_hop_increment+0x2e>
		first_ts = CLK100NS;
    64ea:	f640 4135 	movw	r1, #3125	; 0xc35
    64ee:	4b2f      	ldr	r3, [pc, #188]	; (65ac <promisc_recover_hop_increment+0xd4>)
    64f0:	681a      	ldr	r2, [r3, #0]
    64f2:	4b2f      	ldr	r3, [pc, #188]	; (65b0 <promisc_recover_hop_increment+0xd8>)
    64f4:	f3c2 0213 	ubfx	r2, r2, #0, #20
    64f8:	681b      	ldr	r3, [r3, #0]
    64fa:	fb01 3302 	mla	r3, r1, r2, r3
    64fe:	6363      	str	r3, [r4, #52]	; 0x34
		hop_direct_channel = 2406;
    6500:	f640 1366 	movw	r3, #2406	; 0x966
    6504:	e048      	b.n	6598 <promisc_recover_hop_increment+0xc0>
		do_hop = 1;
	} else if (channel == 2406) {
    6506:	f640 1166 	movw	r1, #2406	; 0x966
    650a:	8803      	ldrh	r3, [r0, #0]
    650c:	b29b      	uxth	r3, r3
    650e:	428b      	cmp	r3, r1
    6510:	d144      	bne.n	659c <promisc_recover_hop_increment+0xc4>
		u32 second_ts = CLK100NS;
    6512:	f640 4135 	movw	r1, #3125	; 0xc35
    6516:	4b25      	ldr	r3, [pc, #148]	; (65ac <promisc_recover_hop_increment+0xd4>)
		if (second_ts < first_ts)
			second_ts += 3276800000; // handle rollover
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    6518:	8c40      	ldrh	r0, [r0, #34]	; 0x22
	if (channel == 2404) {
		first_ts = CLK100NS;
		hop_direct_channel = 2406;
		do_hop = 1;
	} else if (channel == 2406) {
		u32 second_ts = CLK100NS;
    651a:	681a      	ldr	r2, [r3, #0]
    651c:	4b24      	ldr	r3, [pc, #144]	; (65b0 <promisc_recover_hop_increment+0xd8>)
    651e:	f3c2 0213 	ubfx	r2, r2, #0, #20
    6522:	681b      	ldr	r3, [r3, #0]
    6524:	fb01 3302 	mla	r3, r1, r2, r3
		if (second_ts < first_ts)
    6528:	6b62      	ldr	r2, [r4, #52]	; 0x34
			second_ts += 3276800000; // handle rollover
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    652a:	491e      	ldr	r1, [pc, #120]	; (65a4 <promisc_recover_hop_increment+0xcc>)
		first_ts = CLK100NS;
		hop_direct_channel = 2406;
		do_hop = 1;
	} else if (channel == 2406) {
		u32 second_ts = CLK100NS;
		if (second_ts < first_ts)
    652c:	4293      	cmp	r3, r2
			second_ts += 3276800000; // handle rollover
    652e:	bf3c      	itt	cc
    6530:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    6534:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
    6538:	1a9b      	subs	r3, r3, r2
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    653a:	f641 026a 	movw	r2, #6250	; 0x186a
    653e:	fb02 3300 	mla	r3, r2, r0, r3
    6542:	f243 02d4 	movw	r2, #12500	; 0x30d4
    6546:	4342      	muls	r2, r0
    6548:	fbb3 f3f2 	udiv	r3, r3, r2
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    654c:	2b24      	cmp	r3, #36	; 0x24
    654e:	d821      	bhi.n	6594 <promisc_recover_hop_increment+0xbc>
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    6550:	4a18      	ldr	r2, [pc, #96]	; (65b4 <promisc_recover_hop_increment+0xdc>)
			le.interval_timer = le.conn_interval / 2;
    6552:	0840      	lsrs	r0, r0, #1
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    6554:	4413      	add	r3, r2
    6556:	f893 3870 	ldrb.w	r3, [r3, #2160]	; 0x870
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    655a:	2525      	movs	r5, #37	; 0x25
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    655c:	768b      	strb	r3, [r1, #26]
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    655e:	3301      	adds	r3, #1
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
			le.interval_timer = le.conn_interval / 2;
    6560:	8408      	strh	r0, [r1, #32]
			le.conn_count = 0;
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    6562:	fb93 f0f5 	sdiv	r0, r3, r5
    6566:	fb05 3310 	mls	r3, r5, r0, r3
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
    656a:	2200      	movs	r2, #0
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    656c:	764b      	strb	r3, [r1, #25]
			le.link_state = LINK_CONNECTED;
    656e:	2003      	movs	r0, #3
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
    6570:	4b11      	ldr	r3, [pc, #68]	; (65b8 <promisc_recover_hop_increment+0xe0>)
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
    6572:	848a      	strh	r2, [r1, #36]	; 0x24
			le.conn_epoch = 0;
    6574:	61ca      	str	r2, [r1, #28]
			do_hop = 0;
    6576:	72e2      	strb	r2, [r4, #11]
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
			le.crc_verify = 0;
    6578:	614a      	str	r2, [r1, #20]
			le.conn_count = 0;
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
    657a:	7608      	strb	r0, [r1, #24]
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
			le_promisc_state(3, &le.channel_increment, 1);
    657c:	2201      	movs	r2, #1
    657e:	311a      	adds	r1, #26
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
    6580:	61a3      	str	r3, [r4, #24]
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
    6582:	72a0      	strb	r0, [r4, #10]
			packet_cb = connection_follow_cb;
			le_promisc_state(3, &le.channel_increment, 1);
    6584:	f7ff ff8c 	bl	64a0 <le_promisc_state>

			if (jam_mode != JAM_NONE)
    6588:	7ce3      	ldrb	r3, [r4, #19]
    658a:	b153      	cbz	r3, 65a2 <promisc_recover_hop_increment+0xca>
				le_jam_count = JAM_COUNT_DEFAULT;
    658c:	4b06      	ldr	r3, [pc, #24]	; (65a8 <promisc_recover_hop_increment+0xd0>)
    658e:	2228      	movs	r2, #40	; 0x28
    6590:	61da      	str	r2, [r3, #28]
    6592:	bd38      	pop	{r3, r4, r5, pc}

			return;
		}
		hop_direct_channel = 2404;
    6594:	f640 1364 	movw	r3, #2404	; 0x964
    6598:	81a3      	strh	r3, [r4, #12]
    659a:	e000      	b.n	659e <promisc_recover_hop_increment+0xc6>
		do_hop = 1;
	}
	else {
		hop_direct_channel = 2404;
    659c:	81a2      	strh	r2, [r4, #12]
		do_hop = 1;
    659e:	2301      	movs	r3, #1
    65a0:	72e3      	strb	r3, [r4, #11]
    65a2:	bd38      	pop	{r3, r4, r5, pc}
    65a4:	10000448 	.word	0x10000448
    65a8:	10000a1c 	.word	0x10000a1c
    65ac:	10000bc4 	.word	0x10000bc4
    65b0:	40004008 	.word	0x40004008
    65b4:	00009250 	.word	0x00009250
    65b8:	00004851 	.word	0x00004851

000065bc <promisc_recover_hop_interval>:
	}
}

void promisc_recover_hop_interval(u8 *packet) {
    65bc:	b538      	push	{r3, r4, r5, lr}
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    65be:	f640 4435 	movw	r4, #3125	; 0xc35
    65c2:	4b24      	ldr	r3, [pc, #144]	; (6654 <promisc_recover_hop_interval+0x98>)
    65c4:	4a24      	ldr	r2, [pc, #144]	; (6658 <promisc_recover_hop_interval+0x9c>)
    65c6:	681b      	ldr	r3, [r3, #0]
    65c8:	6812      	ldr	r2, [r2, #0]
    65ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
    65ce:	fb04 2403 	mla	r4, r4, r3, r2
		cur_clk += 3267800000; // handle rollover
	u32 clk_diff = cur_clk - prev_clk;
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    65d2:	f246 12a7 	movw	r2, #24999	; 0x61a7

void promisc_recover_hop_interval(u8 *packet) {
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
	if (cur_clk < prev_clk)
    65d6:	4d21      	ldr	r5, [pc, #132]	; (665c <promisc_recover_hop_interval+0xa0>)
    65d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
    65da:	429c      	cmp	r4, r3
		cur_clk += 3267800000; // handle rollover
    65dc:	bf3e      	ittt	cc
    65de:	f104 4443 	addcc.w	r4, r4, #3271557120	; 0xc3000000
    65e2:	f5a4 1465 	subcc.w	r4, r4, #3751936	; 0x394000
    65e6:	f5a4 54a2 	subcc.w	r4, r4, #5184	; 0x1440
	u32 clk_diff = cur_clk - prev_clk;
    65ea:	1ae3      	subs	r3, r4, r3
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    65ec:	4293      	cmp	r3, r2
    65ee:	d930      	bls.n	6652 <promisc_recover_hop_interval+0x96>
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
    65f0:	4a1b      	ldr	r2, [pc, #108]	; (6660 <promisc_recover_hop_interval+0xa4>)
		le_promisc.smallest_hop_interval = clk_diff;

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    65f2:	481b      	ldr	r0, [pc, #108]	; (6660 <promisc_recover_hop_interval+0xa4>)

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
    65f4:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    65f8:	428b      	cmp	r3, r1
		le_promisc.smallest_hop_interval = clk_diff;
    65fa:	bf38      	it	cc
    65fc:	f8c2 3100 	strcc.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    6600:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    6604:	4a17      	ldr	r2, [pc, #92]	; (6664 <promisc_recover_hop_interval+0xa8>)
    6606:	f503 3361 	add.w	r3, r3, #230400	; 0x38400
    660a:	f203 3352 	addw	r3, r3, #850	; 0x352
    660e:	fbb3 f3f2 	udiv	r3, r3, r2

	if (le.conn_interval == obsv_hop_interval) {
    6612:	4915      	ldr	r1, [pc, #84]	; (6668 <promisc_recover_hop_interval+0xac>)
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
		le_promisc.smallest_hop_interval = clk_diff;

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    6614:	b29b      	uxth	r3, r3

	if (le.conn_interval == obsv_hop_interval) {
    6616:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
    6618:	429a      	cmp	r2, r3
    661a:	d115      	bne.n	6648 <promisc_recover_hop_interval+0x8c>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    661c:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    6620:	3301      	adds	r3, #1
		if (le_promisc.consec_intervals == 5) {
    6622:	2b05      	cmp	r3, #5

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);

	if (le.conn_interval == obsv_hop_interval) {
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    6624:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    6628:	d112      	bne.n	6650 <promisc_recover_hop_interval+0x94>
			packet_cb = promisc_recover_hop_increment;
    662a:	4b10      	ldr	r3, [pc, #64]	; (666c <promisc_recover_hop_interval+0xb0>)
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
			le_promisc_state(2, &le.conn_interval, 2);
    662c:	2002      	movs	r0, #2

	if (le.conn_interval == obsv_hop_interval) {
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
    662e:	61ab      	str	r3, [r5, #24]
			hop_direct_channel = 2404;
    6630:	f640 1364 	movw	r3, #2404	; 0x964
    6634:	81ab      	strh	r3, [r5, #12]
			hop_mode = HOP_DIRECT;
    6636:	2304      	movs	r3, #4
    6638:	72ab      	strb	r3, [r5, #10]
			do_hop = 1;
			le_promisc_state(2, &le.conn_interval, 2);
    663a:	3122      	adds	r1, #34	; 0x22
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
    663c:	2301      	movs	r3, #1
			le_promisc_state(2, &le.conn_interval, 2);
    663e:	4602      	mov	r2, r0
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
    6640:	72eb      	strb	r3, [r5, #11]
			le_promisc_state(2, &le.conn_interval, 2);
    6642:	f7ff ff2d 	bl	64a0 <le_promisc_state>
    6646:	e003      	b.n	6650 <promisc_recover_hop_interval+0x94>
		}
	} else {
		le.conn_interval = obsv_hop_interval;
    6648:	844b      	strh	r3, [r1, #34]	; 0x22
		le_promisc.consec_intervals = 0;
    664a:	2300      	movs	r3, #0
    664c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
	}

	prev_clk = cur_clk;
    6650:	63ac      	str	r4, [r5, #56]	; 0x38
    6652:	bd38      	pop	{r3, r4, r5, pc}
    6654:	10000bc4 	.word	0x10000bc4
    6658:	40004008 	.word	0x40004008
    665c:	10000a1c 	.word	0x10000a1c
    6660:	10000c08 	.word	0x10000c08
    6664:	00070ea4 	.word	0x00070ea4
    6668:	10000448 	.word	0x10000448
    666c:	000064d9 	.word	0x000064d9

00006670 <promisc_follow_cb>:
}

void promisc_follow_cb(u8 *packet) {
    6670:	b538      	push	{r3, r4, r5, lr}
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    6672:	4d18      	ldr	r5, [pc, #96]	; (66d4 <promisc_follow_cb+0x64>)
	}

	prev_clk = cur_clk;
}

void promisc_follow_cb(u8 *packet) {
    6674:	4601      	mov	r1, r0
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    6676:	696b      	ldr	r3, [r5, #20]
    6678:	bb53      	cbnz	r3, 66d0 <promisc_follow_cb+0x60>
    667a:	7903      	ldrb	r3, [r0, #4]
    667c:	2b01      	cmp	r3, #1
    667e:	d127      	bne.n	66d0 <promisc_follow_cb+0x60>
    6680:	7944      	ldrb	r4, [r0, #5]
    6682:	bb2c      	cbnz	r4, 66d0 <promisc_follow_cb+0x60>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    6684:	79cb      	ldrb	r3, [r1, #7]
    6686:	7a00      	ldrb	r0, [r0, #8]
    6688:	021b      	lsls	r3, r3, #8
    668a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    668e:	7988      	ldrb	r0, [r1, #6]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    6690:	2202      	movs	r2, #2
    6692:	4318      	orrs	r0, r3
    6694:	3104      	adds	r1, #4
    6696:	f000 fe3c 	bl	7312 <btle_reverse_crc>
    669a:	4623      	mov	r3, r4
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    669c:	4622      	mov	r2, r4

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    669e:	60e8      	str	r0, [r5, #12]
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    66a0:	fa20 f102 	lsr.w	r1, r0, r2
    66a4:	f1c2 0417 	rsb	r4, r2, #23
    66a8:	f001 0101 	and.w	r1, r1, #1
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    66ac:	3201      	adds	r2, #1
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    66ae:	40a1      	lsls	r1, r4
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    66b0:	2a18      	cmp	r2, #24
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    66b2:	ea43 0301 	orr.w	r3, r3, r1
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    66b6:	d1f3      	bne.n	66a0 <promisc_follow_cb+0x30>
    66b8:	612b      	str	r3, [r5, #16]
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
		packet_cb = promisc_recover_hop_interval;
    66ba:	4a07      	ldr	r2, [pc, #28]	; (66d8 <promisc_follow_cb+0x68>)
    66bc:	4b07      	ldr	r3, [pc, #28]	; (66dc <promisc_follow_cb+0x6c>)
		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    66be:	2001      	movs	r0, #1
		packet_cb = promisc_recover_hop_interval;
    66c0:	619a      	str	r2, [r3, #24]
		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    66c2:	6168      	str	r0, [r5, #20]
		packet_cb = promisc_recover_hop_interval;
		le_promisc_state(1, &le.crc_init, 3);
    66c4:	4906      	ldr	r1, [pc, #24]	; (66e0 <promisc_follow_cb+0x70>)
    66c6:	2203      	movs	r2, #3
	}
}
    66c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
		packet_cb = promisc_recover_hop_interval;
		le_promisc_state(1, &le.crc_init, 3);
    66cc:	f7ff bee8 	b.w	64a0 <le_promisc_state>
    66d0:	bd38      	pop	{r3, r4, r5, pc}
    66d2:	bf00      	nop
    66d4:	10000448 	.word	0x10000448
    66d8:	000065bd 	.word	0x000065bd
    66dc:	10000a1c 	.word	0x10000a1c
    66e0:	10000454 	.word	0x10000454

000066e4 <see_aa>:
	}
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    66e4:	b530      	push	{r4, r5, lr}
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    66e6:	2200      	movs	r2, #0
		if (le_promisc.active_aa[i].aa == aa) {
    66e8:	4b12      	ldr	r3, [pc, #72]	; (6734 <see_aa+0x50>)
    66ea:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
    66ee:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    66f2:	4284      	cmp	r4, r0
    66f4:	d103      	bne.n	66fe <see_aa+0x1a>
			++le_promisc.active_aa[i].count;
    66f6:	684b      	ldr	r3, [r1, #4]
    66f8:	3301      	adds	r3, #1
    66fa:	604b      	str	r3, [r1, #4]
			return;
    66fc:	bd30      	pop	{r4, r5, pc}
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    66fe:	3201      	adds	r2, #1
    6700:	2a20      	cmp	r2, #32
    6702:	d1f1      	bne.n	66e8 <see_aa+0x4>
    6704:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6708:	460c      	mov	r4, r1
    670a:	2200      	movs	r2, #0
    670c:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
		if (le_promisc.active_aa[i].count < max || max < 0) {
    6710:	686d      	ldr	r5, [r5, #4]
    6712:	42a5      	cmp	r5, r4
    6714:	db01      	blt.n	671a <see_aa+0x36>
    6716:	2c00      	cmp	r4, #0
    6718:	da01      	bge.n	671e <see_aa+0x3a>
    671a:	4611      	mov	r1, r2
    671c:	462c      	mov	r4, r5
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    671e:	3201      	adds	r2, #1
    6720:	2a20      	cmp	r2, #32
    6722:	d1f3      	bne.n	670c <see_aa+0x28>
		if (le_promisc.active_aa[i].count < max || max < 0) {
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
    6724:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    6728:	2201      	movs	r2, #1
    672a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    672e:	605a      	str	r2, [r3, #4]
    6730:	bd30      	pop	{r4, r5, pc}
    6732:	bf00      	nop
    6734:	10000c08 	.word	0x10000c08

00006738 <cb_le_promisc>:
}

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    6738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    673c:	b094      	sub	sp, #80	; 0x50
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    673e:	2100      	movs	r1, #0
	le_promisc.active_aa[killme].aa = aa;
	le_promisc.active_aa[killme].count = 1;
}

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    6740:	4604      	mov	r4, r0
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    6742:	2240      	movs	r2, #64	; 0x40
    6744:	a804      	add	r0, sp, #16
    6746:	f7fd fd17 	bl	4178 <memset>
    674a:	2301      	movs	r3, #1
    674c:	f88d 3010 	strb.w	r3, [sp, #16]
    6750:	f88d 3020 	strb.w	r3, [sp, #32]
    6754:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    6758:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    675c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    6760:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    6764:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    6768:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    676c:	2700      	movs	r7, #0
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];
    676e:	4d59      	ldr	r5, [pc, #356]	; (68d4 <cb_le_promisc+0x19c>)
    6770:	4e59      	ldr	r6, [pc, #356]	; (68d8 <cb_le_promisc+0x1a0>)
    6772:	8828      	ldrh	r0, [r5, #0]
    6774:	3862      	subs	r0, #98	; 0x62
    6776:	b2c0      	uxtb	r0, r0
    6778:	f000 fd74 	bl	7264 <btle_channel_index>
    677c:	5c33      	ldrb	r3, [r6, r0]

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    677e:	2100      	movs	r1, #0
			desired[i][j] ^= whitening[idx];
    6780:	aa04      	add	r2, sp, #16
    6782:	443a      	add	r2, r7
    6784:	18f0      	adds	r0, r6, r3
    6786:	f812 e001 	ldrb.w	lr, [r2, r1]
    678a:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
			idx = (idx + 1) % sizeof(whitening);
    678e:	3301      	adds	r3, #1
	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
			desired[i][j] ^= whitening[idx];
    6790:	ea8e 0000 	eor.w	r0, lr, r0
    6794:	5450      	strb	r0, [r2, r1]
			idx = (idx + 1) % sizeof(whitening);
    6796:	227f      	movs	r2, #127	; 0x7f
    6798:	fbb3 f2f2 	udiv	r2, r3, r2

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    679c:	3101      	adds	r1, #1
			desired[i][j] ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    679e:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    67a2:	2910      	cmp	r1, #16
			desired[i][j] ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    67a4:	eba3 0302 	sub.w	r3, r3, r2

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    67a8:	d1ea      	bne.n	6780 <cb_le_promisc+0x48>
    67aa:	3710      	adds	r7, #16
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    67ac:	2f40      	cmp	r7, #64	; 0x40
    67ae:	d1de      	bne.n	676e <cb_le_promisc+0x36>
    67b0:	2720      	movs	r7, #32
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
    67b2:	46ee      	mov	lr, sp
    67b4:	4b49      	ldr	r3, [pc, #292]	; (68dc <cb_le_promisc+0x1a4>)
    67b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    67b8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    67bc:	2200      	movs	r2, #0
    67be:	ab04      	add	r3, sp, #16
    67c0:	eb03 1102 	add.w	r1, r3, r2, lsl #4
    67c4:	2300      	movs	r3, #0
    67c6:	19e0      	adds	r0, r4, r7
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
				if (unpacked[i+k] != desired[j][k]) {
    67c8:	f810 c003 	ldrb.w	ip, [r0, r3]
    67cc:	5cc8      	ldrb	r0, [r1, r3]
    67ce:	4584      	cmp	ip, r0
    67d0:	d003      	beq.n	67da <cb_le_promisc+0xa2>
					ok[j] = 0;
    67d2:	2300      	movs	r3, #0
    67d4:	f84e 3022 	str.w	r3, [lr, r2, lsl #2]
					break;
    67d8:	e002      	b.n	67e0 <cb_le_promisc+0xa8>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    67da:	3301      	adds	r3, #1
    67dc:	2b10      	cmp	r3, #16
    67de:	d1f2      	bne.n	67c6 <cb_le_promisc+0x8e>
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    67e0:	3201      	adds	r2, #1
    67e2:	2a04      	cmp	r2, #4
    67e4:	d1eb      	bne.n	67be <cb_le_promisc+0x86>
    67e6:	2300      	movs	r3, #0
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
			if (ok[j]) {
    67e8:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
    67ec:	b91a      	cbnz	r2, 67f6 <cb_le_promisc+0xbe>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    67ee:	3301      	adds	r3, #1
    67f0:	2b04      	cmp	r3, #4
    67f2:	d1f9      	bne.n	67e8 <cb_le_promisc+0xb0>
    67f4:	e04a      	b.n	688c <cb_le_promisc+0x154>
		// skip if no match
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
    67f6:	8828      	ldrh	r0, [r5, #0]
    67f8:	3862      	subs	r0, #98	; 0x62
    67fa:	b2c0      	uxtb	r0, r0
    67fc:	f000 fd32 	bl	7264 <btle_channel_index>
    6800:	5c31      	ldrb	r1, [r6, r0]
		for (j = 0; j < 4+3+3; ++j) {
    6802:	2200      	movs	r2, #0
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    6804:	f04f 0c00 	mov.w	ip, #0
    6808:	46e6      	mov	lr, ip
    680a:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
    680e:	eb0e 0308 	add.w	r3, lr, r8
    6812:	4423      	add	r3, r4
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
    6814:	2a03      	cmp	r2, #3
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
    6816:	f813 3c20 	ldrb.w	r3, [r3, #-32]
				if (j >= 4) { // unwhiten data bytes
    681a:	dd0a      	ble.n	6832 <cb_le_promisc+0xfa>
					bit ^= whitening[idx];
    681c:	1870      	adds	r0, r6, r1
    681e:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
					idx = (idx + 1) % sizeof(whitening);
    6822:	3101      	adds	r1, #1
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
    6824:	4043      	eors	r3, r0
					idx = (idx + 1) % sizeof(whitening);
    6826:	207f      	movs	r0, #127	; 0x7f
    6828:	fbb1 f0f0 	udiv	r0, r1, r0
    682c:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
    6830:	1a09      	subs	r1, r1, r0
				}
				byte |= bit << k;
    6832:	fa03 f30e 	lsl.w	r3, r3, lr

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    6836:	f10e 0e01 	add.w	lr, lr, #1
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
    683a:	ea43 030c 	orr.w	r3, r3, ip

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    683e:	f1be 0f08 	cmp.w	lr, #8
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
    6842:	fa5f fc83 	uxtb.w	ip, r3

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    6846:	d1e2      	bne.n	680e <cb_le_promisc+0xd6>
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
    6848:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 68f4 <cb_le_promisc+0x1bc>
    684c:	f8d8 3000 	ldr.w	r3, [r8]
    6850:	f803 c002 	strb.w	ip, [r3, r2]
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
    6854:	3201      	adds	r2, #1
    6856:	2a0a      	cmp	r2, #10
    6858:	d1d4      	bne.n	6804 <cb_le_promisc+0xcc>
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    685a:	f8d8 3000 	ldr.w	r3, [r8]
    685e:	78db      	ldrb	r3, [r3, #3]
				 (idle_rxbuf[2] << 16) |
    6860:	f8d8 2000 	ldr.w	r2, [r8]
    6864:	7892      	ldrb	r2, [r2, #2]
				 (idle_rxbuf[1] <<  8) |
    6866:	f8d8 1000 	ldr.w	r1, [r8]
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    686a:	0412      	lsls	r2, r2, #16
				 (idle_rxbuf[1] <<  8) |
    686c:	7848      	ldrb	r0, [r1, #1]
				 (idle_rxbuf[0]);
    686e:	f8d8 1000 	ldr.w	r1, [r8]
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    6872:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
    6876:	7809      	ldrb	r1, [r1, #0]
    6878:	430b      	orrs	r3, r1
		see_aa(aa);
    687a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    687e:	f7ff ff31 	bl	66e4 <see_aa>

		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    6882:	f8d8 1000 	ldr.w	r1, [r8]
    6886:	2001      	movs	r0, #1
    6888:	f7fd fdf6 	bl	4478 <enqueue>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    688c:	3701      	adds	r7, #1
    688e:	f5b7 7f3c 	cmp.w	r7, #752	; 0x2f0
    6892:	d18e      	bne.n	67b2 <cb_le_promisc+0x7a>
    6894:	2300      	movs	r3, #0
    6896:	4a12      	ldr	r2, [pc, #72]	; (68e0 <cb_le_promisc+0x1a8>)
    6898:	eb02 01c3 	add.w	r1, r2, r3, lsl #3

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
    689c:	6849      	ldr	r1, [r1, #4]
    689e:	2903      	cmp	r1, #3
    68a0:	dd11      	ble.n	68c6 <cb_le_promisc+0x18e>
			le_set_access_address(le_promisc.active_aa[i].aa);
    68a2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
    68a6:	f7fd fe33 	bl	4510 <le_set_access_address>
			data_cb = cb_follow_le;
    68aa:	4b0e      	ldr	r3, [pc, #56]	; (68e4 <cb_le_promisc+0x1ac>)
    68ac:	4a0e      	ldr	r2, [pc, #56]	; (68e8 <cb_le_promisc+0x1b0>)
			packet_cb = promisc_follow_cb;
			le.crc_verify = 0;
    68ae:	2400      	movs	r4, #0

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
    68b0:	629a      	str	r2, [r3, #40]	; 0x28
			packet_cb = promisc_follow_cb;
    68b2:	4a0e      	ldr	r2, [pc, #56]	; (68ec <cb_le_promisc+0x1b4>)
			le.crc_verify = 0;
			le_promisc_state(0, &le.access_address, 4);
    68b4:	4620      	mov	r0, r4
	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
			packet_cb = promisc_follow_cb;
    68b6:	619a      	str	r2, [r3, #24]
			le.crc_verify = 0;
			le_promisc_state(0, &le.access_address, 4);
    68b8:	490d      	ldr	r1, [pc, #52]	; (68f0 <cb_le_promisc+0x1b8>)
    68ba:	2204      	movs	r2, #4
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
			packet_cb = promisc_follow_cb;
			le.crc_verify = 0;
    68bc:	616c      	str	r4, [r5, #20]
			le_promisc_state(0, &le.access_address, 4);
    68be:	f7ff fdef 	bl	64a0 <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    68c2:	4620      	mov	r0, r4
    68c4:	e003      	b.n	68ce <cb_le_promisc+0x196>
		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    68c6:	3301      	adds	r3, #1
    68c8:	2b20      	cmp	r3, #32
    68ca:	d1e4      	bne.n	6896 <cb_le_promisc+0x15e>
			// quit using the old stuff and switch to sync mode
			return 0;
		}
	}

	return 1;
    68cc:	2001      	movs	r0, #1
}
    68ce:	b014      	add	sp, #80	; 0x50
    68d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68d4:	10000448 	.word	0x10000448
    68d8:	00009250 	.word	0x00009250
    68dc:	00009ae8 	.word	0x00009ae8
    68e0:	10000c08 	.word	0x10000c08
    68e4:	10000a1c 	.word	0x10000a1c
    68e8:	000045d9 	.word	0x000045d9
    68ec:	00006671 	.word	0x00006671
    68f0:	1000044c 	.word	0x1000044c
    68f4:	10000d20 	.word	0x10000d20

000068f8 <bt_promisc_le>:

void bt_promisc_le() {
    68f8:	b538      	push	{r3, r4, r5, lr}
	while (requested_mode == MODE_BT_PROMISC_LE) {
    68fa:	4c16      	ldr	r4, [pc, #88]	; (6954 <bt_promisc_le+0x5c>)
    68fc:	7ca3      	ldrb	r3, [r4, #18]
    68fe:	2b0a      	cmp	r3, #10
    6900:	d126      	bne.n	6950 <bt_promisc_le+0x58>
		reset_le_promisc();

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    6902:	4d15      	ldr	r5, [pc, #84]	; (6958 <bt_promisc_le+0x60>)
	return 1;
}

void bt_promisc_le() {
	while (requested_mode == MODE_BT_PROMISC_LE) {
		reset_le_promisc();
    6904:	f7ff f8ee 	bl	5ae4 <reset_le_promisc>

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    6908:	882b      	ldrh	r3, [r5, #0]
    690a:	07db      	lsls	r3, r3, #31
			channel = 2440;
    690c:	bf44      	itt	mi
    690e:	f640 1388 	movwmi	r3, #2440	; 0x988
    6912:	802b      	strhmi	r3, [r5, #0]

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    6914:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    6916:	b94b      	cbnz	r3, 692c <bt_promisc_le+0x34>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set(channel);
    6918:	4b0f      	ldr	r3, [pc, #60]	; (6958 <bt_promisc_le+0x60>)
    691a:	8818      	ldrh	r0, [r3, #0]
    691c:	b280      	uxth	r0, r0
    691e:	f000 fe8b 	bl	7638 <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    6922:	4b0e      	ldr	r3, [pc, #56]	; (695c <bt_promisc_le+0x64>)
			bt_generic_le(MODE_BT_PROMISC_LE);
    6924:	200a      	movs	r0, #10

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set(channel);
			data_cb = cb_le_promisc;
    6926:	62a3      	str	r3, [r4, #40]	; 0x28
			bt_generic_le(MODE_BT_PROMISC_LE);
    6928:	f7ff f8ec 	bl	5b04 <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    692c:	7ca4      	ldrb	r4, [r4, #18]
    692e:	b2e4      	uxtb	r4, r4
    6930:	2c0a      	cmp	r4, #10
    6932:	d10d      	bne.n	6950 <bt_promisc_le+0x58>
			break;

		le_promisc_state(0, &le.access_address, 4);
    6934:	2000      	movs	r0, #0
    6936:	490a      	ldr	r1, [pc, #40]	; (6960 <bt_promisc_le+0x68>)
    6938:	2204      	movs	r2, #4
    693a:	f7ff fdb1 	bl	64a0 <le_promisc_state>
		packet_cb = promisc_follow_cb;
    693e:	4a09      	ldr	r2, [pc, #36]	; (6964 <bt_promisc_le+0x6c>)
    6940:	4b04      	ldr	r3, [pc, #16]	; (6954 <bt_promisc_le+0x5c>)
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
    6942:	4620      	mov	r0, r4
		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
			break;

		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
    6944:	619a      	str	r2, [r3, #24]
		le.crc_verify = 0;
    6946:	2300      	movs	r3, #0
    6948:	616b      	str	r3, [r5, #20]
		bt_le_sync(MODE_BT_PROMISC_LE);
    694a:	f7ff f9cd 	bl	5ce8 <bt_le_sync>
    694e:	e7d4      	b.n	68fa <bt_promisc_le+0x2>
    6950:	bd38      	pop	{r3, r4, r5, pc}
    6952:	bf00      	nop
    6954:	10000a1c 	.word	0x10000a1c
    6958:	10000448 	.word	0x10000448
    695c:	00006739 	.word	0x00006739
    6960:	1000044c 	.word	0x1000044c
    6964:	00006671 	.word	0x00006671

00006968 <generatePacket_boss>:
	}
}

u8 generatePacket_boss(uint8_t mode, uint8_t *data, u8 *pkt){
    6968:	b538      	push	{r3, r4, r5, lr}
    696a:	4614      	mov	r4, r2

	//Copy pkt_template contents to the new packet
	//for(i = 0; i < pkt_len; i++)
	//	pkt[i] = pkt_tempate[i];

	switch(mode){
    696c:	b990      	cbnz	r0, 6994 <generatePacket_boss+0x2c>

		case ADV_IND:

			// LL header
			pkt[0] =  0x00;
			pkt[1] = 0x09;
    696e:	4613      	mov	r3, r2
	switch(mode){

		case ADV_IND:

			// LL header
			pkt[0] =  0x00;
    6970:	7010      	strb	r0, [r2, #0]
			pkt[1] = 0x09;
    6972:	2209      	movs	r2, #9
    6974:	f803 2f01 	strb.w	r2, [r3, #1]!
    6978:	4a0e      	ldr	r2, [pc, #56]	; (69b4 <generatePacket_boss+0x4c>)
    697a:	1de1      	adds	r1, r4, #7
			pkt_len = 2; //2 Bytes for LL Address

			// Advertising Address: copy the user-specified mac address
			for (i = 0; i < 6; ++i)
				pkt[i+2] = slave_mac_address[5-i];
    697c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
    6980:	f803 0f01 	strb.w	r0, [r3, #1]!
			pkt[0] =  0x00;
			pkt[1] = 0x09;
			pkt_len = 2; //2 Bytes for LL Address

			// Advertising Address: copy the user-specified mac address
			for (i = 0; i < 6; ++i)
    6984:	428b      	cmp	r3, r1
    6986:	d1f9      	bne.n	697c <generatePacket_boss+0x14>

			// Add Random Data : 3 Bytes for now
			// TODO: make data dynamic
			// Ahmed Salem, 4/27/2017
			for (i = 0; i < 3; i++){
				pkt[i+8] = 0x02;
    6988:	2302      	movs	r3, #2
    698a:	7223      	strb	r3, [r4, #8]
    698c:	7263      	strb	r3, [r4, #9]
    698e:	72a3      	strb	r3, [r4, #10]
				pkt_len++;
    6990:	250b      	movs	r5, #11
    6992:	e000      	b.n	6996 <generatePacket_boss+0x2e>
		// CRC (calc)
		0xff, 0xff, 0xff,
	};

	// -3 to eliminate the length of the default CRC in the template.
	pkt_len = sizeof(pkt_tempate);
    6994:	250e      	movs	r5, #14
		default:
			break;
	}

//	pkt_len = sizeof(pkt);
	calc_crc = btle_calc_crc(le.crc_init_reversed, pkt, pkt_len);
    6996:	4b08      	ldr	r3, [pc, #32]	; (69b8 <generatePacket_boss+0x50>)
    6998:	4621      	mov	r1, r4
    699a:	6918      	ldr	r0, [r3, #16]
    699c:	462a      	mov	r2, r5
    699e:	f000 fc9b 	bl	72d8 <btle_calc_crc>
	pkt[pkt_len+0] = (calc_crc >>  0) & 0xff;
    69a2:	5560      	strb	r0, [r4, r5]
	pkt[pkt_len+1] = (calc_crc >>  8) & 0xff;
    69a4:	0a03      	lsrs	r3, r0, #8
    69a6:	442c      	add	r4, r5
	pkt[pkt_len+2] = (calc_crc >> 16) & 0xff;
    69a8:	0c00      	lsrs	r0, r0, #16
    69aa:	70a0      	strb	r0, [r4, #2]
	}

//	pkt_len = sizeof(pkt);
	calc_crc = btle_calc_crc(le.crc_init_reversed, pkt, pkt_len);
	pkt[pkt_len+0] = (calc_crc >>  0) & 0xff;
	pkt[pkt_len+1] = (calc_crc >>  8) & 0xff;
    69ac:	7063      	strb	r3, [r4, #1]



	return pkt_len;

}
    69ae:	1ce8      	adds	r0, r5, #3
    69b0:	bd38      	pop	{r3, r4, r5, pc}
    69b2:	bf00      	nop
    69b4:	10000a42 	.word	0x10000a42
    69b8:	10000448 	.word	0x10000448

000069bc <bt_boss_slave_le>:

void bt_boss_slave_le(){
    69bc:	b570      	push	{r4, r5, r6, lr}
    69be:	b08a      	sub	sp, #40	; 0x28
	u8 pkt_len;
	//39 is the max. PDU length from the BLE standard.
	u8 pkt[39];


	pkt_len = generatePacket_boss(ADV_IND, NULL, pkt);
    69c0:	2000      	movs	r0, #0
    69c2:	4601      	mov	r1, r0
    69c4:	466a      	mov	r2, sp
    69c6:	f7ff ffcf 	bl	6968 <generatePacket_boss>
    69ca:	4606      	mov	r6, r0

	clkn_start();
    69cc:	f000 fed0 	bl	7770 <clkn_start>

	// spam advertising packets
	while (requested_mode == MODE_BOSS_SLAVE_LE) {
    69d0:	4b0b      	ldr	r3, [pc, #44]	; (6a00 <bt_boss_slave_le+0x44>)
    69d2:	7c9b      	ldrb	r3, [r3, #18]
    69d4:	2b11      	cmp	r3, #17
    69d6:	d111      	bne.n	69fc <bt_boss_slave_le+0x40>
		ICER0 = ICER0_ICE_USB;
    69d8:	4b0a      	ldr	r3, [pc, #40]	; (6a04 <bt_boss_slave_le+0x48>)
    69da:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
		ICER0 = ICER0_ICE_DMA;
    69de:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000

	clkn_start();

	// spam advertising packets
	while (requested_mode == MODE_BOSS_SLAVE_LE) {
		ICER0 = ICER0_ICE_USB;
    69e2:	601d      	str	r5, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
		le_transmit(0x8e89bed6, pkt_len, pkt);
    69e4:	4808      	ldr	r0, [pc, #32]	; (6a08 <bt_boss_slave_le+0x4c>)
	clkn_start();

	// spam advertising packets
	while (requested_mode == MODE_BOSS_SLAVE_LE) {
		ICER0 = ICER0_ICE_USB;
		ICER0 = ICER0_ICE_DMA;
    69e6:	601c      	str	r4, [r3, #0]
		le_transmit(0x8e89bed6, pkt_len, pkt);
    69e8:	4631      	mov	r1, r6
    69ea:	466a      	mov	r2, sp
    69ec:	f7fe fc7e 	bl	52ec <le_transmit>
		ISER0 = ISER0_ISE_USB;
    69f0:	4b06      	ldr	r3, [pc, #24]	; (6a0c <bt_boss_slave_le+0x50>)
    69f2:	601d      	str	r5, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    69f4:	601c      	str	r4, [r3, #0]
		msleep(100);
    69f6:	f7fe fb15 	bl	5024 <msleep.constprop.3>
    69fa:	e7e9      	b.n	69d0 <bt_boss_slave_le+0x14>
	}
}
    69fc:	b00a      	add	sp, #40	; 0x28
    69fe:	bd70      	pop	{r4, r5, r6, pc}
    6a00:	10000a1c 	.word	0x10000a1c
    6a04:	e000e180 	.word	0xe000e180
    6a08:	8e89bed6 	.word	0x8e89bed6
    6a0c:	e000e100 	.word	0xe000e100

00006a10 <bt_slave_le>:


void bt_slave_le() {
    6a10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	u32 calc_crc;
	int i;

	u8 adv_ind[] = {
    6a12:	466a      	mov	r2, sp
    6a14:	466d      	mov	r5, sp
    6a16:	4b22      	ldr	r3, [pc, #136]	; (6aa0 <bt_slave_le+0x90>)
    6a18:	f103 0608 	add.w	r6, r3, #8
    6a1c:	4614      	mov	r4, r2
    6a1e:	6818      	ldr	r0, [r3, #0]
    6a20:	6859      	ldr	r1, [r3, #4]
    6a22:	3308      	adds	r3, #8
    6a24:	c403      	stmia	r4!, {r0, r1}
    6a26:	42b3      	cmp	r3, r6
    6a28:	4622      	mov	r2, r4
    6a2a:	d1f7      	bne.n	6a1c <bt_slave_le+0xc>
    6a2c:	6818      	ldr	r0, [r3, #0]
    6a2e:	889b      	ldrh	r3, [r3, #4]
    6a30:	6020      	str	r0, [r4, #0]
    6a32:	80a3      	strh	r3, [r4, #4]
    6a34:	f10d 0201 	add.w	r2, sp, #1
    6a38:	2305      	movs	r3, #5

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
		adv_ind[i+2] = slave_mac_address[5-i];
    6a3a:	491a      	ldr	r1, [pc, #104]	; (6aa4 <bt_slave_le+0x94>)
    6a3c:	5c59      	ldrb	r1, [r3, r1]
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    6a3e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
		adv_ind[i+2] = slave_mac_address[5-i];
    6a42:	f802 1f01 	strb.w	r1, [r2, #1]!
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    6a46:	d2f8      	bcs.n	6a3a <bt_slave_le+0x2a>
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
    6a48:	4b17      	ldr	r3, [pc, #92]	; (6aa8 <bt_slave_le+0x98>)
    6a4a:	4629      	mov	r1, r5
    6a4c:	6918      	ldr	r0, [r3, #16]
    6a4e:	220b      	movs	r2, #11
    6a50:	f000 fc42 	bl	72d8 <btle_calc_crc>
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    6a54:	0a03      	lsrs	r3, r0, #8
	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
    6a56:	f88d 000b 	strb.w	r0, [sp, #11]
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    6a5a:	0c00      	lsrs	r0, r0, #16
	for (i = 0; i < 6; ++i)
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    6a5c:	f88d 300c 	strb.w	r3, [sp, #12]
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    6a60:	f88d 000d 	strb.w	r0, [sp, #13]

	clkn_start();
    6a64:	f000 fe84 	bl	7770 <clkn_start>

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE || requested_mode == MODE_BOSS_SLAVE_LE) {
    6a68:	4b10      	ldr	r3, [pc, #64]	; (6aac <bt_slave_le+0x9c>)
    6a6a:	7c9a      	ldrb	r2, [r3, #18]
    6a6c:	2a0c      	cmp	r2, #12
    6a6e:	d111      	bne.n	6a94 <bt_slave_le+0x84>
		ICER0 = ICER0_ICE_USB;
    6a70:	4b0f      	ldr	r3, [pc, #60]	; (6ab0 <bt_slave_le+0xa0>)
    6a72:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
		ICER0 = ICER0_ICE_DMA;
    6a76:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000

	clkn_start();

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE || requested_mode == MODE_BOSS_SLAVE_LE) {
		ICER0 = ICER0_ICE_USB;
    6a7a:	601e      	str	r6, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    6a7c:	480d      	ldr	r0, [pc, #52]	; (6ab4 <bt_slave_le+0xa4>)
	clkn_start();

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE || requested_mode == MODE_BOSS_SLAVE_LE) {
		ICER0 = ICER0_ICE_USB;
		ICER0 = ICER0_ICE_DMA;
    6a7e:	601c      	str	r4, [r3, #0]
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    6a80:	210e      	movs	r1, #14
    6a82:	462a      	mov	r2, r5
    6a84:	f7fe fc32 	bl	52ec <le_transmit>
		ISER0 = ISER0_ISE_USB;
    6a88:	4b0b      	ldr	r3, [pc, #44]	; (6ab8 <bt_slave_le+0xa8>)
    6a8a:	601e      	str	r6, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    6a8c:	601c      	str	r4, [r3, #0]
		msleep(100);
    6a8e:	f7fe fac9 	bl	5024 <msleep.constprop.3>
    6a92:	e7e9      	b.n	6a68 <bt_slave_le+0x58>
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;

	clkn_start();

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE || requested_mode == MODE_BOSS_SLAVE_LE) {
    6a94:	7c9b      	ldrb	r3, [r3, #18]
    6a96:	2b11      	cmp	r3, #17
    6a98:	d0ea      	beq.n	6a70 <bt_slave_le+0x60>
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
		ISER0 = ISER0_ISE_USB;
		ISER0 = ISER0_ISE_DMA;
		msleep(100);
	}
}
    6a9a:	b004      	add	sp, #16
    6a9c:	bd70      	pop	{r4, r5, r6, pc}
    6a9e:	bf00      	nop
    6aa0:	00009af8 	.word	0x00009af8
    6aa4:	10000a3c 	.word	0x10000a3c
    6aa8:	10000448 	.word	0x10000448
    6aac:	10000a1c 	.word	0x10000a1c
    6ab0:	e000e180 	.word	0xe000e180
    6ab4:	8e89bed6 	.word	0x8e89bed6
    6ab8:	e000e100 	.word	0xe000e100

00006abc <rx_generic_sync>:

void rx_generic_sync(void) {
    6abc:	b510      	push	{r4, lr}
    6abe:	b08a      	sub	sp, #40	; 0x28
	u16 reg_val;

	/* Put syncword at start of buffer
	 * DGS: fix this later, we don't know number of syncword bytes, etc
	 */
	reg_val = cc2400_get(SYNCH);
    6ac0:	202d      	movs	r0, #45	; 0x2d
    6ac2:	f001 fd47 	bl	8554 <cc2400_get>
	buf[0] = (reg_val >> 8) & 0xFF;
    6ac6:	0a03      	lsrs	r3, r0, #8
	buf[1] = reg_val & 0xFF;
    6ac8:	f88d 0005 	strb.w	r0, [sp, #5]
	reg_val = cc2400_get(SYNCL);
    6acc:	202c      	movs	r0, #44	; 0x2c

	/* Put syncword at start of buffer
	 * DGS: fix this later, we don't know number of syncword bytes, etc
	 */
	reg_val = cc2400_get(SYNCH);
	buf[0] = (reg_val >> 8) & 0xFF;
    6ace:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = reg_val & 0xFF;
	reg_val = cc2400_get(SYNCL);
    6ad2:	f001 fd3f 	bl	8554 <cc2400_get>
	buf[2] = (reg_val >> 8) & 0xFF;
    6ad6:	0a03      	lsrs	r3, r0, #8
    6ad8:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = reg_val & 0xFF;
    6adc:	f88d 0007 	strb.w	r0, [sp, #7]

	queue_init();
    6ae0:	f000 fcbc 	bl	745c <queue_init>
	clkn_start();
    6ae4:	f000 fe44 	bl	7770 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6ae8:	f001 fdde 	bl	86a8 <cc2400_status>
    6aec:	0641      	lsls	r1, r0, #25
    6aee:	d5fb      	bpl.n	6ae8 <rx_generic_sync+0x2c>
	cc2400_strobe(SFSON);
    6af0:	2061      	movs	r0, #97	; 0x61
    6af2:	f001 fde0 	bl	86b6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6af6:	f001 fdd7 	bl	86a8 <cc2400_status>
    6afa:	0742      	lsls	r2, r0, #29
    6afc:	d5fb      	bpl.n	6af6 <rx_generic_sync+0x3a>
	RXLED_SET;
    6afe:	4b15      	ldr	r3, [pc, #84]	; (6b54 <rx_generic_sync+0x98>)
    6b00:	2210      	movs	r2, #16
    6b02:	461c      	mov	r4, r3
    6b04:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    6b06:	4a14      	ldr	r2, [pc, #80]	; (6b58 <rx_generic_sync+0x9c>)
    6b08:	2180      	movs	r1, #128	; 0x80
    6b0a:	6011      	str	r1, [r2, #0]
		HGM_SET;
    6b0c:	f44f 7180 	mov.w	r1, #256	; 0x100
    6b10:	6011      	str	r1, [r2, #0]
#endif
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6b12:	200e      	movs	r0, #14
    6b14:	f001 fd1e 	bl	8554 <cc2400_get>
    6b18:	f000 001f 	and.w	r0, r0, #31
    6b1c:	280f      	cmp	r0, #15
    6b1e:	d1f8      	bne.n	6b12 <rx_generic_sync+0x56>
		cc2400_strobe(SRX);
    6b20:	2062      	movs	r0, #98	; 0x62
    6b22:	f001 fdc8 	bl	86b6 <cc2400_strobe>
		USRLED_CLR;
    6b26:	4b0d      	ldr	r3, [pc, #52]	; (6b5c <rx_generic_sync+0xa0>)
    6b28:	2202      	movs	r2, #2
    6b2a:	601a      	str	r2, [r3, #0]
		while (!(cc2400_status() & SYNC_RECEIVED));
    6b2c:	f001 fdbc 	bl	86a8 <cc2400_status>
    6b30:	06c3      	lsls	r3, r0, #27
    6b32:	d5fb      	bpl.n	6b2c <rx_generic_sync+0x70>
		USRLED_SET;
    6b34:	2302      	movs	r3, #2
    6b36:	6023      	str	r3, [r4, #0]

		cc2400_fifo_read(len, buf+4);
    6b38:	a902      	add	r1, sp, #8
    6b3a:	2020      	movs	r0, #32
    6b3c:	f001 fd6a 	bl	8614 <cc2400_fifo_read>
		enqueue(BR_PACKET, buf);
    6b40:	a901      	add	r1, sp, #4
    6b42:	2000      	movs	r0, #0
    6b44:	f7fd fc98 	bl	4478 <enqueue>
		handle_usb(clkn);
    6b48:	4b05      	ldr	r3, [pc, #20]	; (6b60 <rx_generic_sync+0xa4>)
    6b4a:	6818      	ldr	r0, [r3, #0]
    6b4c:	f000 fce8 	bl	7520 <handle_usb>
	}
    6b50:	e7df      	b.n	6b12 <rx_generic_sync+0x56>
    6b52:	bf00      	nop
    6b54:	2009c038 	.word	0x2009c038
    6b58:	2009c058 	.word	0x2009c058
    6b5c:	2009c03c 	.word	0x2009c03c
    6b60:	10000bc4 	.word	0x10000bc4

00006b64 <rx_generic>:
}

void rx_generic(void) {
    6b64:	b508      	push	{r3, lr}
	// Check for packet mode
	if(cc2400_get(GRMDM) && 0x0400) {
    6b66:	2020      	movs	r0, #32
    6b68:	f001 fcf4 	bl	8554 <cc2400_get>
    6b6c:	b108      	cbz	r0, 6b72 <rx_generic+0xe>
		rx_generic_sync();
    6b6e:	f7ff ffa5 	bl	6abc <rx_generic_sync>
	} else {
		modulation = MOD_NONE;
    6b72:	4b03      	ldr	r3, [pc, #12]	; (6b80 <rx_generic+0x1c>)
    6b74:	2203      	movs	r2, #3
    6b76:	701a      	strb	r2, [r3, #0]
		bt_stream_rx();
	}
}
    6b78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	// Check for packet mode
	if(cc2400_get(GRMDM) && 0x0400) {
		rx_generic_sync();
	} else {
		modulation = MOD_NONE;
		bt_stream_rx();
    6b7c:	f7fe bd9c 	b.w	56b8 <bt_stream_rx>
    6b80:	10000a1c 	.word	0x10000a1c

00006b84 <tx_generic>:
	}
}

void tx_generic(void) {
    6b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16 synch, syncl;
	u8 prev_mode = mode;
    6b88:	4d35      	ldr	r5, [pc, #212]	; (6c60 <tx_generic+0xdc>)

	mode = MODE_TX_GENERIC;
    6b8a:	2310      	movs	r3, #16

	// Save existing syncword
	synch = cc2400_get(SYNCH);
    6b8c:	202d      	movs	r0, #45	; 0x2d
	}
}

void tx_generic(void) {
	u16 synch, syncl;
	u8 prev_mode = mode;
    6b8e:	7c6e      	ldrb	r6, [r5, #17]

	mode = MODE_TX_GENERIC;
    6b90:	746b      	strb	r3, [r5, #17]

	// Save existing syncword
	synch = cc2400_get(SYNCH);
    6b92:	f001 fcdf 	bl	8554 <cc2400_get>
    6b96:	4680      	mov	r8, r0
	syncl = cc2400_get(SYNCL);
    6b98:	202c      	movs	r0, #44	; 0x2c
    6b9a:	f001 fcdb 	bl	8554 <cc2400_get>

	cc2400_set(SYNCH, tx_pkt.synch);
    6b9e:	4c31      	ldr	r4, [pc, #196]	; (6c64 <tx_generic+0xe0>)

	mode = MODE_TX_GENERIC;

	// Save existing syncword
	synch = cc2400_get(SYNCH);
	syncl = cc2400_get(SYNCL);
    6ba0:	4607      	mov	r7, r0

	cc2400_set(SYNCH, tx_pkt.synch);
    6ba2:	8821      	ldrh	r1, [r4, #0]
    6ba4:	202d      	movs	r0, #45	; 0x2d
    6ba6:	f001 fcde 	bl	8566 <cc2400_set>
	cc2400_set(SYNCL, tx_pkt.syncl);
    6baa:	202c      	movs	r0, #44	; 0x2c
    6bac:	8861      	ldrh	r1, [r4, #2]
    6bae:	f001 fcda 	bl	8566 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0057);
    6bb2:	2003      	movs	r0, #3
    6bb4:	2157      	movs	r1, #87	; 0x57
    6bb6:	f001 fcd6 	bl	8566 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    6bba:	2014      	movs	r0, #20
    6bbc:	f241 314b 	movw	r1, #4939	; 0x134b
    6bc0:	f001 fcd1 	bl	8566 <cc2400_set>
	cc2400_set(GRMDM, 0x0f61);
    6bc4:	2020      	movs	r0, #32
    6bc6:	f640 7161 	movw	r1, #3937	; 0xf61
    6bca:	f001 fccc 	bl	8566 <cc2400_set>
	cc2400_set(FSDIV, tx_pkt.channel);
    6bce:	2002      	movs	r0, #2
    6bd0:	88a1      	ldrh	r1, [r4, #4]
    6bd2:	f001 fcc8 	bl	8566 <cc2400_set>
	cc2400_set(FREND, tx_pkt.pa_level);
    6bd6:	2005      	movs	r0, #5
    6bd8:	79e1      	ldrb	r1, [r4, #7]
	}
}

void tx_generic(void) {
	u16 synch, syncl;
	u8 prev_mode = mode;
    6bda:	b2f6      	uxtb	r6, r6
	cc2400_set(SYNCL, tx_pkt.syncl);
	cc2400_set(MDMCTRL, 0x0057);
	cc2400_set(MDMTST0, 0x134b);
	cc2400_set(GRMDM, 0x0f61);
	cc2400_set(FSDIV, tx_pkt.channel);
	cc2400_set(FREND, tx_pkt.pa_level);
    6bdc:	f001 fcc3 	bl	8566 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6be0:	f001 fd62 	bl	86a8 <cc2400_status>
    6be4:	0641      	lsls	r1, r0, #25
    6be6:	d5fb      	bpl.n	6be0 <tx_generic+0x5c>
	cc2400_strobe(SFSON);
    6be8:	2061      	movs	r0, #97	; 0x61
    6bea:	f001 fd64 	bl	86b6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6bee:	f001 fd5b 	bl	86a8 <cc2400_status>
    6bf2:	0742      	lsls	r2, r0, #29
    6bf4:	d5fb      	bpl.n	6bee <tx_generic+0x6a>
	TXLED_SET;
    6bf6:	4b1c      	ldr	r3, [pc, #112]	; (6c68 <tx_generic+0xe4>)
    6bf8:	f44f 7280 	mov.w	r2, #256	; 0x100
    6bfc:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    6bfe:	2280      	movs	r2, #128	; 0x80
    6c00:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6c02:	200e      	movs	r0, #14
    6c04:	f001 fca6 	bl	8554 <cc2400_get>
    6c08:	f000 001f 	and.w	r0, r0, #31
    6c0c:	280f      	cmp	r0, #15
    6c0e:	d1f8      	bne.n	6c02 <tx_generic+0x7e>

	cc2400_fifo_write(tx_pkt.length, tx_pkt.data);
    6c10:	79a0      	ldrb	r0, [r4, #6]
    6c12:	4916      	ldr	r1, [pc, #88]	; (6c6c <tx_generic+0xe8>)
    6c14:	f001 fcba 	bl	858c <cc2400_fifo_write>
	cc2400_strobe(STX);
    6c18:	2063      	movs	r0, #99	; 0x63
    6c1a:	f001 fd4c 	bl	86b6 <cc2400_strobe>

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6c1e:	200e      	movs	r0, #14
    6c20:	f001 fc98 	bl	8554 <cc2400_get>
    6c24:	f000 001f 	and.w	r0, r0, #31
    6c28:	280f      	cmp	r0, #15
    6c2a:	d1f8      	bne.n	6c1e <tx_generic+0x9a>
	TXLED_CLR;
    6c2c:	4b10      	ldr	r3, [pc, #64]	; (6c70 <tx_generic+0xec>)
    6c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6c32:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    6c34:	2064      	movs	r0, #100	; 0x64
    6c36:	f001 fd3e 	bl	86b6 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    6c3a:	f001 fd35 	bl	86a8 <cc2400_status>
    6c3e:	0743      	lsls	r3, r0, #29
    6c40:	d4fb      	bmi.n	6c3a <tx_generic+0xb6>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    6c42:	4b0c      	ldr	r3, [pc, #48]	; (6c74 <tx_generic+0xf0>)
    6c44:	2280      	movs	r2, #128	; 0x80
    6c46:	601a      	str	r2, [r3, #0]
#endif

	// Restore state
	cc2400_set(SYNCH, synch);
    6c48:	202d      	movs	r0, #45	; 0x2d
    6c4a:	4641      	mov	r1, r8
    6c4c:	f001 fc8b 	bl	8566 <cc2400_set>
	cc2400_set(SYNCL, syncl);
    6c50:	202c      	movs	r0, #44	; 0x2c
    6c52:	4639      	mov	r1, r7
    6c54:	f001 fc87 	bl	8566 <cc2400_set>
	requested_mode = prev_mode;
    6c58:	74ae      	strb	r6, [r5, #18]
    6c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c5e:	bf00      	nop
    6c60:	10000a1c 	.word	0x10000a1c
    6c64:	10000bc8 	.word	0x10000bc8
    6c68:	2009c038 	.word	0x2009c038
    6c6c:	10000bd0 	.word	0x10000bd0
    6c70:	2009c03c 	.word	0x2009c03c
    6c74:	2009c05c 	.word	0x2009c05c

00006c78 <specan>:
}

/* spectrum analysis */
void specan()
{
    6c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c7c:	b08e      	sub	sp, #56	; 0x38
	u16 f;
	u8 i = 0;
	u8 buf[DMA_SIZE];

	RXLED_SET;
    6c7e:	4b3d      	ldr	r3, [pc, #244]	; (6d74 <specan+0xfc>)
    6c80:	2210      	movs	r2, #16
    6c82:	601a      	str	r2, [r3, #0]

	queue_init();
    6c84:	f000 fbea 	bl	745c <queue_init>
	clkn_start();
    6c88:	f000 fd72 	bl	7770 <clkn_start>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6c8c:	4b3a      	ldr	r3, [pc, #232]	; (6d78 <specan+0x100>)
    6c8e:	2280      	movs	r2, #128	; 0x80
    6c90:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    6c92:	2012      	movs	r0, #18
    6c94:	f642 3122 	movw	r1, #11042	; 0x2b22
    6c98:	f001 fc65 	bl	8566 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    6c9c:	2014      	movs	r0, #20
    6c9e:	f241 314b 	movw	r1, #4939	; 0x134b
    6ca2:	f001 fc60 	bl	8566 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    6ca6:	2020      	movs	r0, #32
    6ca8:	f240 1101 	movw	r1, #257	; 0x101
    6cac:	f001 fc5b 	bl	8566 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    6cb0:	2003      	movs	r0, #3
    6cb2:	2129      	movs	r1, #41	; 0x29
    6cb4:	f001 fc57 	bl	8566 <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    6cb8:	f001 fcf6 	bl	86a8 <cc2400_status>
    6cbc:	0641      	lsls	r1, r0, #25
    6cbe:	d5fb      	bpl.n	6cb8 <specan+0x40>
	while ((cc2400_status() & FS_LOCK));
    6cc0:	f001 fcf2 	bl	86a8 <cc2400_status>
    6cc4:	f000 0004 	and.w	r0, r0, #4
    6cc8:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    6ccc:	2800      	cmp	r0, #0
    6cce:	d1f7      	bne.n	6cc0 <specan+0x48>

	while (requested_mode == MODE_SPECAN) {
    6cd0:	4b2a      	ldr	r3, [pc, #168]	; (6d7c <specan+0x104>)
    6cd2:	7c9b      	ldrb	r3, [r3, #18]
    6cd4:	2b04      	cmp	r3, #4
    6cd6:	d147      	bne.n	6d68 <specan+0xf0>
		for (f = low_freq; f < high_freq + 1; f++) {
    6cd8:	4b29      	ldr	r3, [pc, #164]	; (6d80 <specan+0x108>)
    6cda:	4698      	mov	r8, r3
    6cdc:	f8b3 504c 	ldrh.w	r5, [r3, #76]	; 0x4c
    6ce0:	b2ad      	uxth	r5, r5
    6ce2:	f8b8 304e 	ldrh.w	r3, [r8, #78]	; 0x4e
    6ce6:	b29b      	uxth	r3, r3
    6ce8:	42ab      	cmp	r3, r5
    6cea:	dbf1      	blt.n	6cd0 <specan+0x58>
    6cec:	1e69      	subs	r1, r5, #1
			cc2400_set(FSDIV, f - 1);
    6cee:	2002      	movs	r0, #2
    6cf0:	b289      	uxth	r1, r1
    6cf2:	f001 fc38 	bl	8566 <cc2400_set>
			cc2400_strobe(SFSON);
    6cf6:	2061      	movs	r0, #97	; 0x61
    6cf8:	f001 fcdd 	bl	86b6 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    6cfc:	f001 fcd4 	bl	86a8 <cc2400_status>
    6d00:	0742      	lsls	r2, r0, #29
    6d02:	d5fb      	bpl.n	6cfc <specan+0x84>
			cc2400_strobe(SRX);
    6d04:	2062      	movs	r0, #98	; 0x62
    6d06:	f001 fcd6 	bl	86b6 <cc2400_strobe>

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
    6d0a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    6d0e:	9300      	str	r3, [sp, #0]
    6d10:	9e00      	ldr	r6, [sp, #0]
    6d12:	3e01      	subs	r6, #1
    6d14:	9600      	str	r6, [sp, #0]
    6d16:	2e00      	cmp	r6, #0
    6d18:	d1fa      	bne.n	6d10 <specan+0x98>
			buf[3 * i] = (f >> 8) & 0xFF;
    6d1a:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    6d1e:	ab0e      	add	r3, sp, #56	; 0x38
    6d20:	441f      	add	r7, r3
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6d22:	2006      	movs	r0, #6
			while (!(cc2400_status() & FS_LOCK));
			cc2400_strobe(SRX);

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
    6d24:	0a2b      	lsrs	r3, r5, #8
    6d26:	f807 3c34 	strb.w	r3, [r7, #-52]
			buf[(3 * i) + 1] = f  & 0xFF;
    6d2a:	f807 5c33 	strb.w	r5, [r7, #-51]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6d2e:	f001 fc11 	bl	8554 <cc2400_get>
			i++;
    6d32:	3401      	adds	r4, #1
    6d34:	b2e4      	uxtb	r4, r4

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6d36:	0a00      	lsrs	r0, r0, #8
			i++;
			if (i == 16) {
    6d38:	2c10      	cmp	r4, #16

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6d3a:	f807 0c32 	strb.w	r0, [r7, #-50]
			i++;
			if (i == 16) {
    6d3e:	d109      	bne.n	6d54 <specan+0xdc>
				enqueue(SPECAN, buf);
    6d40:	2004      	movs	r0, #4
    6d42:	eb0d 0100 	add.w	r1, sp, r0
    6d46:	f7fd fb97 	bl	4478 <enqueue>
				i = 0;

				handle_usb(clkn);
    6d4a:	4b0e      	ldr	r3, [pc, #56]	; (6d84 <specan+0x10c>)
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
			i++;
			if (i == 16) {
				enqueue(SPECAN, buf);
				i = 0;
    6d4c:	4634      	mov	r4, r6

				handle_usb(clkn);
    6d4e:	6818      	ldr	r0, [r3, #0]
    6d50:	f000 fbe6 	bl	7520 <handle_usb>
			}

			cc2400_strobe(SRFOFF);
    6d54:	2064      	movs	r0, #100	; 0x64
    6d56:	f001 fcae 	bl	86b6 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    6d5a:	f001 fca5 	bl	86a8 <cc2400_status>
    6d5e:	0743      	lsls	r3, r0, #29
    6d60:	d4fb      	bmi.n	6d5a <specan+0xe2>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    6d62:	3501      	adds	r5, #1
    6d64:	b2ad      	uxth	r5, r5
    6d66:	e7bc      	b.n	6ce2 <specan+0x6a>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	RXLED_CLR;
    6d68:	4b07      	ldr	r3, [pc, #28]	; (6d88 <specan+0x110>)
    6d6a:	2210      	movs	r2, #16
    6d6c:	601a      	str	r2, [r3, #0]
}
    6d6e:	b00e      	add	sp, #56	; 0x38
    6d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d74:	2009c038 	.word	0x2009c038
    6d78:	2009c058 	.word	0x2009c058
    6d7c:	10000a1c 	.word	0x10000a1c
    6d80:	10000448 	.word	0x10000448
    6d84:	10000bc4 	.word	0x10000bc4
    6d88:	2009c03c 	.word	0x2009c03c

00006d8c <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    6d8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int8_t lvl;
	u8 i = 0;
	u16 channels[3] = {2412, 2437, 2462};
    6d8e:	4b44      	ldr	r3, [pc, #272]	; (6ea0 <led_specan+0x114>)
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6d90:	2280      	movs	r2, #128	; 0x80
/* LED based spectrum analysis */
void led_specan()
{
	int8_t lvl;
	u8 i = 0;
	u16 channels[3] = {2412, 2437, 2462};
    6d92:	6818      	ldr	r0, [r3, #0]
    6d94:	889b      	ldrh	r3, [r3, #4]
    6d96:	9002      	str	r0, [sp, #8]
    6d98:	f8ad 300c 	strh.w	r3, [sp, #12]
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6d9c:	4b41      	ldr	r3, [pc, #260]	; (6ea4 <led_specan+0x118>)
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    6d9e:	2012      	movs	r0, #18
	u16 channels[3] = {2412, 2437, 2462};
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6da0:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    6da2:	f642 3122 	movw	r1, #11042	; 0x2b22
    6da6:	f001 fbde 	bl	8566 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    6daa:	2014      	movs	r0, #20
    6dac:	f241 314b 	movw	r1, #4939	; 0x134b
    6db0:	f001 fbd9 	bl	8566 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    6db4:	2020      	movs	r0, #32
    6db6:	f240 1101 	movw	r1, #257	; 0x101
    6dba:	f001 fbd4 	bl	8566 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    6dbe:	2003      	movs	r0, #3
    6dc0:	2129      	movs	r1, #41	; 0x29
    6dc2:	f001 fbd0 	bl	8566 <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    6dc6:	2006      	movs	r0, #6
    6dc8:	21f1      	movs	r1, #241	; 0xf1
    6dca:	f001 fbcc 	bl	8566 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6dce:	f001 fc6b 	bl	86a8 <cc2400_status>
    6dd2:	0641      	lsls	r1, r0, #25
    6dd4:	d5fb      	bpl.n	6dce <led_specan+0x42>
	while ((cc2400_status() & FS_LOCK));
    6dd6:	f001 fc67 	bl	86a8 <cc2400_status>
    6dda:	f000 0004 	and.w	r0, r0, #4
    6dde:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    6de2:	2800      	cmp	r0, #0
    6de4:	d1f7      	bne.n	6dd6 <led_specan+0x4a>

	while (requested_mode == MODE_LED_SPECAN) {
    6de6:	4b30      	ldr	r3, [pc, #192]	; (6ea8 <led_specan+0x11c>)
    6de8:	7c9b      	ldrb	r3, [r3, #18]
    6dea:	2b07      	cmp	r3, #7
    6dec:	d156      	bne.n	6e9c <led_specan+0x110>
		cc2400_set(FSDIV, channels[i] - 1);
    6dee:	ab04      	add	r3, sp, #16
    6df0:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    6df4:	f833 1c08 	ldrh.w	r1, [r3, #-8]
    6df8:	2002      	movs	r0, #2
    6dfa:	3901      	subs	r1, #1
    6dfc:	b289      	uxth	r1, r1
    6dfe:	f001 fbb2 	bl	8566 <cc2400_set>
		cc2400_strobe(SFSON);
    6e02:	2061      	movs	r0, #97	; 0x61
    6e04:	f001 fc57 	bl	86b6 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    6e08:	f001 fc4e 	bl	86a8 <cc2400_status>
    6e0c:	0742      	lsls	r2, r0, #29
    6e0e:	d5fb      	bpl.n	6e08 <led_specan+0x7c>
		cc2400_strobe(SRX);
    6e10:	2062      	movs	r0, #98	; 0x62
    6e12:	f001 fc50 	bl	86b6 <cc2400_strobe>

		/* give the CC2400 time to acquire RSSI reading */
		volatile u32 j = 500; while (--j); //FIXME crude delay
    6e16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    6e1a:	9301      	str	r3, [sp, #4]
    6e1c:	9b01      	ldr	r3, [sp, #4]
    6e1e:	3b01      	subs	r3, #1
    6e20:	9301      	str	r3, [sp, #4]
    6e22:	2b00      	cmp	r3, #0
    6e24:	d1fa      	bne.n	6e1c <led_specan+0x90>
		lvl = (int8_t)((cc2400_get(RSSI) >> 8) & 0xff);
    6e26:	2006      	movs	r0, #6
    6e28:	f001 fb94 	bl	8554 <cc2400_get>
		if (lvl > rssi_threshold) {
    6e2c:	4b1f      	ldr	r3, [pc, #124]	; (6eac <led_specan+0x120>)
    6e2e:	f340 2007 	sbfx	r0, r0, #8, #8
    6e32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    6e36:	b25b      	sxtb	r3, r3
    6e38:	4298      	cmp	r0, r3
    6e3a:	dd0c      	ble.n	6e56 <led_specan+0xca>
			switch (i) {
    6e3c:	2c01      	cmp	r4, #1
    6e3e:	d007      	beq.n	6e50 <led_specan+0xc4>
    6e40:	d303      	bcc.n	6e4a <led_specan+0xbe>
    6e42:	2c02      	cmp	r4, #2
    6e44:	d116      	bne.n	6e74 <led_specan+0xe8>
					break;
				case 1:
					RXLED_SET;
					break;
				case 2:
					USRLED_SET;
    6e46:	4b1a      	ldr	r3, [pc, #104]	; (6eb0 <led_specan+0x124>)
    6e48:	e013      	b.n	6e72 <led_specan+0xe6>
		volatile u32 j = 500; while (--j); //FIXME crude delay
		lvl = (int8_t)((cc2400_get(RSSI) >> 8) & 0xff);
		if (lvl > rssi_threshold) {
			switch (i) {
				case 0:
					TXLED_SET;
    6e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
    6e4e:	e000      	b.n	6e52 <led_specan+0xc6>
					break;
				case 1:
					RXLED_SET;
    6e50:	2210      	movs	r2, #16
    6e52:	4b17      	ldr	r3, [pc, #92]	; (6eb0 <led_specan+0x124>)
    6e54:	e00b      	b.n	6e6e <led_specan+0xe2>
					USRLED_SET;
					break;
			}
		}
		else {
			switch (i) {
    6e56:	2c01      	cmp	r4, #1
    6e58:	d007      	beq.n	6e6a <led_specan+0xde>
    6e5a:	d303      	bcc.n	6e64 <led_specan+0xd8>
    6e5c:	2c02      	cmp	r4, #2
    6e5e:	d109      	bne.n	6e74 <led_specan+0xe8>
					break;
				case 1:
					RXLED_CLR;
					break;
				case 2:
					USRLED_CLR;
    6e60:	4b14      	ldr	r3, [pc, #80]	; (6eb4 <led_specan+0x128>)
    6e62:	e006      	b.n	6e72 <led_specan+0xe6>
			}
		}
		else {
			switch (i) {
				case 0:
					TXLED_CLR;
    6e64:	f44f 7280 	mov.w	r2, #256	; 0x100
    6e68:	e000      	b.n	6e6c <led_specan+0xe0>
					break;
				case 1:
					RXLED_CLR;
    6e6a:	2210      	movs	r2, #16
    6e6c:	4b11      	ldr	r3, [pc, #68]	; (6eb4 <led_specan+0x128>)
    6e6e:	601a      	str	r2, [r3, #0]
					break;
    6e70:	e000      	b.n	6e74 <led_specan+0xe8>
				case 2:
					USRLED_CLR;
    6e72:	601c      	str	r4, [r3, #0]
					break;
			}
		}

		i = (i+1) % 3;
    6e74:	3401      	adds	r4, #1
    6e76:	2303      	movs	r3, #3
    6e78:	fb94 f3f3 	sdiv	r3, r4, r3
    6e7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6e80:	1ae4      	subs	r4, r4, r3

		handle_usb(clkn);
    6e82:	4b0d      	ldr	r3, [pc, #52]	; (6eb8 <led_specan+0x12c>)
					USRLED_CLR;
					break;
			}
		}

		i = (i+1) % 3;
    6e84:	b2e4      	uxtb	r4, r4

		handle_usb(clkn);
    6e86:	6818      	ldr	r0, [r3, #0]
    6e88:	f000 fb4a 	bl	7520 <handle_usb>

		cc2400_strobe(SRFOFF);
    6e8c:	2064      	movs	r0, #100	; 0x64
    6e8e:	f001 fc12 	bl	86b6 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    6e92:	f001 fc09 	bl	86a8 <cc2400_status>
    6e96:	0743      	lsls	r3, r0, #29
    6e98:	d4fb      	bmi.n	6e92 <led_specan+0x106>
    6e9a:	e7a4      	b.n	6de6 <led_specan+0x5a>
	}
}
    6e9c:	b004      	add	sp, #16
    6e9e:	bd10      	pop	{r4, pc}
    6ea0:	00009b06 	.word	0x00009b06
    6ea4:	2009c058 	.word	0x2009c058
    6ea8:	10000a1c 	.word	0x10000a1c
    6eac:	10000448 	.word	0x10000448
    6eb0:	2009c038 	.word	0x2009c038
    6eb4:	2009c03c 	.word	0x2009c03c
    6eb8:	10000bc4 	.word	0x10000bc4

00006ebc <main>:

int main()
{
    6ebc:	b508      	push	{r3, lr}
	ubertooth_init();
    6ebe:	f001 fcb5 	bl	882c <ubertooth_init>
	clkn_init();
    6ec2:	f000 fc5b 	bl	777c <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    6ec6:	4843      	ldr	r0, [pc, #268]	; (6fd4 <main+0x118>)
    6ec8:	f000 faa2 	bl	7410 <ubertooth_usb_init>
	cc2400_idle();
    6ecc:	f7fd fb2c 	bl	4528 <cc2400_idle>

	while (1) {
		handle_usb(clkn);
    6ed0:	4b41      	ldr	r3, [pc, #260]	; (6fd8 <main+0x11c>)
		if(requested_mode != mode) {
    6ed2:	4c42      	ldr	r4, [pc, #264]	; (6fdc <main+0x120>)
	clkn_init();
	ubertooth_usb_init(vendor_request_handler);
	cc2400_idle();

	while (1) {
		handle_usb(clkn);
    6ed4:	6818      	ldr	r0, [r3, #0]
    6ed6:	f000 fb23 	bl	7520 <handle_usb>
		if(requested_mode != mode) {
    6eda:	7ca2      	ldrb	r2, [r4, #18]
    6edc:	7c63      	ldrb	r3, [r4, #17]
    6ede:	429a      	cmp	r2, r3
    6ee0:	d0f6      	beq.n	6ed0 <main+0x14>
			switch (requested_mode) {
    6ee2:	7ca3      	ldrb	r3, [r4, #18]
    6ee4:	2b12      	cmp	r3, #18
    6ee6:	d8f3      	bhi.n	6ed0 <main+0x14>
    6ee8:	a201      	add	r2, pc, #4	; (adr r2, 6ef0 <main+0x34>)
    6eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6eee:	bf00      	nop
    6ef0:	00006ecd 	.word	0x00006ecd
    6ef4:	00006f4d 	.word	0x00006f4d
    6ef8:	00006f57 	.word	0x00006f57
    6efc:	00006f83 	.word	0x00006f83
    6f00:	00006fad 	.word	0x00006fad
    6f04:	00006f91 	.word	0x00006f91
    6f08:	00006fa1 	.word	0x00006fa1
    6f0c:	00006fb3 	.word	0x00006fb3
    6f10:	00006f61 	.word	0x00006f61
    6f14:	00006f65 	.word	0x00006f65
    6f18:	00006f71 	.word	0x00006f71
    6f1c:	00006f3d 	.word	0x00006f3d
    6f20:	00006f77 	.word	0x00006f77
    6f24:	00006fb9 	.word	0x00006fb9
    6f28:	00006f49 	.word	0x00006f49
    6f2c:	00006fc5 	.word	0x00006fc5
    6f30:	00006fcf 	.word	0x00006fcf
    6f34:	00006f7d 	.word	0x00006f7d
    6f38:	00006f6b 	.word	0x00006f6b
				case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    6f3c:	2001      	movs	r0, #1
    6f3e:	f001 fa39 	bl	83b4 <wait>
					reset();
    6f42:	f001 fc7d 	bl	8840 <reset>
					break;
    6f46:	e7c3      	b.n	6ed0 <main+0x14>
				case MODE_AFH:
					mode = MODE_AFH;
    6f48:	230e      	movs	r3, #14
    6f4a:	e000      	b.n	6f4e <main+0x92>
					bt_stream_rx();
					break;
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    6f4c:	2301      	movs	r3, #1
    6f4e:	7463      	strb	r3, [r4, #17]
					bt_stream_rx();
    6f50:	f7fe fbb2 	bl	56b8 <bt_stream_rx>
					break;
    6f54:	e7bc      	b.n	6ed0 <main+0x14>
				case MODE_TX_SYMBOLS:
					mode = MODE_TX_SYMBOLS;
    6f56:	2302      	movs	r3, #2
    6f58:	7463      	strb	r3, [r4, #17]
					br_transmit();
    6f5a:	f7fe fc5d 	bl	5818 <br_transmit>
					break;
    6f5e:	e7b7      	b.n	6ed0 <main+0x14>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    6f60:	2308      	movs	r3, #8
    6f62:	e7f4      	b.n	6f4e <main+0x92>
					bt_stream_rx();
					break;
				case MODE_BT_FOLLOW_LE:
					bt_follow_le();
    6f64:	f7ff fa7c 	bl	6460 <bt_follow_le>
					break;
    6f68:	e7b2      	b.n	6ed0 <main+0x14>
				case MODE_BOSS_MASTER_LE:
					bt_boss_master_le();
    6f6a:	f7ff fa89 	bl	6480 <bt_boss_master_le>
					break;
    6f6e:	e7af      	b.n	6ed0 <main+0x14>
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    6f70:	f7ff fcc2 	bl	68f8 <bt_promisc_le>
					break;
    6f74:	e7ac      	b.n	6ed0 <main+0x14>
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
    6f76:	f7ff fd4b 	bl	6a10 <bt_slave_le>
					break;
    6f7a:	e7a9      	b.n	6ed0 <main+0x14>
				case MODE_BOSS_SLAVE_LE:
					bt_boss_slave_le();
    6f7c:	f7ff fd1e 	bl	69bc <bt_boss_slave_le>
					break;
    6f80:	e7a6      	b.n	6ed0 <main+0x14>
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    6f82:	2303      	movs	r3, #3
					cc2400_txtest(&modulation, &channel);
    6f84:	4815      	ldr	r0, [pc, #84]	; (6fdc <main+0x120>)
    6f86:	4916      	ldr	r1, [pc, #88]	; (6fe0 <main+0x124>)
					break;
				case MODE_BOSS_SLAVE_LE:
					bt_boss_slave_le();
					break;
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    6f88:	7463      	strb	r3, [r4, #17]
					cc2400_txtest(&modulation, &channel);
    6f8a:	f000 ff15 	bl	7db8 <cc2400_txtest>
					break;
    6f8e:	e79f      	b.n	6ed0 <main+0x14>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    6f90:	2305      	movs	r3, #5
					cc2400_rangetest(&channel);
    6f92:	4813      	ldr	r0, [pc, #76]	; (6fe0 <main+0x124>)
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
					cc2400_txtest(&modulation, &channel);
					break;
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    6f94:	7463      	strb	r3, [r4, #17]
					cc2400_rangetest(&channel);
    6f96:	f000 fd05 	bl	79a4 <cc2400_rangetest>
					requested_mode = MODE_IDLE;
    6f9a:	2300      	movs	r3, #0
    6f9c:	74a3      	strb	r3, [r4, #18]
					break;
    6f9e:	e797      	b.n	6ed0 <main+0x14>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    6fa0:	2306      	movs	r3, #6
					cc2400_repeater(&channel);
    6fa2:	480f      	ldr	r0, [pc, #60]	; (6fe0 <main+0x124>)
					mode = MODE_RANGE_TEST;
					cc2400_rangetest(&channel);
					requested_mode = MODE_IDLE;
					break;
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    6fa4:	7463      	strb	r3, [r4, #17]
					cc2400_repeater(&channel);
    6fa6:	f000 fe4b 	bl	7c40 <cc2400_repeater>
					break;
    6faa:	e791      	b.n	6ed0 <main+0x14>
				case MODE_SPECAN:
					specan();
    6fac:	f7ff fe64 	bl	6c78 <specan>
					break;
    6fb0:	e78e      	b.n	6ed0 <main+0x14>
				case MODE_LED_SPECAN:
					led_specan();
    6fb2:	f7ff feeb 	bl	6d8c <led_specan>
					break;
    6fb6:	e78b      	b.n	6ed0 <main+0x14>
				case MODE_EGO:
					mode = MODE_EGO;
    6fb8:	230d      	movs	r3, #13
    6fba:	7463      	strb	r3, [r4, #17]
					ego_main(ego_mode);
    6fbc:	7d20      	ldrb	r0, [r4, #20]
    6fbe:	f001 f967 	bl	8290 <ego_main>
					break;
    6fc2:	e785      	b.n	6ed0 <main+0x14>
				case MODE_RX_GENERIC:
					mode = MODE_RX_GENERIC;
    6fc4:	230f      	movs	r3, #15
    6fc6:	7463      	strb	r3, [r4, #17]
					rx_generic();
    6fc8:	f7ff fdcc 	bl	6b64 <rx_generic>
					break;
    6fcc:	e780      	b.n	6ed0 <main+0x14>
				case MODE_TX_GENERIC:
					tx_generic();
    6fce:	f7ff fdd9 	bl	6b84 <tx_generic>
					break;
    6fd2:	e77d      	b.n	6ed0 <main+0x14>
    6fd4:	000049c5 	.word	0x000049c5
    6fd8:	10000bc4 	.word	0x10000bc4
    6fdc:	10000a1c 	.word	0x10000a1c
    6fe0:	10000448 	.word	0x10000448

00006fe4 <precalc>:
	return i;
}

/* do all of the one time precalculation */
void precalc(void)
{
    6fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
    6fe6:	4b44      	ldr	r3, [pc, #272]	; (70f8 <precalc+0x114>)
	syncword = 0;
    6fe8:	4a44      	ldr	r2, [pc, #272]	; (70fc <precalc+0x118>)
    6fea:	2000      	movs	r0, #0
    6fec:	2100      	movs	r1, #0
/* do all of the one time precalculation */
void precalc(void)
{
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
    6fee:	681b      	ldr	r3, [r3, #0]
	syncword = 0;
    6ff0:	e9c2 0100 	strd	r0, r1, [r2]
    6ff4:	2200      	movs	r2, #0
    6ff6:	0055      	lsls	r5, r2, #1

	/* populate frequency register bank*/
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
    6ff8:	214f      	movs	r1, #79	; 0x4f
    6ffa:	fb95 f4f1 	sdiv	r4, r5, r1
    6ffe:	fb01 5114 	mls	r1, r1, r4, r5
    7002:	483f      	ldr	r0, [pc, #252]	; (7100 <precalc+0x11c>)
    7004:	5411      	strb	r1, [r2, r0]
    7006:	3201      	adds	r2, #1
	u32 address;
	address = target.address & 0xffffffff;
	syncword = 0;

	/* populate frequency register bank*/
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
    7008:	2a4f      	cmp	r2, #79	; 0x4f
    700a:	d1f4      	bne.n	6ff6 <precalc+0x12>
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
    700c:	4a3d      	ldr	r2, [pc, #244]	; (7104 <precalc+0x120>)
    700e:	f3c3 51c4 	ubfx	r1, r3, #23, #5
    7012:	7011      	strb	r1, [r2, #0]
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    7014:	f3c3 1507 	ubfx	r5, r3, #4, #8
    7018:	f3c3 04c7 	ubfx	r4, r3, #3, #8
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
    701c:	4a3a      	ldr	r2, [pc, #232]	; (7108 <precalc+0x124>)
    701e:	f3c3 41c3 	ubfx	r1, r3, #19, #4
	c1 = ((address >> 4) & 0x10) +
    7022:	f005 0710 	and.w	r7, r5, #16
    7026:	f004 0608 	and.w	r6, r4, #8
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
    702a:	7011      	strb	r1, [r2, #0]
	c1 = ((address >> 4) & 0x10) +
    702c:	443e      	add	r6, r7
    702e:	f3c3 0187 	ubfx	r1, r3, #2, #8
    7032:	f003 0e01 	and.w	lr, r3, #1
    7036:	f3c3 0247 	ubfx	r2, r3, #1, #8
    703a:	4476      	add	r6, lr
    703c:	f001 0704 	and.w	r7, r1, #4
    7040:	4437      	add	r7, r6
    7042:	f002 0602 	and.w	r6, r2, #2
    7046:	443e      	add	r6, r7
    7048:	4f30      	ldr	r7, [pc, #192]	; (710c <precalc+0x128>)
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    704a:	f005 0508 	and.w	r5, r5, #8


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    704e:	703e      	strb	r6, [r7, #0]
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
    7050:	4e2f      	ldr	r6, [pc, #188]	; (7110 <precalc+0x12c>)
    7052:	f3c3 2788 	ubfx	r7, r3, #10, #9
    7056:	8037      	strh	r7, [r6, #0]
	e = ((address >> 7) & 0x40) +
		((address >> 6) & 0x20) +
    7058:	099e      	lsrs	r6, r3, #6
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    705a:	f006 0720 	and.w	r7, r6, #32
    705e:	09de      	lsrs	r6, r3, #7
    7060:	f006 0640 	and.w	r6, r6, #64	; 0x40
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
    7064:	095b      	lsrs	r3, r3, #5
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    7066:	443e      	add	r6, r7
    7068:	f003 0310 	and.w	r3, r3, #16
    706c:	4433      	add	r3, r6
    706e:	442b      	add	r3, r5
    7070:	f004 0404 	and.w	r4, r4, #4
    7074:	4423      	add	r3, r4
    7076:	f001 0102 	and.w	r1, r1, #2
    707a:	4419      	add	r1, r3
    707c:	f002 0201 	and.w	r2, r2, #1
    7080:	4b24      	ldr	r3, [pc, #144]	; (7114 <precalc+0x130>)
    7082:	440a      	add	r2, r1
    7084:	701a      	strb	r2, [r3, #0]
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
    7086:	4b24      	ldr	r3, [pc, #144]	; (7118 <precalc+0x134>)
    7088:	781b      	ldrb	r3, [r3, #0]
    708a:	b39b      	cbz	r3, 70f4 <precalc+0x110>
    708c:	2200      	movs	r2, #0
    708e:	4613      	mov	r3, r2
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
    7090:	4922      	ldr	r1, [pc, #136]	; (711c <precalc+0x138>)
    7092:	2500      	movs	r5, #0
    7094:	5c54      	ldrb	r4, [r2, r1]
    7096:	f04f 0e00 	mov.w	lr, #0

/* count the number of 1 bits in a uint64_t */
static uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    709a:	ea54 0705 	orrs.w	r7, r4, r5
    709e:	fa5f f68e 	uxtb.w	r6, lr
    70a2:	f10e 0e01 	add.w	lr, lr, #1
    70a6:	d006      	beq.n	70b6 <precalc+0xd2>
		n &= n - 1;
    70a8:	f114 36ff 	adds.w	r6, r4, #4294967295	; 0xffffffff
    70ac:	f145 37ff 	adc.w	r7, r5, #4294967295	; 0xffffffff
    70b0:	4034      	ands	r4, r6
    70b2:	403d      	ands	r5, r7
    70b4:	e7f1      	b.n	709a <precalc+0xb6>
    70b6:	3201      	adds	r2, #1
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
    70b8:	4433      	add	r3, r6
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    70ba:	2a0a      	cmp	r2, #10
			used_channels += count_bits((uint64_t) afh_map[i]);
    70bc:	b2db      	uxtb	r3, r3
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    70be:	d1e7      	bne.n	7090 <precalc+0xac>
    70c0:	4a17      	ldr	r2, [pc, #92]	; (7120 <precalc+0x13c>)
    70c2:	7013      	strb	r3, [r2, #0]
    70c4:	2300      	movs	r3, #0
    70c6:	461c      	mov	r4, r3
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
			chan = (i * 2) % NUM_BREDR_CHANNELS;
    70c8:	254f      	movs	r5, #79	; 0x4f
    70ca:	fb93 f2f5 	sdiv	r2, r3, r5
    70ce:	fb05 3212 	mls	r2, r5, r2, r3
    70d2:	b2d6      	uxtb	r6, r2
			if(afh_map[chan/8] & (0x1 << (chan % 8)))
    70d4:	08f5      	lsrs	r5, r6, #3
    70d6:	5d4d      	ldrb	r5, [r1, r5]
    70d8:	f002 0207 	and.w	r2, r2, #7
    70dc:	fa45 f202 	asr.w	r2, r5, r2
    70e0:	07d2      	lsls	r2, r2, #31
				bank[j++] = chan;
    70e2:	bf48      	it	mi
    70e4:	1c62      	addmi	r2, r4, #1
    70e6:	f103 0302 	add.w	r3, r3, #2
    70ea:	bf44      	itt	mi
    70ec:	5506      	strbmi	r6, [r0, r4]
    70ee:	b2d4      	uxtbmi	r4, r2
	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
    70f0:	2b9e      	cmp	r3, #158	; 0x9e
    70f2:	d1e9      	bne.n	70c8 <precalc+0xe4>
    70f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70f6:	bf00      	nop
    70f8:	100010c0 	.word	0x100010c0
    70fc:	10000d18 	.word	0x10000d18
    7100:	10001125 	.word	0x10001125
    7104:	10001123 	.word	0x10001123
    7108:	100010d0 	.word	0x100010d0
    710c:	10001124 	.word	0x10001124
    7110:	100010d2 	.word	0x100010d2
    7114:	10001174 	.word	0x10001174
    7118:	10001047 	.word	0x10001047
    711c:	10000bab 	.word	0x10000bab
    7120:	10000ba9 	.word	0x10000ba9

00007124 <next_hop>:

	return output;
}

u16 next_hop(u32 clock)
{
    7124:	b5f0      	push	{r4, r5, r6, r7, lr}
    7126:	b087      	sub	sp, #28
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    7128:	f3c0 04d8 	ubfx	r4, r0, #3, #25
	f = base_f % 79;
    712c:	234f      	movs	r3, #79	; 0x4f
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    712e:	f024 040f 	bic.w	r4, r4, #15
	f = base_f % 79;
    7132:	fbb4 f2f3 	udiv	r2, r4, r3
    7136:	fb03 4212 	mls	r2, r3, r2, r4
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    713a:	4b40      	ldr	r3, [pc, #256]	; (723c <next_hop+0x118>)
	u32 base_f, f, f_dash;

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
    713c:	f3c0 0640 	ubfx	r6, r0, #1, #1
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    7140:	781b      	ldrb	r3, [r3, #0]

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
    7142:	0171      	lsls	r1, r6, #5
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    7144:	ea83 4310 	eor.w	r3, r3, r0, lsr #16
    7148:	f003 031f 	and.w	r3, r3, #31

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
    714c:	b28d      	uxth	r5, r1
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    714e:	1b89      	subs	r1, r1, r6
    7150:	4059      	eors	r1, r3
	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
    7152:	4b3b      	ldr	r3, [pc, #236]	; (7240 <next_hop+0x11c>)
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    7154:	4e3b      	ldr	r6, [pc, #236]	; (7244 <next_hop+0x120>)
	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
    7156:	781b      	ldrb	r3, [r3, #0]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    7158:	7836      	ldrb	r6, [r6, #0]
	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
    715a:	ea83 5350 	eor.w	r3, r3, r0, lsr #21
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    715e:	eb03 0390 	add.w	r3, r3, r0, lsr #2
    7162:	4073      	eors	r3, r6
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    7164:	4e38      	ldr	r6, [pc, #224]	; (7248 <next_hop+0x124>)
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    7166:	b2c9      	uxtb	r1, r1
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    7168:	8836      	ldrh	r6, [r6, #0]

/* 5 bit permutation */
static u8 perm5(u8 z, u8 p_high, u16 p_low)
{
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
    716a:	f003 031f 	and.w	r3, r3, #31
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    716e:	ea86 10d0 	eor.w	r0, r6, r0, lsr #7
static u8 perm5(u8 z, u8 p_high, u16 p_low)
{
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
	p_high &= 0x1f;
	p_low &= 0x1ff;
    7172:	f3c0 0008 	ubfx	r0, r0, #0, #9
	u8 tmp, output, z_bit[5], p[14];
	static const u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    7176:	2600      	movs	r6, #0
		p[i] = (p_low >> i) & 0x01;
    7178:	fa40 fe06 	asr.w	lr, r0, r6
    717c:	af02      	add	r7, sp, #8
    717e:	f00e 0e01 	and.w	lr, lr, #1
    7182:	f806 e007 	strb.w	lr, [r6, r7]
	u8 tmp, output, z_bit[5], p[14];
	static const u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    7186:	3601      	adds	r6, #1
    7188:	2e09      	cmp	r6, #9
    718a:	d1f5      	bne.n	7178 <next_hop+0x54>
    718c:	2000      	movs	r0, #0
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;
    718e:	b24e      	sxtb	r6, r1
    7190:	eb07 0e00 	add.w	lr, r7, r0
    7194:	4106      	asrs	r6, r0
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    7196:	3001      	adds	r0, #1
		p[i+9] = (p_high >> i) & 0x01;
    7198:	f006 0601 	and.w	r6, r6, #1
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    719c:	2805      	cmp	r0, #5
		p[i+9] = (p_high >> i) & 0x01;
    719e:	f88e 6009 	strb.w	r6, [lr, #9]
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    71a2:	d1f4      	bne.n	718e <next_hop+0x6a>
    71a4:	2100      	movs	r1, #0
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;
    71a6:	fa43 f001 	asr.w	r0, r3, r1
    71aa:	f000 0001 	and.w	r0, r0, #1
    71ae:	f80d 0001 	strb.w	r0, [sp, r1]
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    71b2:	3101      	adds	r1, #1
    71b4:	2905      	cmp	r1, #5
    71b6:	d1f6      	bne.n	71a6 <next_hop+0x82>
    71b8:	210d      	movs	r1, #13
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
    71ba:	5c7b      	ldrb	r3, [r7, r1]
    71bc:	b183      	cbz	r3, 71e0 <next_hop+0xbc>
			tmp = z_bit[index1[i]];
    71be:	4b23      	ldr	r3, [pc, #140]	; (724c <next_hop+0x128>)
    71c0:	ae06      	add	r6, sp, #24
    71c2:	5cc8      	ldrb	r0, [r1, r3]
			z_bit[index1[i]] = z_bit[index2[i]];
    71c4:	330e      	adds	r3, #14
    71c6:	5ccb      	ldrb	r3, [r1, r3]
    71c8:	f10d 0e18 	add.w	lr, sp, #24

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
			tmp = z_bit[index1[i]];
    71cc:	4430      	add	r0, r6
			z_bit[index1[i]] = z_bit[index2[i]];
    71ce:	4473      	add	r3, lr

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
			tmp = z_bit[index1[i]];
    71d0:	f810 6c18 	ldrb.w	r6, [r0, #-24]
			z_bit[index1[i]] = z_bit[index2[i]];
    71d4:	f813 ec18 	ldrb.w	lr, [r3, #-24]
    71d8:	f800 ec18 	strb.w	lr, [r0, #-24]
			z_bit[index2[i]] = tmp;
    71dc:	f803 6c18 	strb.w	r6, [r3, #-24]
	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    71e0:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
    71e4:	d2e9      	bcs.n	71ba <next_hop+0x96>
    71e6:	2300      	movs	r3, #0
    71e8:	4619      	mov	r1, r3
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
		output += z_bit[i] << i;
    71ea:	f81d 0001 	ldrb.w	r0, [sp, r1]
    71ee:	4088      	lsls	r0, r1
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    71f0:	3101      	adds	r1, #1
		output += z_bit[i] << i;
    71f2:	4403      	add	r3, r0
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    71f4:	2905      	cmp	r1, #5
		output += z_bit[i] << i;
    71f6:	b2db      	uxtb	r3, r3
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    71f8:	d1f7      	bne.n	71ea <next_hop+0xc6>
	perm = perm5(
		((x + a) % 32) ^ b,
		(y1 * 0x1f) ^ c,
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % NUM_BREDR_CHANNELS];
    71fa:	4915      	ldr	r1, [pc, #84]	; (7250 <next_hop+0x12c>)
    71fc:	204f      	movs	r0, #79	; 0x4f
    71fe:	7809      	ldrb	r1, [r1, #0]
    7200:	4419      	add	r1, r3
    7202:	18ab      	adds	r3, r5, r2
    7204:	440b      	add	r3, r1
    7206:	fbb3 f2f0 	udiv	r2, r3, r0
    720a:	fb00 3312 	mls	r3, r0, r2, r3
    720e:	4a11      	ldr	r2, [pc, #68]	; (7254 <next_hop+0x130>)
    7210:	5cd0      	ldrb	r0, [r2, r3]
	if(afh_enabled) {
    7212:	4b11      	ldr	r3, [pc, #68]	; (7258 <next_hop+0x134>)
    7214:	781b      	ldrb	r3, [r3, #0]
    7216:	b16b      	cbz	r3, 7234 <next_hop+0x110>
		f_dash = base_f % used_channels;
    7218:	4b10      	ldr	r3, [pc, #64]	; (725c <next_hop+0x138>)
    721a:	781b      	ldrb	r3, [r3, #0]
    721c:	fbb4 f2f3 	udiv	r2, r4, r3
    7220:	fb03 4412 	mls	r4, r3, r2, r4
    7224:	4425      	add	r5, r4
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    7226:	440d      	add	r5, r1
    7228:	fbb5 f4f3 	udiv	r4, r5, r3
    722c:	fb03 5514 	mls	r5, r3, r4, r5
    7230:	4b0b      	ldr	r3, [pc, #44]	; (7260 <next_hop+0x13c>)
    7232:	5d58      	ldrb	r0, [r3, r5]
	}
	return (2402 + next_channel);

}
    7234:	f600 1062 	addw	r0, r0, #2402	; 0x962
    7238:	b007      	add	sp, #28
    723a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    723c:	10001124 	.word	0x10001124
    7240:	10001123 	.word	0x10001123
    7244:	100010d0 	.word	0x100010d0
    7248:	100010d2 	.word	0x100010d2
    724c:	00009b19 	.word	0x00009b19
    7250:	10001174 	.word	0x10001174
    7254:	10001125 	.word	0x10001125
    7258:	10001047 	.word	0x10001047
    725c:	10000ba9 	.word	0x10000ba9
    7260:	100010d4 	.word	0x100010d4

00007264 <btle_channel_index>:
}

u8 btle_channel_index(u8 channel) {
	u8 idx;
	channel /= 2;
	if (channel == 0)
    7264:	0840      	lsrs	r0, r0, #1
    7266:	d00a      	beq.n	727e <btle_channel_index+0x1a>
		idx = 37;
	else if (channel < 12)
    7268:	280b      	cmp	r0, #11
    726a:	d801      	bhi.n	7270 <btle_channel_index+0xc>
		idx = channel - 1;
    726c:	3801      	subs	r0, #1
    726e:	e004      	b.n	727a <btle_channel_index+0x16>
	else if (channel == 12)
    7270:	280c      	cmp	r0, #12
    7272:	d006      	beq.n	7282 <btle_channel_index+0x1e>
		idx = 38;
	else if (channel < 39)
    7274:	2826      	cmp	r0, #38	; 0x26
    7276:	d806      	bhi.n	7286 <btle_channel_index+0x22>
		idx = channel - 2;
    7278:	3802      	subs	r0, #2
    727a:	b2c0      	uxtb	r0, r0
    727c:	4770      	bx	lr

u8 btle_channel_index(u8 channel) {
	u8 idx;
	channel /= 2;
	if (channel == 0)
		idx = 37;
    727e:	2025      	movs	r0, #37	; 0x25
    7280:	4770      	bx	lr
	else if (channel < 12)
		idx = channel - 1;
	else if (channel == 12)
		idx = 38;
    7282:	2026      	movs	r0, #38	; 0x26
    7284:	4770      	bx	lr
	else if (channel < 39)
		idx = channel - 2;
	else
		idx = 39;
    7286:	2027      	movs	r0, #39	; 0x27
	return idx;
}
    7288:	4770      	bx	lr

0000728a <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
	u16 phys;
	if (idx < 11)
    728a:	280a      	cmp	r0, #10
    728c:	d803      	bhi.n	7296 <btle_channel_index_to_phys+0xc>
		phys = 2404 + 2 * idx;
    728e:	0040      	lsls	r0, r0, #1
    7290:	f600 1064 	addw	r0, r0, #2404	; 0x964
    7294:	4770      	bx	lr
	else if (idx < 37)
    7296:	2824      	cmp	r0, #36	; 0x24
    7298:	d803      	bhi.n	72a2 <btle_channel_index_to_phys+0x18>
		phys = 2428 + 2 * (idx - 11);
    729a:	0040      	lsls	r0, r0, #1
    729c:	f600 1066 	addw	r0, r0, #2406	; 0x966
    72a0:	4770      	bx	lr
	else if (idx == 37)
    72a2:	2825      	cmp	r0, #37	; 0x25
    72a4:	d006      	beq.n	72b4 <btle_channel_index_to_phys+0x2a>
		phys = 2402;
	else if (idx == 38)
    72a6:	2826      	cmp	r0, #38	; 0x26
		phys = 2426;
	else
		phys = 2480;
    72a8:	f640 107a 	movw	r0, #2426	; 0x97a
    72ac:	bf18      	it	ne
    72ae:	f44f 601b 	movne.w	r0, #2480	; 0x9b0
    72b2:	4770      	bx	lr
	if (idx < 11)
		phys = 2404 + 2 * idx;
	else if (idx < 37)
		phys = 2428 + 2 * (idx - 11);
	else if (idx == 37)
		phys = 2402;
    72b4:	f640 1062 	movw	r0, #2402	; 0x962
	else if (idx == 38)
		phys = 2426;
	else
		phys = 2480;
	return phys;
}
    72b8:	4770      	bx	lr

000072ba <btle_next_hop>:

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    72ba:	b538      	push	{r3, r4, r5, lr}
    72bc:	4604      	mov	r4, r0
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    72be:	7d45      	ldrb	r5, [r0, #21]
    72c0:	4628      	mov	r0, r5
    72c2:	f7ff ffe2 	bl	728a <btle_channel_index_to_phys>
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    72c6:	7da3      	ldrb	r3, [r4, #22]
    72c8:	2125      	movs	r1, #37	; 0x25
    72ca:	442b      	add	r3, r5
    72cc:	fb93 f2f1 	sdiv	r2, r3, r1
    72d0:	fb01 3312 	mls	r3, r1, r2, r3
    72d4:	7563      	strb	r3, [r4, #21]
	return phys;
}
    72d6:	bd38      	pop	{r3, r4, r5, pc}

000072d8 <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    72d8:	b570      	push	{r4, r5, r6, lr}
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    72da:	460b      	mov	r3, r1
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
    72dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    72e0:	1a5c      	subs	r4, r3, r1
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    72e2:	4294      	cmp	r4, r2
    72e4:	da14      	bge.n	7310 <btle_calc_crc+0x38>
		u8 cur = data[i];
    72e6:	f813 5b01 	ldrb.w	r5, [r3], #1
    72ea:	2408      	movs	r4, #8
		for (j = 0; j < 8; ++j) {
			int next_bit = (state ^ cur) & 1;
    72ec:	ea85 0600 	eor.w	r6, r5, r0
			cur >>= 1;
			state >>= 1;
			if (next_bit) {
    72f0:	f016 0f01 	tst.w	r6, #1
    72f4:	ea4f 0050 	mov.w	r0, r0, lsr #1
				state |= 1 << 23;
    72f8:	bf1e      	ittt	ne
    72fa:	f440 0000 	orrne.w	r0, r0, #8388608	; 0x800000
				state ^= lfsr_mask;
    72fe:	f480 00b4 	eorne.w	r0, r0, #5898240	; 0x5a0000
    7302:	f480 40c0 	eorne.w	r0, r0, #24576	; 0x6000
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    7306:	3c01      	subs	r4, #1
			int next_bit = (state ^ cur) & 1;
			cur >>= 1;
			state >>= 1;
			if (next_bit) {
    7308:	ea4f 0555 	mov.w	r5, r5, lsr #1
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    730c:	d1ee      	bne.n	72ec <btle_calc_crc+0x14>
    730e:	e7e7      	b.n	72e0 <btle_calc_crc+0x8>
			}
		}
	}

	return state;
}
    7310:	bd70      	pop	{r4, r5, r6, pc}

00007312 <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    7312:	b570      	push	{r4, r5, r6, lr}
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    7314:	3a01      	subs	r2, #1
    7316:	2a00      	cmp	r2, #0
    7318:	db14      	blt.n	7344 <btle_reverse_crc+0x32>
		u8 cur = data[i];
    731a:	5c8e      	ldrb	r6, [r1, r2]
    731c:	2407      	movs	r4, #7
		for (j = 0; j < 8; ++j) {
			int top_bit = state >> 23;
    731e:	0dc5      	lsrs	r5, r0, #23
			state = (state << 1) & 0xffffff;
    7320:	0040      	lsls	r0, r0, #1
    7322:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    7326:	fa46 f004 	asr.w	r0, r6, r4
    732a:	f000 0001 	and.w	r0, r0, #1
    732e:	4068      	eors	r0, r5
    7330:	4318      	orrs	r0, r3
			if (top_bit)
    7332:	b11d      	cbz	r5, 733c <btle_reverse_crc+0x2a>
				state ^= lfsr_mask;
    7334:	f480 0034 	eor.w	r0, r0, #11796480	; 0xb40000
    7338:	f480 4040 	eor.w	r0, r0, #49152	; 0xc000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    733c:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    7340:	d2ed      	bcs.n	731e <btle_reverse_crc+0xc>
    7342:	e7e7      	b.n	7314 <btle_reverse_crc+0x2>
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    7344:	2300      	movs	r3, #0
    7346:	4619      	mov	r1, r3
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
		ret |= ((state >> i) & 1) << (23 - i);
    7348:	fa20 f203 	lsr.w	r2, r0, r3
    734c:	f1c3 0417 	rsb	r4, r3, #23
    7350:	f002 0201 	and.w	r2, r2, #1
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    7354:	3301      	adds	r3, #1
		ret |= ((state >> i) & 1) << (23 - i);
    7356:	40a2      	lsls	r2, r4
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    7358:	2b18      	cmp	r3, #24
		ret |= ((state >> i) & 1) << (23 - i);
    735a:	ea41 0102 	orr.w	r1, r1, r2
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    735e:	d1f3      	bne.n	7348 <btle_reverse_crc+0x36>
		ret |= ((state >> i) & 1) << (23 - i);

	return ret;
}
    7360:	4608      	mov	r0, r1
    7362:	bd70      	pop	{r4, r5, r6, pc}

00007364 <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    7364:	b530      	push	{r4, r5, lr}
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    7366:	460c      	mov	r4, r1
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
    7368:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    736c:	1a63      	subs	r3, r4, r1
	for (i = 0; i < len; ++i) {
    736e:	4293      	cmp	r3, r2
    7370:	da09      	bge.n	7386 <btle_crcgen_lut+0x22>
		key = data[i] ^ (state & 0xff);
    7372:	f814 3b01 	ldrb.w	r3, [r4], #1
		state = (state >> 8) ^ btle_crc_lut[key];
    7376:	4d04      	ldr	r5, [pc, #16]	; (7388 <btle_crcgen_lut+0x24>)
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
		key = data[i] ^ (state & 0xff);
    7378:	4043      	eors	r3, r0
		state = (state >> 8) ^ btle_crc_lut[key];
    737a:	b2db      	uxtb	r3, r3
    737c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    7380:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
    7384:	e7f2      	b.n	736c <btle_crcgen_lut+0x8>
	}
	return state;
}
    7386:	bd30      	pop	{r4, r5, pc}
    7388:	1000049c 	.word	0x1000049c

0000738c <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    738c:	b513      	push	{r0, r1, r4, lr}
    738e:	460b      	mov	r3, r1
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    7390:	8841      	ldrh	r1, [r0, #2]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    7392:	6812      	ldr	r2, [r2, #0]
VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    7394:	f8ad 1004 	strh.w	r1, [sp, #4]
    7398:	8881      	ldrh	r1, [r0, #4]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    739a:	7840      	ldrb	r0, [r0, #1]
VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    739c:	f8ad 1006 	strh.w	r1, [sp, #6]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    73a0:	4904      	ldr	r1, [pc, #16]	; (73b4 <usb_vendor_request_handler+0x28>)
    73a2:	680c      	ldr	r4, [r1, #0]
    73a4:	a901      	add	r1, sp, #4
    73a6:	47a0      	blx	r4
	return (BOOL) (rv==1);
}
    73a8:	1e43      	subs	r3, r0, #1
    73aa:	4258      	negs	r0, r3
    73ac:	4158      	adcs	r0, r3
    73ae:	b002      	add	sp, #8
    73b0:	bd10      	pop	{r4, pc}
    73b2:	bf00      	nop
    73b4:	1000327c 	.word	0x1000327c

000073b8 <set_serial_descriptor>:


void set_serial_descriptor(u8 *descriptors) {
    73b8:	b510      	push	{r4, lr}
    73ba:	b086      	sub	sp, #24
    73bc:	4604      	mov	r4, r0
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
    73be:	4669      	mov	r1, sp
    73c0:	a801      	add	r0, sp, #4
    73c2:	f001 fa75 	bl	88b0 <get_device_serial>
	if(buf[0] == 0) { /* IAP success */
    73c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    73ca:	b9f3      	cbnz	r3, 740a <set_serial_descriptor+0x52>
    73cc:	4620      	mov	r0, r4
    73ce:	f10d 0105 	add.w	r1, sp, #5
    73d2:	3440      	adds	r4, #64	; 0x40
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
    73d4:	f811 3b01 	ldrb.w	r3, [r1], #1
    73d8:	3004      	adds	r0, #4
    73da:	091a      	lsrs	r2, r3, #4
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    73dc:	2a09      	cmp	r2, #9
			desc[1+ i * 4] = 0;
			nibble = buf[i+1]&0xF;
    73de:	f003 030f 	and.w	r3, r3, #15
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    73e2:	bf8c      	ite	hi
    73e4:	3257      	addhi	r2, #87	; 0x57
    73e6:	3230      	addls	r2, #48	; 0x30
			desc[1+ i * 4] = 0;
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    73e8:	2b09      	cmp	r3, #9
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    73ea:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
			desc[1+ i * 4] = 0;
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    73ee:	bf88      	it	hi
    73f0:	3357      	addhi	r3, #87	; 0x57
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[1+ i * 4] = 0;
    73f2:	f04f 0200 	mov.w	r2, #0
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    73f6:	bf98      	it	ls
    73f8:	3330      	addls	r3, #48	; 0x30
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[1+ i * 4] = 0;
    73fa:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    73fe:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
			desc[3 + i * 4] = 0;
    7402:	f880 207b 	strb.w	r2, [r0, #123]	; 0x7b
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
    7406:	42a0      	cmp	r0, r4
    7408:	d1e4      	bne.n	73d4 <set_serial_descriptor+0x1c>
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[3 + i * 4] = 0;
		}
	}
}
    740a:	b006      	add	sp, #24
    740c:	bd10      	pop	{r4, pc}
    740e:	0000      	movs	r0, r0

00007410 <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    7410:	b538      	push	{r3, r4, r5, lr}
    7412:	4605      	mov	r5, r0
	// initialise stack
	USBInit();

	set_serial_descriptor(abDescriptors);
    7414:	4c0c      	ldr	r4, [pc, #48]	; (7448 <ubertooth_usb_init+0x38>)
}

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
	// initialise stack
	USBInit();
    7416:	f001 fb27 	bl	8a68 <USBInit>

	set_serial_descriptor(abDescriptors);
    741a:	4620      	mov	r0, r4
    741c:	f7ff ffcc 	bl	73b8 <set_serial_descriptor>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    7420:	4620      	mov	r0, r4
    7422:	f001 fd61 	bl	8ee8 <USBRegisterDescriptors>

	// Request handler
	v_req_handler = vendor_req_handler;
    7426:	4b09      	ldr	r3, [pc, #36]	; (744c <ubertooth_usb_init+0x3c>)

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    7428:	4a09      	ldr	r2, [pc, #36]	; (7450 <ubertooth_usb_init+0x40>)
    742a:	2002      	movs	r0, #2
    742c:	4909      	ldr	r1, [pc, #36]	; (7454 <ubertooth_usb_init+0x44>)
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);

	// Request handler
	v_req_handler = vendor_req_handler;
    742e:	601d      	str	r5, [r3, #0]

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    7430:	f001 fb10 	bl	8a54 <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    7434:	4908      	ldr	r1, [pc, #32]	; (7458 <ubertooth_usb_init+0x48>)
    7436:	20ff      	movs	r0, #255	; 0xff
    7438:	f001 fd40 	bl	8ebc <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    743c:	2001      	movs	r0, #1
    743e:	f001 fbaa 	bl	8b96 <USBHwConnect>

	return 0;
}
    7442:	2000      	movs	r0, #0
    7444:	bd38      	pop	{r3, r4, r5, pc}
    7446:	bf00      	nop
    7448:	1000089c 	.word	0x1000089c
    744c:	1000327c 	.word	0x1000327c
    7450:	10003178 	.word	0x10003178
    7454:	0000738d 	.word	0x0000738d
    7458:	00009b35 	.word	0x00009b35

0000745c <queue_init>:
volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init(void)
{
	head = 0;
    745c:	4b04      	ldr	r3, [pc, #16]	; (7470 <queue_init+0x14>)
    745e:	2100      	movs	r1, #0
	tail = 0;
	memset(fifo, 0, sizeof(fifo));
    7460:	4804      	ldr	r0, [pc, #16]	; (7474 <queue_init+0x18>)
    7462:	f44f 5200 	mov.w	r2, #8192	; 0x2000
volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init(void)
{
	head = 0;
    7466:	6019      	str	r1, [r3, #0]
	tail = 0;
    7468:	6059      	str	r1, [r3, #4]
	memset(fifo, 0, sizeof(fifo));
    746a:	f7fc be85 	b.w	4178 <memset>
    746e:	bf00      	nop
    7470:	10000a58 	.word	0x10000a58
    7474:	10001178 	.word	0x10001178

00007478 <usb_enqueue>:
}

usb_pkt_rx *usb_enqueue(void)
{
	u8 h = head & 0x7F;
    7478:	4b0a      	ldr	r3, [pc, #40]	; (74a4 <usb_enqueue+0x2c>)
    747a:	6819      	ldr	r1, [r3, #0]
	u8 t = tail & 0x7F;
    747c:	6858      	ldr	r0, [r3, #4]
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
    747e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
}

usb_pkt_rx *usb_enqueue(void)
{
	u8 h = head & 0x7F;
	u8 t = tail & 0x7F;
    7482:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	u8 n = (t + 1) & 0x7F;
    7486:	1c42      	adds	r2, r0, #1

	/* fail if queue is full */
	if (h == n) {
    7488:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    748c:	4291      	cmp	r1, r2
		return NULL;
	}

	++tail;
    748e:	bf1f      	itttt	ne
    7490:	685a      	ldrne	r2, [r3, #4]
    7492:	3201      	addne	r2, #1
    7494:	605a      	strne	r2, [r3, #4]
	return &fifo[t];
    7496:	4b04      	ldrne	r3, [pc, #16]	; (74a8 <usb_enqueue+0x30>)
    7498:	bf14      	ite	ne
    749a:	eb03 1080 	addne.w	r0, r3, r0, lsl #6
	u8 t = tail & 0x7F;
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
		return NULL;
    749e:	2000      	moveq	r0, #0
	}

	++tail;
	return &fifo[t];

}
    74a0:	4770      	bx	lr
    74a2:	bf00      	nop
    74a4:	10000a58 	.word	0x10000a58
    74a8:	10001178 	.word	0x10001178

000074ac <dequeue>:

usb_pkt_rx *dequeue(void)
{
	u8 h = head & 0x7F;
    74ac:	4b08      	ldr	r3, [pc, #32]	; (74d0 <dequeue+0x24>)
    74ae:	6818      	ldr	r0, [r3, #0]
	u8 t = tail & 0x7F;
    74b0:	685a      	ldr	r2, [r3, #4]

}

usb_pkt_rx *dequeue(void)
{
	u8 h = head & 0x7F;
    74b2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	u8 t = tail & 0x7F;

	/* fail if queue is empty */
	if (h == t) {
    74b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    74ba:	4290      	cmp	r0, r2
		return NULL;
	}

	++head;
    74bc:	bf1f      	itttt	ne
    74be:	681a      	ldrne	r2, [r3, #0]
    74c0:	3201      	addne	r2, #1
    74c2:	601a      	strne	r2, [r3, #0]
	return &fifo[h];
    74c4:	4b03      	ldrne	r3, [pc, #12]	; (74d4 <dequeue+0x28>)
    74c6:	bf14      	ite	ne
    74c8:	eb03 1080 	addne.w	r0, r3, r0, lsl #6
	u8 h = head & 0x7F;
	u8 t = tail & 0x7F;

	/* fail if queue is empty */
	if (h == t) {
		return NULL;
    74cc:	2000      	moveq	r0, #0
	}

	++head;
	return &fifo[h];
}
    74ce:	4770      	bx	lr
    74d0:	10000a58 	.word	0x10000a58
    74d4:	10001178 	.word	0x10001178

000074d8 <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    74d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    74da:	4605      	mov	r5, r0
	usb_pkt_rx *pkt = dequeue();
    74dc:	f7ff ffe6 	bl	74ac <dequeue>
    74e0:	4b0d      	ldr	r3, [pc, #52]	; (7518 <dequeue_send+0x40>)
	if (pkt != NULL) {
    74e2:	4604      	mov	r4, r0
    74e4:	b138      	cbz	r0, 74f6 <dequeue_send+0x1e>
		last_usb_pkt = clkn;
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    74e6:	2082      	movs	r0, #130	; 0x82
    74e8:	4621      	mov	r1, r4
    74ea:	2240      	movs	r2, #64	; 0x40

int dequeue_send(u32 clkn)
{
	usb_pkt_rx *pkt = dequeue();
	if (pkt != NULL) {
		last_usb_pkt = clkn;
    74ec:	609d      	str	r5, [r3, #8]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    74ee:	f001 fb83 	bl	8bf8 <USBHwEPWrite>
		return 1;
    74f2:	2001      	movs	r0, #1
    74f4:	e00e      	b.n	7514 <dequeue_send+0x3c>
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    74f6:	689a      	ldr	r2, [r3, #8]
    74f8:	4908      	ldr	r1, [pc, #32]	; (751c <dequeue_send+0x44>)
    74fa:	1aaa      	subs	r2, r5, r2
    74fc:	428a      	cmp	r2, r1
    74fe:	d908      	bls.n	7512 <dequeue_send+0x3a>
			u8 pkt_type = KEEP_ALIVE;
    7500:	2203      	movs	r2, #3
    7502:	a902      	add	r1, sp, #8
    7504:	f801 2d01 	strb.w	r2, [r1, #-1]!
			last_usb_pkt = clkn;
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    7508:	2082      	movs	r0, #130	; 0x82
    750a:	2201      	movs	r2, #1
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
		return 1;
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
			u8 pkt_type = KEEP_ALIVE;
			last_usb_pkt = clkn;
    750c:	609d      	str	r5, [r3, #8]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    750e:	f001 fb73 	bl	8bf8 <USBHwEPWrite>
		}
		return 0;
    7512:	4620      	mov	r0, r4
	}
}
    7514:	b003      	add	sp, #12
    7516:	bd30      	pop	{r4, r5, pc}
    7518:	10000a58 	.word	0x10000a58
    751c:	00061a80 	.word	0x00061a80

00007520 <handle_usb>:

void handle_usb(u32 clkn)
{
    7520:	b538      	push	{r3, r4, r5, lr}
    7522:	4604      	mov	r4, r0
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    7524:	2082      	movs	r0, #130	; 0x82
    7526:	f001 fb41 	bl	8bac <USBHwEPGetStatus>
	if (!(epstat & EPSTAT_B1FULL)) {
    752a:	0682      	lsls	r2, r0, #26
void handle_usb(u32 clkn)
{
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    752c:	4605      	mov	r5, r0
	if (!(epstat & EPSTAT_B1FULL)) {
    752e:	d402      	bmi.n	7536 <handle_usb+0x16>
		dequeue_send(clkn);
    7530:	4620      	mov	r0, r4
    7532:	f7ff ffd1 	bl	74d8 <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    7536:	066b      	lsls	r3, r5, #25
    7538:	d402      	bmi.n	7540 <handle_usb+0x20>
		dequeue_send(clkn);
    753a:	4620      	mov	r0, r4
    753c:	f7ff ffcc 	bl	74d8 <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
}
    7540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (!(epstat & EPSTAT_B2FULL)) {
		dequeue_send(clkn);
	}

	/* polled "interrupt" */
	USBHwISR();
    7544:	f001 bbc8 	b.w	8cd8 <USBHwISR>

00007548 <rssi_reset>:

int32_t rssi_sum;
int16_t rssi_iir[79] = {0};

void rssi_reset(void)
{
    7548:	b508      	push	{r3, lr}
	memset(rssi_iir, 0, sizeof(rssi_iir));
    754a:	229e      	movs	r2, #158	; 0x9e
    754c:	4807      	ldr	r0, [pc, #28]	; (756c <rssi_reset+0x24>)
    754e:	2100      	movs	r1, #0
    7550:	f7fc fe12 	bl	4178 <memset>

	rssi_count = 0;
    7554:	4a06      	ldr	r2, [pc, #24]	; (7570 <rssi_reset+0x28>)
    7556:	2300      	movs	r3, #0
    7558:	7013      	strb	r3, [r2, #0]
	rssi_sum = 0;
    755a:	4a06      	ldr	r2, [pc, #24]	; (7574 <rssi_reset+0x2c>)
    755c:	6013      	str	r3, [r2, #0]
	rssi_max = INT8_MIN;
    755e:	4b06      	ldr	r3, [pc, #24]	; (7578 <rssi_reset+0x30>)
    7560:	2280      	movs	r2, #128	; 0x80
    7562:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    7564:	4b05      	ldr	r3, [pc, #20]	; (757c <rssi_reset+0x34>)
    7566:	227f      	movs	r2, #127	; 0x7f
    7568:	701a      	strb	r2, [r3, #0]
    756a:	bd08      	pop	{r3, pc}
    756c:	10000a64 	.word	0x10000a64
    7570:	10001046 	.word	0x10001046
    7574:	10003280 	.word	0x10003280
    7578:	10000ba8 	.word	0x10000ba8
    757c:	10000baa 	.word	0x10000baa

00007580 <rssi_add>:
}

void rssi_add(int8_t v)
{
	rssi_max = (v > rssi_max) ? v : rssi_max;
    7580:	4a0b      	ldr	r2, [pc, #44]	; (75b0 <rssi_add+0x30>)
    7582:	f992 3000 	ldrsb.w	r3, [r2]
    7586:	4283      	cmp	r3, r0
    7588:	bfb8      	it	lt
    758a:	4603      	movlt	r3, r0
    758c:	7013      	strb	r3, [r2, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    758e:	4a09      	ldr	r2, [pc, #36]	; (75b4 <rssi_add+0x34>)
    7590:	f992 3000 	ldrsb.w	r3, [r2]
    7594:	4283      	cmp	r3, r0
    7596:	bfa8      	it	ge
    7598:	4603      	movge	r3, r0
    759a:	7013      	strb	r3, [r2, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    759c:	4a06      	ldr	r2, [pc, #24]	; (75b8 <rssi_add+0x38>)
    759e:	6813      	ldr	r3, [r2, #0]
    75a0:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    75a4:	6013      	str	r3, [r2, #0]
	rssi_count += 1;
    75a6:	4a05      	ldr	r2, [pc, #20]	; (75bc <rssi_add+0x3c>)
    75a8:	7813      	ldrb	r3, [r2, #0]
    75aa:	3301      	adds	r3, #1
    75ac:	7013      	strb	r3, [r2, #0]
    75ae:	4770      	bx	lr
    75b0:	10000ba8 	.word	0x10000ba8
    75b4:	10000baa 	.word	0x10000baa
    75b8:	10003280 	.word	0x10003280
    75bc:	10001046 	.word	0x10001046

000075c0 <rssi_iir_update>:
}

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
void rssi_iir_update(uint16_t channel)
{
    75c0:	b510      	push	{r4, lr}
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    75c2:	f640 1362 	movw	r3, #2402	; 0x962
    75c6:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    75ca:	bf38      	it	cc
    75cc:	4618      	movcc	r0, r3

	int i = channel - 2402;

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    75ce:	4b0d      	ldr	r3, [pc, #52]	; (7604 <rssi_iir_update+0x44>)
	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;

	int i = channel - 2402;
    75d0:	f6a0 1062 	subw	r0, r0, #2402	; 0x962

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    75d4:	781b      	ldrb	r3, [r3, #0]
    75d6:	b123      	cbz	r3, 75e2 <rssi_iir_update+0x22>
		avg = (rssi_sum  + 128) / rssi_count;
    75d8:	4a0b      	ldr	r2, [pc, #44]	; (7608 <rssi_iir_update+0x48>)
    75da:	6812      	ldr	r2, [r2, #0]
    75dc:	3280      	adds	r2, #128	; 0x80
    75de:	fb92 f3f3 	sdiv	r3, r2, r3
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    75e2:	490a      	ldr	r1, [pc, #40]	; (760c <rssi_iir_update+0x4c>)
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    75e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	// IIR using scaled int math (x256)
	if (rssi_count != 0)
		avg = (rssi_sum  + 128) / rssi_count;
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    75e8:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    75ec:	24fd      	movs	r4, #253	; 0xfd
    75ee:	fb04 3302 	mla	r3, r4, r2, r3
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    75f2:	f44f 7280 	mov.w	r2, #256	; 0x100
    75f6:	3380      	adds	r3, #128	; 0x80
    75f8:	fb93 f3f2 	sdiv	r3, r3, r2
    75fc:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    7600:	bd10      	pop	{r4, pc}
    7602:	bf00      	nop
    7604:	10001046 	.word	0x10001046
    7608:	10003280 	.word	0x10003280
    760c:	10000a64 	.word	0x10000a64

00007610 <rssi_get_avg>:
int8_t rssi_get_avg(uint16_t channel)
{
	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    7610:	f640 1362 	movw	r3, #2402	; 0x962
    7614:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    7618:	bf38      	it	cc
    761a:	4618      	movcc	r0, r3

	return (rssi_iir[channel-2402] + 128) / 256;
    761c:	4b05      	ldr	r3, [pc, #20]	; (7634 <rssi_get_avg+0x24>)
    761e:	f6a0 1062 	subw	r0, r0, #2402	; 0x962
    7622:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
    7626:	f44f 7380 	mov.w	r3, #256	; 0x100
    762a:	3080      	adds	r0, #128	; 0x80
    762c:	fb90 f0f3 	sdiv	r0, r0, r3
}
    7630:	b240      	sxtb	r0, r0
    7632:	4770      	bx	lr
    7634:	10000a64 	.word	0x10000a64

00007638 <cs_threshold_calc_and_set>:
	cs_threshold_cur = level;
	cs_no_squelch = (level <= -120);
}

void cs_threshold_calc_and_set(uint16_t channel)
{
    7638:	b538      	push	{r3, r4, r5, lr}

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if (cs_threshold_req > 0) {
    763a:	4d15      	ldr	r5, [pc, #84]	; (7690 <cs_threshold_calc_and_set+0x58>)
    763c:	782c      	ldrb	r4, [r5, #0]
    763e:	b263      	sxtb	r3, r4
    7640:	2b00      	cmp	r3, #0
    7642:	dd05      	ble.n	7650 <cs_threshold_calc_and_set+0x18>
		int8_t rssi = rssi_get_avg(channel);
    7644:	f7ff ffe4 	bl	7610 <rssi_get_avg>
    7648:	782c      	ldrb	r4, [r5, #0]
    764a:	3c36      	subs	r4, #54	; 0x36
		level = rssi - 54 + cs_threshold_req;
    764c:	4420      	add	r0, r4
    764e:	b2c4      	uxtb	r4, r0
 * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, cs_samples_t samples)
{
	level = level < -120 ? -120 : level;
    7650:	b264      	sxtb	r4, r4
	level = level > -20 ? -20 : level;
    7652:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7656:	4284      	cmp	r4, r0
    7658:	bfb8      	it	lt
    765a:	4604      	movlt	r4, r0
    765c:	f06f 0313 	mvn.w	r3, #19
    7660:	429c      	cmp	r4, r3
    7662:	bfa8      	it	ge
    7664:	461c      	movge	r4, r3
    7666:	b2e4      	uxtb	r4, r4
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | ((uint8_t)samples&3));
    7668:	f104 0138 	add.w	r1, r4, #56	; 0x38
    766c:	f041 0103 	orr.w	r1, r1, #3
    7670:	2006      	movs	r0, #6
    7672:	b2c9      	uxtb	r1, r1
    7674:	f000 ff77 	bl	8566 <cc2400_set>
	cs_threshold_cur = level;
    7678:	4b06      	ldr	r3, [pc, #24]	; (7694 <cs_threshold_calc_and_set+0x5c>)
    767a:	701c      	strb	r4, [r3, #0]
	cs_no_squelch = (level <= -120);
    767c:	b264      	sxtb	r4, r4
    767e:	f114 0f77 	cmn.w	r4, #119	; 0x77
    7682:	4b05      	ldr	r3, [pc, #20]	; (7698 <cs_threshold_calc_and_set+0x60>)
    7684:	bfac      	ite	ge
    7686:	2400      	movge	r4, #0
    7688:	2401      	movlt	r4, #1
    768a:	701c      	strb	r4, [r3, #0]
    768c:	bd38      	pop	{r3, r4, r5, pc}
    768e:	bf00      	nop
    7690:	10001048 	.word	0x10001048
    7694:	100010bc 	.word	0x100010bc
    7698:	10000d10 	.word	0x10000d10

0000769c <cs_trigger_enable>:
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
void cs_trigger_enable(void)
{
	cs_trigger = 0;
    769c:	4b07      	ldr	r3, [pc, #28]	; (76bc <cs_trigger_enable+0x20>)
    769e:	2200      	movs	r2, #0
    76a0:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    76a2:	4b07      	ldr	r3, [pc, #28]	; (76c0 <cs_trigger_enable+0x24>)
    76a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    76a8:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    76aa:	4b06      	ldr	r3, [pc, #24]	; (76c4 <cs_trigger_enable+0x28>)
    76ac:	2204      	movs	r2, #4
    76ae:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    76b0:	4a05      	ldr	r2, [pc, #20]	; (76c8 <cs_trigger_enable+0x2c>)
    76b2:	6813      	ldr	r3, [r2, #0]
    76b4:	f043 0304 	orr.w	r3, r3, #4
    76b8:	6013      	str	r3, [r2, #0]
    76ba:	4770      	bx	lr
    76bc:	100010bd 	.word	0x100010bd
    76c0:	e000e100 	.word	0xe000e100
    76c4:	400280ac 	.word	0x400280ac
    76c8:	400280b4 	.word	0x400280b4

000076cc <cs_trigger_disable>:
}

void cs_trigger_disable(void)
{
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    76cc:	4a07      	ldr	r2, [pc, #28]	; (76ec <cs_trigger_disable+0x20>)
    76ce:	6813      	ldr	r3, [r2, #0]
    76d0:	f023 0304 	bic.w	r3, r3, #4
    76d4:	6013      	str	r3, [r2, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    76d6:	4b06      	ldr	r3, [pc, #24]	; (76f0 <cs_trigger_disable+0x24>)
    76d8:	2204      	movs	r2, #4
    76da:	601a      	str	r2, [r3, #0]
	ICER0 = ICER0_ICE_EINT3;
    76dc:	4b05      	ldr	r3, [pc, #20]	; (76f4 <cs_trigger_disable+0x28>)
    76de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    76e2:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    76e4:	4b04      	ldr	r3, [pc, #16]	; (76f8 <cs_trigger_disable+0x2c>)
    76e6:	2200      	movs	r2, #0
    76e8:	701a      	strb	r2, [r3, #0]
    76ea:	4770      	bx	lr
    76ec:	400280b4 	.word	0x400280b4
    76f0:	400280ac 	.word	0x400280ac
    76f4:	e000e180 	.word	0xe000e180
    76f8:	100010bd 	.word	0x100010bd

000076fc <cs_reset>:
}

void cs_reset(void)
{
    76fc:	b508      	push	{r3, lr}
	cs_trigger_disable();
    76fe:	f7ff ffe5 	bl	76cc <cs_trigger_disable>

	cs_no_squelch = 0;
    7702:	4b04      	ldr	r3, [pc, #16]	; (7714 <cs_reset+0x18>)
    7704:	2200      	movs	r2, #0
    7706:	701a      	strb	r2, [r3, #0]
	cs_threshold_req=CS_THRESHOLD_DEFAULT;
    7708:	4a03      	ldr	r2, [pc, #12]	; (7718 <cs_reset+0x1c>)
    770a:	2388      	movs	r3, #136	; 0x88
    770c:	7013      	strb	r3, [r2, #0]
	cs_threshold_cur=CS_THRESHOLD_DEFAULT;
    770e:	4a03      	ldr	r2, [pc, #12]	; (771c <cs_reset+0x20>)
    7710:	7013      	strb	r3, [r2, #0]
    7712:	bd08      	pop	{r3, pc}
    7714:	10000d10 	.word	0x10000d10
    7718:	10001048 	.word	0x10001048
    771c:	100010bc 	.word	0x100010bc

00007720 <clkn_stop>:
#include "ubertooth.h"

void clkn_stop()
{
	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    7720:	4b0a      	ldr	r3, [pc, #40]	; (774c <clkn_stop+0x2c>)
    7722:	2202      	movs	r2, #2
    7724:	601a      	str	r2, [r3, #0]

	clkn = 0;
    7726:	4a0a      	ldr	r2, [pc, #40]	; (7750 <clkn_stop+0x30>)
    7728:	2300      	movs	r3, #0
    772a:	6013      	str	r3, [r2, #0]
	last_hop = 0;
    772c:	4a09      	ldr	r2, [pc, #36]	; (7754 <clkn_stop+0x34>)
    772e:	6013      	str	r3, [r2, #0]

	clkn_offset = 0;
    7730:	4a09      	ldr	r2, [pc, #36]	; (7758 <clkn_stop+0x38>)
    7732:	6013      	str	r3, [r2, #0]
	clk100ns_offset = 0;
    7734:	4a09      	ldr	r2, [pc, #36]	; (775c <clkn_stop+0x3c>)
    7736:	8013      	strh	r3, [r2, #0]

	clk_drift_ppm = 0;
    7738:	4a09      	ldr	r2, [pc, #36]	; (7760 <clkn_stop+0x40>)
    773a:	8013      	strh	r3, [r2, #0]
	clk_drift_correction = 0;
    773c:	4a09      	ldr	r2, [pc, #36]	; (7764 <clkn_stop+0x44>)
    773e:	8013      	strh	r3, [r2, #0]

	clkn_last_drift_fix = 0;
    7740:	4a09      	ldr	r2, [pc, #36]	; (7768 <clkn_stop+0x48>)
    7742:	6013      	str	r3, [r2, #0]
	clkn_next_drift_fix = 0;
    7744:	4a09      	ldr	r2, [pc, #36]	; (776c <clkn_stop+0x4c>)
    7746:	6013      	str	r3, [r2, #0]
    7748:	4770      	bx	lr
    774a:	bf00      	nop
    774c:	40004004 	.word	0x40004004
    7750:	10000bc4 	.word	0x10000bc4
    7754:	10000ba0 	.word	0x10000ba0
    7758:	10000bb8 	.word	0x10000bb8
    775c:	10000d12 	.word	0x10000d12
    7760:	10001044 	.word	0x10001044
    7764:	10000bc0 	.word	0x10000bc0
    7768:	10000bbc 	.word	0x10000bbc
    776c:	1000107c 	.word	0x1000107c

00007770 <clkn_start>:
}

void clkn_start()
{
	/* start timer */
	T0TCR = TCR_Counter_Enable;
    7770:	4b01      	ldr	r3, [pc, #4]	; (7778 <clkn_start+0x8>)
    7772:	2201      	movs	r2, #1
    7774:	601a      	str	r2, [r3, #0]
    7776:	4770      	bx	lr
    7778:	40004004 	.word	0x40004004

0000777c <clkn_init>:
}

void clkn_init()
{
    777c:	b508      	push	{r3, lr}
	 * Because these are reset defaults, we're assuming TIMER0 is powered on
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	clkn_stop();
    777e:	f7ff ffcf 	bl	7720 <clkn_stop>
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    7782:	4b06      	ldr	r3, [pc, #24]	; (779c <clkn_init+0x20>)
    7784:	2204      	movs	r2, #4
    7786:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    7788:	f640 4234 	movw	r2, #3124	; 0xc34
    778c:	60da      	str	r2, [r3, #12]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    778e:	2203      	movs	r2, #3
    7790:	609a      	str	r2, [r3, #8]
	ISER0 = ISER0_ISE_TIMER0;
    7792:	4b03      	ldr	r3, [pc, #12]	; (77a0 <clkn_init+0x24>)
    7794:	2202      	movs	r2, #2
    7796:	601a      	str	r2, [r3, #0]
    7798:	bd08      	pop	{r3, pc}
    779a:	bf00      	nop
    779c:	4000400c 	.word	0x4000400c
    77a0:	e000e100 	.word	0xe000e100

000077a4 <dma_disable>:
{
	// disable DMA engine:
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 607

	// disable DMA interrupts
	ICER0 = ICER0_ICE_DMA;
    77a4:	4b15      	ldr	r3, [pc, #84]	; (77fc <dma_disable+0x58>)
    77a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    77aa:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    77ac:	4a14      	ldr	r2, [pc, #80]	; (7800 <dma_disable+0x5c>)
    77ae:	2300      	movs	r3, #0
    77b0:	6013      	str	r3, [r2, #0]
	DMACC1Config = 0;
    77b2:	6213      	str	r3, [r2, #32]
	DMACC2Config = 0;
    77b4:	6413      	str	r3, [r2, #64]	; 0x40
	DMACC3Config = 0;
    77b6:	6613      	str	r3, [r2, #96]	; 0x60
	DMACC4Config = 0;
    77b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMACC5Config = 0;
    77bc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	DMACC6Config = 0;
    77c0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	DMACC7Config = 0;
    77c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	DMACIntTCClear = 0xFF;
    77c8:	23ff      	movs	r3, #255	; 0xff
    77ca:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
    77ce:	6013      	str	r3, [r2, #0]
	DMACIntErrClr = 0xFF;
    77d0:	6093      	str	r3, [r2, #8]

	// Disable the DMA controller by writing 0 to the DMA Enable bit in the DMACConfig
	// register.
	DMACConfig &= ~DMACConfig_E;
    77d2:	4b0c      	ldr	r3, [pc, #48]	; (7804 <dma_disable+0x60>)
    77d4:	681a      	ldr	r2, [r3, #0]
    77d6:	f022 0201 	bic.w	r2, r2, #1
    77da:	601a      	str	r2, [r3, #0]
    77dc:	461a      	mov	r2, r3
	while (DMACConfig & DMACConfig_E);
    77de:	6813      	ldr	r3, [r2, #0]
    77e0:	f013 0301 	ands.w	r3, r3, #1
    77e4:	d1fb      	bne.n	77de <dma_disable+0x3a>

	/* reset interrupt counters */
	rx_tc = 0;
    77e6:	4a08      	ldr	r2, [pc, #32]	; (7808 <dma_disable+0x64>)
    77e8:	6013      	str	r3, [r2, #0]
	rx_err = 0;
    77ea:	4a08      	ldr	r2, [pc, #32]	; (780c <dma_disable+0x68>)
    77ec:	6013      	str	r3, [r2, #0]

	active_rxbuf = &rxbuf1[0];
    77ee:	4a08      	ldr	r2, [pc, #32]	; (7810 <dma_disable+0x6c>)
    77f0:	4b08      	ldr	r3, [pc, #32]	; (7814 <dma_disable+0x70>)
    77f2:	601a      	str	r2, [r3, #0]
	idle_rxbuf = &rxbuf2[0];
    77f4:	4a08      	ldr	r2, [pc, #32]	; (7818 <dma_disable+0x74>)
    77f6:	4b09      	ldr	r3, [pc, #36]	; (781c <dma_disable+0x78>)
    77f8:	601a      	str	r2, [r3, #0]
    77fa:	4770      	bx	lr
    77fc:	e000e180 	.word	0xe000e180
    7800:	50004110 	.word	0x50004110
    7804:	50004030 	.word	0x50004030
    7808:	10000ba4 	.word	0x10000ba4
    780c:	100010b8 	.word	0x100010b8
    7810:	10001085 	.word	0x10001085
    7814:	10000c04 	.word	0x10000c04
    7818:	10001049 	.word	0x10001049
    781c:	10000d20 	.word	0x10000d20

00007820 <dma_init>:
}

void dma_init()
{
    7820:	b508      	push	{r3, lr}
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    7822:	4a14      	ldr	r2, [pc, #80]	; (7874 <dma_init+0x54>)
    7824:	6813      	ldr	r3, [r2, #0]
    7826:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    782a:	6013      	str	r3, [r2, #0]

	dma_disable();
    782c:	f7ff ffba 	bl	77a4 <dma_disable>

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7830:	4b11      	ldr	r3, [pc, #68]	; (7878 <dma_init+0x58>)
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    7832:	4a12      	ldr	r2, [pc, #72]	; (787c <dma_init+0x5c>)
	PCONP |= PCONP_PCGPDMA;

	dma_disable();

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    7834:	4812      	ldr	r0, [pc, #72]	; (7880 <dma_init+0x60>)
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    7836:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    7838:	4a12      	ldr	r2, [pc, #72]	; (7884 <dma_init+0x64>)
	rx_dma_lli1.control = (DMA_SIZE) |
    783a:	4913      	ldr	r1, [pc, #76]	; (7888 <dma_init+0x68>)
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
    783c:	6010      	str	r0, [r2, #0]
	PCONP |= PCONP_PCGPDMA;

	dma_disable();

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    783e:	6018      	str	r0, [r3, #0]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    7840:	4812      	ldr	r0, [pc, #72]	; (788c <dma_init+0x6c>)
	dma_disable();

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    7842:	609a      	str	r2, [r3, #8]
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
	rx_dma_lli2.next_lli = (uint32_t)&rx_dma_lli1;
	rx_dma_lli2.control = (DMA_SIZE) |
    7844:	60d1      	str	r1, [r2, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    7846:	6050      	str	r0, [r2, #4]
	rx_dma_lli2.next_lli = (uint32_t)&rx_dma_lli1;
    7848:	6093      	str	r3, [r2, #8]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    784a:	4a11      	ldr	r2, [pc, #68]	; (7890 <dma_init+0x70>)

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
	rx_dma_lli1.control = (DMA_SIZE) |
    784c:	60d9      	str	r1, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    784e:	2101      	movs	r1, #1
    7850:	6011      	str	r1, [r2, #0]
	while (!(DMACConfig & DMACConfig_E));
    7852:	6811      	ldr	r1, [r2, #0]
    7854:	07c9      	lsls	r1, r1, #31
    7856:	d5fc      	bpl.n	7852 <dma_init+0x32>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    7858:	6819      	ldr	r1, [r3, #0]
    785a:	4a0e      	ldr	r2, [pc, #56]	; (7894 <dma_init+0x74>)
    785c:	6011      	str	r1, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    785e:	6859      	ldr	r1, [r3, #4]
    7860:	6051      	str	r1, [r2, #4]
	DMACC0LLI = rx_dma_lli1.next_lli;
    7862:	6899      	ldr	r1, [r3, #8]
    7864:	6091      	str	r1, [r2, #8]
	DMACC0Control = rx_dma_lli1.control;
    7866:	68da      	ldr	r2, [r3, #12]
    7868:	4b0b      	ldr	r3, [pc, #44]	; (7898 <dma_init+0x78>)
    786a:	601a      	str	r2, [r3, #0]
	DMACC0Config = DIO_SSP_SRC
    786c:	f24d 0206 	movw	r2, #53254	; 0xd006
    7870:	605a      	str	r2, [r3, #4]
    7872:	bd08      	pop	{r3, pc}
    7874:	400fc0c4 	.word	0x400fc0c4
    7878:	10003344 	.word	0x10003344
    787c:	10001085 	.word	0x10001085
    7880:	40030008 	.word	0x40030008
    7884:	10003334 	.word	0x10003334
    7888:	88009032 	.word	0x88009032
    788c:	10001049 	.word	0x10001049
    7890:	50004030 	.word	0x50004030
    7894:	50004100 	.word	0x50004100
    7898:	5000410c 	.word	0x5000410c

0000789c <dma_init_le>:
	               | DMACCxConfig_IE   /* allow error interrupts */
	               | DMACCxConfig_ITC; /* allow terminal count interrupts */
}

void dma_init_le()
{
    789c:	b508      	push	{r3, lr}
	int i;

	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    789e:	4a1a      	ldr	r2, [pc, #104]	; (7908 <dma_init_le+0x6c>)
    78a0:	6813      	ldr	r3, [r2, #0]
    78a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    78a6:	6013      	str	r3, [r2, #0]

	dma_disable();
    78a8:	f7ff ff7c 	bl	77a4 <dma_disable>

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    78ac:	4b17      	ldr	r3, [pc, #92]	; (790c <dma_init_le+0x70>)
    78ae:	2201      	movs	r2, #1
    78b0:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    78b2:	681a      	ldr	r2, [r3, #0]
    78b4:	07d2      	lsls	r2, r2, #31
    78b6:	d5fc      	bpl.n	78b2 <dma_init_le+0x16>
    78b8:	4b15      	ldr	r3, [pc, #84]	; (7910 <dma_init_le+0x74>)
    78ba:	2200      	movs	r2, #0

	for (i = 0; i < 11; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    78bc:	4915      	ldr	r1, [pc, #84]	; (7914 <dma_init_le+0x78>)
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
    78be:	2a0a      	cmp	r2, #10
	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    78c0:	f843 1c10 	str.w	r1, [r3, #-16]
    78c4:	4914      	ldr	r1, [pc, #80]	; (7918 <dma_init_le+0x7c>)
    78c6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
    78ca:	f843 1c0c 	str.w	r1, [r3, #-12]
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
    78ce:	bf14      	ite	ne
    78d0:	4619      	movne	r1, r3
    78d2:	2100      	moveq	r1, #0
    78d4:	f843 1c08 	str.w	r1, [r3, #-8]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    78d8:	3201      	adds	r2, #1
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
		le_dma_lli[i].control = 4 |
    78da:	4910      	ldr	r1, [pc, #64]	; (791c <dma_init_le+0x80>)

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    78dc:	2a0b      	cmp	r2, #11
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
		le_dma_lli[i].control = 4 |
    78de:	f843 1c04 	str.w	r1, [r3, #-4]
    78e2:	f103 0310 	add.w	r3, r3, #16

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    78e6:	d1e9      	bne.n	78bc <dma_init_le+0x20>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    78e8:	4b0d      	ldr	r3, [pc, #52]	; (7920 <dma_init_le+0x84>)
    78ea:	4a0e      	ldr	r2, [pc, #56]	; (7924 <dma_init_le+0x88>)
    78ec:	6819      	ldr	r1, [r3, #0]
    78ee:	6011      	str	r1, [r2, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    78f0:	6859      	ldr	r1, [r3, #4]
    78f2:	6051      	str	r1, [r2, #4]
	DMACC0LLI = le_dma_lli[0].next_lli;
    78f4:	6899      	ldr	r1, [r3, #8]
    78f6:	6091      	str	r1, [r2, #8]
	DMACC0Control = le_dma_lli[0].control;
    78f8:	68da      	ldr	r2, [r3, #12]
    78fa:	4b0b      	ldr	r3, [pc, #44]	; (7928 <dma_init_le+0x8c>)
    78fc:	601a      	str	r2, [r3, #0]
	DMACC0Config =
    78fe:	f24d 0206 	movw	r2, #53254	; 0xd006
    7902:	605a      	str	r2, [r3, #4]
    7904:	bd08      	pop	{r3, pc}
    7906:	bf00      	nop
    7908:	400fc0c4 	.word	0x400fc0c4
    790c:	50004030 	.word	0x50004030
    7910:	10003294 	.word	0x10003294
    7914:	40030008 	.word	0x40030008
    7918:	10001085 	.word	0x10001085
    791c:	88001004 	.word	0x88001004
    7920:	10003284 	.word	0x10003284
    7924:	50004100 	.word	0x50004100
    7928:	5000410c 	.word	0x5000410c

0000792c <dio_ssp_start>:


void dio_ssp_start()
{
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    792c:	4b0d      	ldr	r3, [pc, #52]	; (7964 <dio_ssp_start+0x38>)

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    792e:	490e      	ldr	r1, [pc, #56]	; (7968 <dio_ssp_start+0x3c>)


void dio_ssp_start()
{
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    7930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7934:	601a      	str	r2, [r3, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    7936:	680b      	ldr	r3, [r1, #0]
    7938:	f043 0301 	orr.w	r3, r3, #1
    793c:	600b      	str	r3, [r1, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    793e:	f851 3c20 	ldr.w	r3, [r1, #-32]
    7942:	f043 0302 	orr.w	r3, r3, #2
    7946:	f841 3c20 	str.w	r3, [r1, #-32]


static void dma_enable(void)
{
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
    794a:	4908      	ldr	r1, [pc, #32]	; (796c <dio_ssp_start+0x40>)
    794c:	680b      	ldr	r3, [r1, #0]
    794e:	f043 0301 	orr.w	r3, r3, #1
    7952:	600b      	str	r3, [r1, #0]
	ISER0 = ISER0_ISE_DMA;
    7954:	4b06      	ldr	r3, [pc, #24]	; (7970 <dio_ssp_start+0x44>)
    7956:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    795a:	6019      	str	r1, [r3, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;

	dma_enable();

	/* activate slave select pin */
	DIO_SSEL_CLR;
    795c:	4b05      	ldr	r3, [pc, #20]	; (7974 <dio_ssp_start+0x48>)
    795e:	601a      	str	r2, [r3, #0]
    7960:	4770      	bx	lr
    7962:	bf00      	nop
    7964:	2009c098 	.word	0x2009c098
    7968:	40030024 	.word	0x40030024
    796c:	50004110 	.word	0x50004110
    7970:	e000e100 	.word	0xe000e100
    7974:	2009c09c 	.word	0x2009c09c

00007978 <dio_ssp_stop>:
}

void dio_ssp_stop()
{
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    7978:	4b08      	ldr	r3, [pc, #32]	; (799c <dio_ssp_stop+0x24>)
    797a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    797e:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7980:	4a07      	ldr	r2, [pc, #28]	; (79a0 <dio_ssp_stop+0x28>)
    7982:	6813      	ldr	r3, [r2, #0]
    7984:	f023 0301 	bic.w	r3, r3, #1
    7988:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    798a:	f852 3c20 	ldr.w	r3, [r2, #-32]
    798e:	f023 0302 	bic.w	r3, r3, #2
    7992:	f842 3c20 	str.w	r3, [r2, #-32]

	dma_disable();
    7996:	f7ff bf05 	b.w	77a4 <dma_disable>
    799a:	bf00      	nop
    799c:	2009c098 	.word	0x2009c098
    79a0:	40030024 	.word	0x40030024

000079a4 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    79a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    79a8:	b098      	sub	sp, #96	; 0x60
    79aa:	af00      	add	r7, sp, #0
	u8 len = 22;
	u8 pa = 0;
	u8 txbuf[len];
	u8 rxbuf[len];

	txbuf[0] = len - 1; // length of data (rest of payload)
    79ac:	2315      	movs	r3, #21
    79ae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	txbuf[1] = 0; // request
    79b2:	2300      	movs	r3, #0
    79b4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    79b8:	4682      	mov	sl, r0

	txbuf[0] = len - 1; // length of data (rest of payload)
	txbuf[1] = 0; // request

	// read device serial number
	command[0] = 58;
    79ba:	233a      	movs	r3, #58	; 0x3a
    79bc:	f107 0060 	add.w	r0, r7, #96	; 0x60
    79c0:	f840 3d58 	str.w	r3, [r0, #-88]!
	iap_entry(command, result);
    79c4:	4b98      	ldr	r3, [pc, #608]	; (7c28 <cc2400_rangetest+0x284>)
    79c6:	f107 011c 	add.w	r1, r7, #28
    79ca:	681b      	ldr	r3, [r3, #0]
    79cc:	f8c7 d004 	str.w	sp, [r7, #4]
    79d0:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    79d2:	7f3a      	ldrb	r2, [r7, #28]
    79d4:	2a00      	cmp	r2, #0
    79d6:	f040 8122 	bne.w	7c1e <cc2400_rangetest+0x27a>
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
    79da:	6a3b      	ldr	r3, [r7, #32]
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    79dc:	2012      	movs	r0, #18
	// read device serial number
	command[0] = 58;
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
    79de:	0e19      	lsrs	r1, r3, #24
    79e0:	f887 104a 	strb.w	r1, [r7, #74]	; 0x4a
	txbuf[3] = (result[1] >> 16) & 0xFF;
    79e4:	0c19      	lsrs	r1, r3, #16
    79e6:	f887 104b 	strb.w	r1, [r7, #75]	; 0x4b
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
    79ea:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
    79ee:	0a19      	lsrs	r1, r3, #8
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
    79f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
    79f2:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
    79f6:	0e19      	lsrs	r1, r3, #24
    79f8:	f887 104e 	strb.w	r1, [r7, #78]	; 0x4e
	txbuf[7] = (result[2] >> 16) & 0xFF;
    79fc:	0c19      	lsrs	r1, r3, #16
    79fe:	f887 104f 	strb.w	r1, [r7, #79]	; 0x4f
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
    7a02:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
    7a06:	0a19      	lsrs	r1, r3, #8
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
    7a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
    7a0a:	f887 1050 	strb.w	r1, [r7, #80]	; 0x50
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
    7a0e:	0e19      	lsrs	r1, r3, #24
    7a10:	f887 1052 	strb.w	r1, [r7, #82]	; 0x52
	txbuf[11] = (result[3] >> 16) & 0xFF;
    7a14:	0c19      	lsrs	r1, r3, #16
    7a16:	f887 1053 	strb.w	r1, [r7, #83]	; 0x53
	txbuf[12] = (result[3] >> 8) & 0xFF;
	txbuf[13] = result[3] & 0xFF;
    7a1a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
	txbuf[11] = (result[3] >> 16) & 0xFF;
	txbuf[12] = (result[3] >> 8) & 0xFF;
    7a1e:	0a19      	lsrs	r1, r3, #8
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
    7a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
	txbuf[11] = (result[3] >> 16) & 0xFF;
	txbuf[12] = (result[3] >> 8) & 0xFF;
    7a22:	f887 1054 	strb.w	r1, [r7, #84]	; 0x54
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
    7a26:	0e19      	lsrs	r1, r3, #24
    7a28:	f887 1056 	strb.w	r1, [r7, #86]	; 0x56
	txbuf[15] = (result[4] >> 16) & 0xFF;
    7a2c:	0c19      	lsrs	r1, r3, #16
    7a2e:	f887 1057 	strb.w	r1, [r7, #87]	; 0x57
	txbuf[16] = (result[4] >> 8) & 0xFF;
    7a32:	0a19      	lsrs	r1, r3, #8
    7a34:	f887 1058 	strb.w	r1, [r7, #88]	; 0x58
	txbuf[17] = result[4] & 0xFF;
    7a38:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    7a3c:	f642 3122 	movw	r1, #11042	; 0x2b22
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
    7a40:	23ff      	movs	r3, #255	; 0xff
	txbuf[14] = (result[4] >> 24) & 0xFF;
	txbuf[15] = (result[4] >> 16) & 0xFF;
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
    7a42:	f887 205a 	strb.w	r2, [r7, #90]	; 0x5a
	txbuf[19] = 0; // request number
    7a46:	f887 205b 	strb.w	r2, [r7, #91]	; 0x5b
	txbuf[20] = 0xff; // reply pa
    7a4a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	txbuf[21] = 0xff; // reply number
    7a4e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    7a52:	f000 fd88 	bl	8566 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    7a56:	2014      	movs	r0, #20
    7a58:	f241 314b 	movw	r1, #4939	; 0x134b
    7a5c:	f000 fd83 	bl	8566 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    7a60:	2020      	movs	r0, #32
    7a62:	f640 51f1 	movw	r1, #3569	; 0xdf1
    7a66:	f000 fd7e 	bl	8566 <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    7a6a:	f8ba 1000 	ldrh.w	r1, [sl]
    7a6e:	2002      	movs	r0, #2
    7a70:	b289      	uxth	r1, r1
    7a72:	f000 fd78 	bl	8566 <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    7a76:	202d      	movs	r0, #45	; 0x2d
    7a78:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    7a7c:	f000 fd73 	bl	8566 <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    7a80:	202c      	movs	r0, #44	; 0x2c
    7a82:	f241 5184 	movw	r1, #5508	; 0x1584
    7a86:	f000 fd6e 	bl	8566 <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    7a8a:	2005      	movs	r0, #5
    7a8c:	2108      	movs	r1, #8
    7a8e:	f000 fd6a 	bl	8566 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    7a92:	2003      	movs	r0, #3
    7a94:	2129      	movs	r1, #41	; 0x29
    7a96:	f000 fd66 	bl	8566 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    7a9a:	f000 fe05 	bl	86a8 <cc2400_status>
    7a9e:	0642      	lsls	r2, r0, #25
    7aa0:	d5fb      	bpl.n	7a9a <cc2400_rangetest+0xf6>
	cc2400_strobe(SFSON);
    7aa2:	2061      	movs	r0, #97	; 0x61
    7aa4:	f000 fe07 	bl	86b6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7aa8:	f000 fdfe 	bl	86a8 <cc2400_status>
    7aac:	0743      	lsls	r3, r0, #29
    7aae:	d5fb      	bpl.n	7aa8 <cc2400_rangetest+0x104>
	TXLED_SET;
    7ab0:	4b5e      	ldr	r3, [pc, #376]	; (7c2c <cc2400_rangetest+0x288>)
    7ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
    7ab6:	4698      	mov	r8, r3
    7ab8:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7aba:	4a5d      	ldr	r2, [pc, #372]	; (7c30 <cc2400_rangetest+0x28c>)
    7abc:	2180      	movs	r1, #128	; 0x80
    7abe:	6011      	str	r1, [r2, #0]
    7ac0:	2400      	movs	r4, #0
    7ac2:	b2e5      	uxtb	r5, r4
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
    7ac4:	2005      	movs	r0, #5
    7ac6:	f045 0108 	orr.w	r1, r5, #8
    7aca:	f000 fd4c 	bl	8566 <cc2400_set>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    7ace:	2600      	movs	r6, #0
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
    7ad0:	f887 505a 	strb.w	r5, [r7, #90]	; 0x5a
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
    7ad4:	f887 605b 	strb.w	r6, [r7, #91]	; 0x5b
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7ad8:	200e      	movs	r0, #14
    7ada:	f000 fd3b 	bl	8554 <cc2400_get>
    7ade:	f000 001f 	and.w	r0, r0, #31
    7ae2:	280f      	cmp	r0, #15
    7ae4:	d1f8      	bne.n	7ad8 <cc2400_rangetest+0x134>
    7ae6:	f04f 0900 	mov.w	r9, #0
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
    7aea:	f107 0548 	add.w	r5, r7, #72	; 0x48
    7aee:	f815 1009 	ldrb.w	r1, [r5, r9]
    7af2:	2070      	movs	r0, #112	; 0x70
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    7af4:	f109 0901 	add.w	r9, r9, #1
				cc2400_set8(FIFOREG, txbuf[j]);
    7af8:	f000 fd43 	bl	8582 <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    7afc:	f1b9 0f16 	cmp.w	r9, #22
    7b00:	d1f3      	bne.n	7aea <cc2400_rangetest+0x146>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    7b02:	2063      	movs	r0, #99	; 0x63
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    7b04:	3601      	adds	r6, #1
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    7b06:	f000 fdd6 	bl	86b6 <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    7b0a:	2e10      	cmp	r6, #16
    7b0c:	d1e2      	bne.n	7ad4 <cc2400_rangetest+0x130>
    7b0e:	3401      	adds	r4, #1
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    7b10:	2c08      	cmp	r4, #8
    7b12:	d1d6      	bne.n	7ac2 <cc2400_rangetest+0x11e>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7b14:	200e      	movs	r0, #14
    7b16:	f000 fd1d 	bl	8554 <cc2400_get>
    7b1a:	f000 001f 	and.w	r0, r0, #31
    7b1e:	280f      	cmp	r0, #15
    7b20:	d1f8      	bne.n	7b14 <cc2400_rangetest+0x170>
	TXLED_CLR;
    7b22:	4c44      	ldr	r4, [pc, #272]	; (7c34 <cc2400_rangetest+0x290>)
    7b24:	f44f 7380 	mov.w	r3, #256	; 0x100
    7b28:	6023      	str	r3, [r4, #0]
	cc2400_strobe(SRFOFF);
    7b2a:	2064      	movs	r0, #100	; 0x64
    7b2c:	f000 fdc3 	bl	86b6 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    7b30:	f000 fdba 	bl	86a8 <cc2400_status>
    7b34:	0746      	lsls	r6, r0, #29
    7b36:	d4fb      	bmi.n	7b30 <cc2400_rangetest+0x18c>
	cc2400_set(FSDIV, *chan_ptr - 1);
    7b38:	f8ba 1000 	ldrh.w	r1, [sl]
    7b3c:	2002      	movs	r0, #2
    7b3e:	3901      	subs	r1, #1
    7b40:	b289      	uxth	r1, r1
    7b42:	f000 fd10 	bl	8566 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    7b46:	f000 fdaf 	bl	86a8 <cc2400_status>
    7b4a:	0640      	lsls	r0, r0, #25
    7b4c:	d5fb      	bpl.n	7b46 <cc2400_rangetest+0x1a2>
	cc2400_strobe(SFSON);
    7b4e:	2061      	movs	r0, #97	; 0x61
    7b50:	f000 fdb1 	bl	86b6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7b54:	f000 fda8 	bl	86a8 <cc2400_status>
    7b58:	0741      	lsls	r1, r0, #29
    7b5a:	d5fb      	bpl.n	7b54 <cc2400_rangetest+0x1b0>
	RXLED_SET;
    7b5c:	2310      	movs	r3, #16
    7b5e:	f8c8 3000 	str.w	r3, [r8]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7b62:	200e      	movs	r0, #14
    7b64:	f000 fcf6 	bl	8554 <cc2400_get>
    7b68:	f000 001f 	and.w	r0, r0, #31
    7b6c:	280f      	cmp	r0, #15
    7b6e:	d1f8      	bne.n	7b62 <cc2400_rangetest+0x1be>
		cc2400_strobe(SRX);
    7b70:	2062      	movs	r0, #98	; 0x62
    7b72:	f000 fda0 	bl	86b6 <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    7b76:	f000 fd97 	bl	86a8 <cc2400_status>
    7b7a:	06c2      	lsls	r2, r0, #27
    7b7c:	d5fb      	bpl.n	7b76 <cc2400_rangetest+0x1d2>
		USRLED_SET;
    7b7e:	2302      	movs	r3, #2
    7b80:	f8c8 3000 	str.w	r3, [r8]
		for (j = 0; j < len; j++)
    7b84:	f04f 0900 	mov.w	r9, #0
			rxbuf[j] = cc2400_get8(FIFOREG);
    7b88:	2070      	movs	r0, #112	; 0x70
    7b8a:	f000 fcf1 	bl	8570 <cc2400_get8>
    7b8e:	f107 0630 	add.w	r6, r7, #48	; 0x30
    7b92:	f806 0009 	strb.w	r0, [r6, r9]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    7b96:	f109 0901 	add.w	r9, r9, #1
    7b9a:	f1b9 0f16 	cmp.w	r9, #22
    7b9e:	d1f3      	bne.n	7b88 <cc2400_rangetest+0x1e4>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    7ba0:	f000 fd82 	bl	86a8 <cc2400_status>
    7ba4:	0703      	lsls	r3, r0, #28
    7ba6:	d402      	bmi.n	7bae <cc2400_rangetest+0x20a>
			break;
		USRLED_CLR;
    7ba8:	2302      	movs	r3, #2
    7baa:	6023      	str	r3, [r4, #0]
	}
    7bac:	e7d9      	b.n	7b62 <cc2400_rangetest+0x1be>

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7bae:	200e      	movs	r0, #14
    7bb0:	f000 fcd0 	bl	8554 <cc2400_get>
    7bb4:	f000 001f 	and.w	r0, r0, #31
    7bb8:	280f      	cmp	r0, #15
    7bba:	d1f8      	bne.n	7bae <cc2400_rangetest+0x20a>
	cc2400_strobe(SRFOFF);
    7bbc:	2064      	movs	r0, #100	; 0x64
    7bbe:	f000 fd7a 	bl	86b6 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    7bc2:	f000 fd71 	bl	86a8 <cc2400_status>
    7bc6:	f000 0004 	and.w	r0, r0, #4
    7bca:	f000 03ff 	and.w	r3, r0, #255	; 0xff
    7bce:	2800      	cmp	r0, #0
    7bd0:	d1f7      	bne.n	7bc2 <cc2400_rangetest+0x21e>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    7bd2:	4a19      	ldr	r2, [pc, #100]	; (7c38 <cc2400_rangetest+0x294>)
    7bd4:	2180      	movs	r1, #128	; 0x80
    7bd6:	6011      	str	r1, [r2, #0]
#endif
	RXLED_CLR;
    7bd8:	2210      	movs	r2, #16
    7bda:	6022      	str	r2, [r4, #0]

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
    7bdc:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
	PAEN_CLR;
#endif
	RXLED_CLR;

	// get test result
	rr.valid       = 1;
    7be0:	4a16      	ldr	r2, [pc, #88]	; (7c3c <cc2400_rangetest+0x298>)
    7be2:	2101      	movs	r1, #1
	rr.request_pa  = rxbuf[18];
    7be4:	7050      	strb	r0, [r2, #1]
	rr.request_num = rxbuf[19];
    7be6:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    7bea:	f887 1049 	strb.w	r1, [r7, #73]	; 0x49
	RXLED_CLR;

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
	rr.request_num = rxbuf[19];
    7bee:	7090      	strb	r0, [r2, #2]
	rr.reply_pa    = rxbuf[20];
    7bf0:	f897 0044 	ldrb.w	r0, [r7, #68]	; 0x44
    7bf4:	70d0      	strb	r0, [r2, #3]
	rr.reply_num   = rxbuf[21];
    7bf6:	f897 0045 	ldrb.w	r0, [r7, #69]	; 0x45
    7bfa:	7110      	strb	r0, [r2, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
		if (rxbuf[i] != txbuf[i])
    7bfc:	f816 e003 	ldrb.w	lr, [r6, r3]
    7c00:	5ce8      	ldrb	r0, [r5, r3]
    7c02:	4586      	cmp	lr, r0
    7c04:	bf18      	it	ne
    7c06:	1c99      	addne	r1, r3, #2
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    7c08:	f103 0301 	add.w	r3, r3, #1
    7c0c:	bf18      	it	ne
    7c0e:	b2c9      	uxtbne	r1, r1
    7c10:	2b12      	cmp	r3, #18
    7c12:	d1f3      	bne.n	7bfc <cc2400_rangetest+0x258>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 2 + i;

	USRLED_CLR;
    7c14:	2302      	movs	r3, #2
    7c16:	7011      	strb	r1, [r2, #0]
    7c18:	6023      	str	r3, [r4, #0]
    7c1a:	f8d7 d004 	ldr.w	sp, [r7, #4]
#endif
}
    7c1e:	3760      	adds	r7, #96	; 0x60
    7c20:	46bd      	mov	sp, r7
    7c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7c26:	bf00      	nop
    7c28:	00009bb0 	.word	0x00009bb0
    7c2c:	2009c038 	.word	0x2009c038
    7c30:	2009c058 	.word	0x2009c058
    7c34:	2009c03c 	.word	0x2009c03c
    7c38:	2009c05c 	.word	0x2009c05c
    7c3c:	10001080 	.word	0x10001080

00007c40 <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    7c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7c44:	b087      	sub	sp, #28
    7c46:	4680      	mov	r8, r0
	u8 pa = 0;
	u8 buf[len];

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(LMTST,   0x2b22);
    7c48:	2012      	movs	r0, #18
    7c4a:	f642 3122 	movw	r1, #11042	; 0x2b22
    7c4e:	f000 fc8a 	bl	8566 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    7c52:	2014      	movs	r0, #20
    7c54:	f241 314b 	movw	r1, #4939	; 0x134b
    7c58:	f000 fc85 	bl	8566 <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    7c5c:	f8b8 1000 	ldrh.w	r1, [r8]
    7c60:	2002      	movs	r0, #2
    7c62:	3901      	subs	r1, #1
    7c64:	b289      	uxth	r1, r1
    7c66:	f000 fc7e 	bl	8566 <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    7c6a:	202d      	movs	r0, #45	; 0x2d
    7c6c:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    7c70:	f000 fc79 	bl	8566 <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    7c74:	202c      	movs	r0, #44	; 0x2c
    7c76:	f241 5184 	movw	r1, #5508	; 0x1584
    7c7a:	f000 fc74 	bl	8566 <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    7c7e:	2005      	movs	r0, #5
    7c80:	2108      	movs	r1, #8
    7c82:	f000 fc70 	bl	8566 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    7c86:	2003      	movs	r0, #3
    7c88:	2129      	movs	r1, #41	; 0x29
    7c8a:	f000 fc6c 	bl	8566 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    7c8e:	f000 fd0b 	bl	86a8 <cc2400_status>
    7c92:	0641      	lsls	r1, r0, #25
    7c94:	d5fb      	bpl.n	7c8e <cc2400_repeater+0x4e>
		cc2400_strobe(SFSON);
    7c96:	2061      	movs	r0, #97	; 0x61
    7c98:	f000 fd0d 	bl	86b6 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    7c9c:	f000 fd04 	bl	86a8 <cc2400_status>
    7ca0:	0742      	lsls	r2, r0, #29
    7ca2:	d5fb      	bpl.n	7c9c <cc2400_repeater+0x5c>
		RXLED_SET;
		TXLED_CLR;
    7ca4:	4c41      	ldr	r4, [pc, #260]	; (7dac <cc2400_repeater+0x16c>)
		cc2400_set(FREND,   0x0008); // minimum tx power
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		while (!(cc2400_status() & FS_LOCK));
		RXLED_SET;
    7ca6:	4e42      	ldr	r6, [pc, #264]	; (7db0 <cc2400_repeater+0x170>)
    7ca8:	46a1      	mov	r9, r4
    7caa:	4637      	mov	r7, r6
    7cac:	2310      	movs	r3, #16
    7cae:	6033      	str	r3, [r6, #0]
		TXLED_CLR;
    7cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
    7cb4:	6023      	str	r3, [r4, #0]
		USRLED_CLR;
    7cb6:	2302      	movs	r3, #2
    7cb8:	6023      	str	r3, [r4, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    7cba:	4b3e      	ldr	r3, [pc, #248]	; (7db4 <cc2400_repeater+0x174>)
    7cbc:	2280      	movs	r2, #128	; 0x80
    7cbe:	601a      	str	r2, [r3, #0]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7cc0:	200e      	movs	r0, #14
    7cc2:	f000 fc47 	bl	8554 <cc2400_get>
    7cc6:	f000 001f 	and.w	r0, r0, #31
    7cca:	280f      	cmp	r0, #15
    7ccc:	d1f8      	bne.n	7cc0 <cc2400_repeater+0x80>
			USRLED_CLR;
    7cce:	2302      	movs	r3, #2
    7cd0:	f8c9 3000 	str.w	r3, [r9]
			cc2400_strobe(SRX);
    7cd4:	2062      	movs	r0, #98	; 0x62
    7cd6:	f000 fcee 	bl	86b6 <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    7cda:	f000 fce5 	bl	86a8 <cc2400_status>
    7cde:	06c3      	lsls	r3, r0, #27
    7ce0:	d5fb      	bpl.n	7cda <cc2400_repeater+0x9a>
			USRLED_SET;
    7ce2:	2302      	movs	r3, #2
    7ce4:	603b      	str	r3, [r7, #0]
			for (i = 0; i < len; i++)
    7ce6:	2500      	movs	r5, #0
				buf[i] = cc2400_get8(FIFOREG);
    7ce8:	2070      	movs	r0, #112	; 0x70
    7cea:	f000 fc41 	bl	8570 <cc2400_get8>
    7cee:	f80d 0005 	strb.w	r0, [sp, r5]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
    7cf2:	3501      	adds	r5, #1
    7cf4:	2d16      	cmp	r5, #22
    7cf6:	d1f7      	bne.n	7ce8 <cc2400_repeater+0xa8>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
    7cf8:	f000 fcd6 	bl	86a8 <cc2400_status>
    7cfc:	0705      	lsls	r5, r0, #28
    7cfe:	d5df      	bpl.n	7cc0 <cc2400_repeater+0x80>
				break;
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
		USRLED_CLR;
    7d00:	2302      	movs	r3, #2
    7d02:	6023      	str	r3, [r4, #0]
		RXLED_CLR;
    7d04:	2310      	movs	r3, #16
    7d06:	6023      	str	r3, [r4, #0]
		cc2400_strobe(SRFOFF);
    7d08:	2064      	movs	r0, #100	; 0x64
    7d0a:	f000 fcd4 	bl	86b6 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    7d0e:	f000 fccb 	bl	86a8 <cc2400_status>
    7d12:	0740      	lsls	r0, r0, #29
    7d14:	d4fb      	bmi.n	7d0e <cc2400_repeater+0xce>
		while (!(cc2400_status() & XOSC16M_STABLE));
    7d16:	f000 fcc7 	bl	86a8 <cc2400_status>
    7d1a:	0641      	lsls	r1, r0, #25
    7d1c:	d5fb      	bpl.n	7d16 <cc2400_repeater+0xd6>
		cc2400_set(FSDIV, *chan_ptr);
    7d1e:	f8b8 1000 	ldrh.w	r1, [r8]
    7d22:	2002      	movs	r0, #2
    7d24:	b289      	uxth	r1, r1
    7d26:	f000 fc1e 	bl	8566 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    7d2a:	f000 fcbd 	bl	86a8 <cc2400_status>
    7d2e:	0642      	lsls	r2, r0, #25
    7d30:	d5fb      	bpl.n	7d2a <cc2400_repeater+0xea>
		cc2400_strobe(SFSON);
    7d32:	2061      	movs	r0, #97	; 0x61
    7d34:	f000 fcbf 	bl	86b6 <cc2400_strobe>
		TXLED_SET;
    7d38:	f44f 7380 	mov.w	r3, #256	; 0x100
    7d3c:	6033      	str	r3, [r6, #0]
		buf[0] = len - 1; // length of data (rest of payload)
    7d3e:	2315      	movs	r3, #21
    7d40:	f88d 3000 	strb.w	r3, [sp]
		buf[1] = 1; // reply
    7d44:	2301      	movs	r3, #1
    7d46:	f88d 3001 	strb.w	r3, [sp, #1]
    7d4a:	2500      	movs	r5, #0
    7d4c:	b2ee      	uxtb	r6, r5
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
    7d4e:	f046 0108 	orr.w	r1, r6, #8
    7d52:	2005      	movs	r0, #5
    7d54:	f000 fc07 	bl	8566 <cc2400_set>
			buf[20] = pa;
    7d58:	f88d 6014 	strb.w	r6, [sp, #20]
			for (i = 0; i < 16; i++) {
    7d5c:	2600      	movs	r6, #0
				buf[21] = i;
    7d5e:	f88d 6015 	strb.w	r6, [sp, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7d62:	200e      	movs	r0, #14
    7d64:	f000 fbf6 	bl	8554 <cc2400_get>
    7d68:	f000 001f 	and.w	r0, r0, #31
    7d6c:	280f      	cmp	r0, #15
    7d6e:	d1f8      	bne.n	7d62 <cc2400_repeater+0x122>
    7d70:	2700      	movs	r7, #0
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
    7d72:	f81d 1007 	ldrb.w	r1, [sp, r7]
    7d76:	2070      	movs	r0, #112	; 0x70
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
    7d78:	3701      	adds	r7, #1
					cc2400_set8(FIFOREG, buf[j]);
    7d7a:	f000 fc02 	bl	8582 <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
    7d7e:	2f16      	cmp	r7, #22
    7d80:	d1f7      	bne.n	7d72 <cc2400_repeater+0x132>
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    7d82:	2063      	movs	r0, #99	; 0x63
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    7d84:	3601      	adds	r6, #1
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    7d86:	f000 fc96 	bl	86b6 <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    7d8a:	2e10      	cmp	r6, #16
    7d8c:	d1e7      	bne.n	7d5e <cc2400_repeater+0x11e>
    7d8e:	3501      	adds	r5, #1
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    7d90:	2d08      	cmp	r5, #8
    7d92:	d1db      	bne.n	7d4c <cc2400_repeater+0x10c>
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
    7d94:	f44f 7380 	mov.w	r3, #256	; 0x100
    7d98:	6023      	str	r3, [r4, #0]
		cc2400_strobe(SRFOFF);
    7d9a:	2064      	movs	r0, #100	; 0x64
    7d9c:	f000 fc8b 	bl	86b6 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    7da0:	f000 fc82 	bl	86a8 <cc2400_status>
    7da4:	0743      	lsls	r3, r0, #29
    7da6:	d4fb      	bmi.n	7da0 <cc2400_repeater+0x160>
    7da8:	e74e      	b.n	7c48 <cc2400_repeater+0x8>
    7daa:	bf00      	nop
    7dac:	2009c03c 	.word	0x2009c03c
    7db0:	2009c038 	.word	0x2009c038
    7db4:	2009c058 	.word	0x2009c058

00007db8 <cc2400_txtest>:
	}
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    7db8:	b538      	push	{r3, r4, r5, lr}
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    7dba:	7803      	ldrb	r3, [r0, #0]
	}
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    7dbc:	460d      	mov	r5, r1
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    7dbe:	b123      	cbz	r3, 7dca <cc2400_txtest+0x12>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    7dc0:	7803      	ldrb	r3, [r0, #0]
    7dc2:	2b01      	cmp	r3, #1
    7dc4:	d12f      	bne.n	7e26 <cc2400_txtest+0x6e>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    7dc6:	2440      	movs	r4, #64	; 0x40
    7dc8:	e000      	b.n	7dcc <cc2400_txtest+0x14>
void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    7dca:	2429      	movs	r4, #41	; 0x29
		mdmctrl = 0x0040; // 250 kHz frequency deviation
	} else {
		/* oops */
		return;
	}
	cc2400_set(LMTST,   0x2b22);
    7dcc:	2012      	movs	r0, #18
    7dce:	f642 3122 	movw	r1, #11042	; 0x2b22
    7dd2:	f000 fbc8 	bl	8566 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    7dd6:	2014      	movs	r0, #20
    7dd8:	f243 314b 	movw	r1, #13131	; 0x334b
    7ddc:	f000 fbc3 	bl	8566 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    7de0:	2020      	movs	r0, #32
    7de2:	f640 51f1 	movw	r1, #3569	; 0xdf1
    7de6:	f000 fbbe 	bl	8566 <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    7dea:	8829      	ldrh	r1, [r5, #0]
    7dec:	2002      	movs	r0, #2
    7dee:	b289      	uxth	r1, r1
    7df0:	f000 fbb9 	bl	8566 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    7df4:	2003      	movs	r0, #3
    7df6:	4621      	mov	r1, r4
    7df8:	f000 fbb5 	bl	8566 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7dfc:	f000 fc54 	bl	86a8 <cc2400_status>
    7e00:	0642      	lsls	r2, r0, #25
    7e02:	d5fb      	bpl.n	7dfc <cc2400_txtest+0x44>
	cc2400_strobe(SFSON);
    7e04:	2061      	movs	r0, #97	; 0x61
    7e06:	f000 fc56 	bl	86b6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7e0a:	f000 fc4d 	bl	86a8 <cc2400_status>
    7e0e:	0743      	lsls	r3, r0, #29
    7e10:	d5fb      	bpl.n	7e0a <cc2400_txtest+0x52>
	TXLED_SET;
    7e12:	4b05      	ldr	r3, [pc, #20]	; (7e28 <cc2400_txtest+0x70>)
    7e14:	f44f 7280 	mov.w	r2, #256	; 0x100
    7e18:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    7e1a:	2063      	movs	r0, #99	; 0x63
    7e1c:	f000 fc4b 	bl	86b6 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7e20:	4b02      	ldr	r3, [pc, #8]	; (7e2c <cc2400_txtest+0x74>)
    7e22:	2280      	movs	r2, #128	; 0x80
    7e24:	601a      	str	r2, [r3, #0]
    7e26:	bd38      	pop	{r3, r4, r5, pc}
    7e28:	2009c038 	.word	0x2009c038
    7e2c:	2009c058 	.word	0x2009c058

00007e30 <ssp_stop>:
	DIO_SSEL_CLR;
}

static void ssp_stop() {
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    7e30:	4b04      	ldr	r3, [pc, #16]	; (7e44 <ssp_stop+0x14>)
    7e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7e36:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    7e38:	4a03      	ldr	r2, [pc, #12]	; (7e48 <ssp_stop+0x18>)
    7e3a:	6813      	ldr	r3, [r2, #0]
    7e3c:	f023 0302 	bic.w	r3, r3, #2
    7e40:	6013      	str	r3, [r2, #0]
    7e42:	4770      	bx	lr
    7e44:	2009c098 	.word	0x2009c098
    7e48:	40030004 	.word	0x40030004

00007e4c <do_rx>:
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);

	cc2400_strobe(SRX);
}

static void do_rx(ego_packet_t *packet) {
    7e4c:	1e43      	subs	r3, r0, #1
    7e4e:	3023      	adds	r0, #35	; 0x23
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    7e50:	4a05      	ldr	r2, [pc, #20]	; (7e68 <do_rx+0x1c>)
    7e52:	6812      	ldr	r2, [r2, #0]
    7e54:	0752      	lsls	r2, r2, #29
    7e56:	d5fb      	bpl.n	7e50 <do_rx+0x4>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    7e58:	4a04      	ldr	r2, [pc, #16]	; (7e6c <do_rx+0x20>)
    7e5a:	6812      	ldr	r2, [r2, #0]
    7e5c:	f803 2f01 	strb.w	r2, [r3, #1]!
	cc2400_strobe(SRX);
}

static void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    7e60:	4283      	cmp	r3, r0
    7e62:	d1f5      	bne.n	7e50 <do_rx+0x4>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}
    7e64:	4770      	bx	lr
    7e66:	bf00      	nop
    7e68:	4003000c 	.word	0x4003000c
    7e6c:	40030008 	.word	0x40030008

00007e70 <sleep_ms>:
static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
}

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    7e70:	b510      	push	{r4, lr}
	state->sleep_start = CLK100NS;
    7e72:	f640 4435 	movw	r4, #3125	; 0xc35
    7e76:	4b07      	ldr	r3, [pc, #28]	; (7e94 <sleep_ms+0x24>)
    7e78:	681a      	ldr	r2, [r3, #0]
    7e7a:	4b07      	ldr	r3, [pc, #28]	; (7e98 <sleep_ms+0x28>)
    7e7c:	f3c2 0213 	ubfx	r2, r2, #0, #20
    7e80:	681b      	ldr	r3, [r3, #0]
    7e82:	fb04 3302 	mla	r3, r4, r2, r3
    7e86:	6083      	str	r3, [r0, #8]
	state->sleep_duration = duration * 1000*10;
    7e88:	f242 7310 	movw	r3, #10000	; 0x2710
    7e8c:	4359      	muls	r1, r3
    7e8e:	60c1      	str	r1, [r0, #12]
    7e90:	bd10      	pop	{r4, pc}
    7e92:	bf00      	nop
    7e94:	10000bc4 	.word	0x10000bc4
    7e98:	40004008 	.word	0x40004008

00007e9c <sleep_elapsed>:
	state->sleep_start = state->anchor;
	state->sleep_duration = duration * 1000*10;
}

static inline int sleep_elapsed(ego_fsm_state_t *state) {
	u32 now = CLK100NS;
    7e9c:	f640 4135 	movw	r1, #3125	; 0xc35
    7ea0:	4b0a      	ldr	r3, [pc, #40]	; (7ecc <sleep_elapsed+0x30>)
    7ea2:	681a      	ldr	r2, [r3, #0]
    7ea4:	4b0a      	ldr	r3, [pc, #40]	; (7ed0 <sleep_elapsed+0x34>)
    7ea6:	f3c2 0213 	ubfx	r2, r2, #0, #20
    7eaa:	681b      	ldr	r3, [r3, #0]
    7eac:	fb01 3302 	mla	r3, r1, r2, r3
	if (now < state->sleep_start)
    7eb0:	6882      	ldr	r2, [r0, #8]
		now += 3276800000;
	return (now - state->sleep_start) >= state->sleep_duration;
    7eb2:	68c0      	ldr	r0, [r0, #12]
	state->sleep_duration = duration * 1000*10;
}

static inline int sleep_elapsed(ego_fsm_state_t *state) {
	u32 now = CLK100NS;
	if (now < state->sleep_start)
    7eb4:	4293      	cmp	r3, r2
		now += 3276800000;
    7eb6:	bf3c      	itt	cc
    7eb8:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    7ebc:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
	return (now - state->sleep_start) >= state->sleep_duration;
    7ec0:	1a9b      	subs	r3, r3, r2
}
    7ec2:	4283      	cmp	r3, r0
    7ec4:	bf34      	ite	cc
    7ec6:	2000      	movcc	r0, #0
    7ec8:	2001      	movcs	r0, #1
    7eca:	4770      	bx	lr
    7ecc:	10000bc4 	.word	0x10000bc4
    7ed0:	40004008 	.word	0x40004008

00007ed4 <nop_state>:

/////////////
// states

// do nothing
static void nop_state(ego_fsm_state_t *state) {
    7ed4:	4770      	bx	lr
    7ed6:	0000      	movs	r0, r0

00007ed8 <init_state>:
}

// used in follow and jam mode, override the channel supplied by user
static void init_state(ego_fsm_state_t *state) {
	state->channel_index = 0;
	channel = channels[state->channel_index];
    7ed8:	f640 1268 	movw	r2, #2408	; 0x968
static void nop_state(ego_fsm_state_t *state) {
}

// used in follow and jam mode, override the channel supplied by user
static void init_state(ego_fsm_state_t *state) {
	state->channel_index = 0;
    7edc:	2300      	movs	r3, #0
    7ede:	6043      	str	r3, [r0, #4]
	channel = channels[state->channel_index];
    7ee0:	4b02      	ldr	r3, [pc, #8]	; (7eec <init_state+0x14>)
    7ee2:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    7ee4:	2301      	movs	r3, #1
    7ee6:	7003      	strb	r3, [r0, #0]
    7ee8:	4770      	bx	lr
    7eea:	bf00      	nop
    7eec:	10000448 	.word	0x10000448

00007ef0 <continuous_init_state>:
	}
}

// continuous cap states (reuses START_RX state)
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
    7ef0:	2301      	movs	r3, #1
    7ef2:	7003      	strb	r3, [r0, #0]
    7ef4:	4770      	bx	lr
    7ef6:	0000      	movs	r0, r0

00007ef8 <start_rf_state>:
	state->channel_index = 0;
	channel = channels[state->channel_index];
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
    7ef8:	b510      	push	{r4, lr}
	ssp_stop(); // TODO disable SSP
	ICER0 = ICER0_ICE_USB;
}

static void rf_on(void) {
	cc2400_set(MANAND,  0x7fff);
    7efa:	f647 71ff 	movw	r1, #32767	; 0x7fff
	state->channel_index = 0;
	channel = channels[state->channel_index];
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
    7efe:	4604      	mov	r4, r0
	ssp_stop(); // TODO disable SSP
	ICER0 = ICER0_ICE_USB;
}

static void rf_on(void) {
	cc2400_set(MANAND,  0x7fff);
    7f00:	200d      	movs	r0, #13
    7f02:	f000 fb30 	bl	8566 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    7f06:	2012      	movs	r0, #18
    7f08:	f642 3122 	movw	r1, #11042	; 0x2b22
    7f0c:	f000 fb2b 	bl	8566 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7f10:	2014      	movs	r0, #20
    7f12:	f241 314b 	movw	r1, #4939	; 0x134b
    7f16:	f000 fb26 	bl	8566 <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    7f1a:	2020      	movs	r0, #32
    7f1c:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    7f20:	f000 fb21 	bl	8566 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    7f24:	4b1d      	ldr	r3, [pc, #116]	; (7f9c <start_rf_state+0xa4>)
    7f26:	2002      	movs	r0, #2
    7f28:	8819      	ldrh	r1, [r3, #0]
    7f2a:	3901      	subs	r1, #1
    7f2c:	b289      	uxth	r1, r1
    7f2e:	f000 fb1a 	bl	8566 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    7f32:	2003      	movs	r0, #3
    7f34:	2126      	movs	r1, #38	; 0x26
    7f36:	f000 fb16 	bl	8566 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    7f3a:	2021      	movs	r0, #33	; 0x21
    7f3c:	2103      	movs	r1, #3
    7f3e:	f000 fb12 	bl	8566 <cc2400_set>

    // 630f9ffe86
	cc2400_set(SYNCH,   0x630f);
    7f42:	202d      	movs	r0, #45	; 0x2d
    7f44:	f246 310f 	movw	r1, #25359	; 0x630f
    7f48:	f000 fb0d 	bl	8566 <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    7f4c:	202c      	movs	r0, #44	; 0x2c
    7f4e:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    7f52:	f000 fb08 	bl	8566 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7f56:	f000 fba7 	bl	86a8 <cc2400_status>
    7f5a:	0642      	lsls	r2, r0, #25
    7f5c:	d5fb      	bpl.n	7f56 <start_rf_state+0x5e>
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    7f5e:	4b10      	ldr	r3, [pc, #64]	; (7fa0 <start_rf_state+0xa8>)
    7f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    7f64:	490f      	ldr	r1, [pc, #60]	; (7fa4 <start_rf_state+0xac>)
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    7f66:	601a      	str	r2, [r3, #0]

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    7f68:	680b      	ldr	r3, [r1, #0]

	while (!(cc2400_status() & XOSC16M_STABLE));

	ssp_start();

	cc2400_strobe(SFSON);
    7f6a:	2061      	movs	r0, #97	; 0x61
static void ssp_start(void) {
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    7f6c:	f043 0302 	orr.w	r3, r3, #2
    7f70:	600b      	str	r3, [r1, #0]

	// activate slave select pin
	DIO_SSEL_CLR;
    7f72:	4b0d      	ldr	r3, [pc, #52]	; (7fa8 <start_rf_state+0xb0>)
    7f74:	601a      	str	r2, [r3, #0]

	while (!(cc2400_status() & XOSC16M_STABLE));

	ssp_start();

	cc2400_strobe(SFSON);
    7f76:	f000 fb9e 	bl	86b6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7f7a:	f000 fb95 	bl	86a8 <cc2400_status>
    7f7e:	0743      	lsls	r3, r0, #29
    7f80:	d5fb      	bpl.n	7f7a <start_rf_state+0x82>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    7f82:	200e      	movs	r0, #14
    7f84:	f000 fae6 	bl	8554 <cc2400_get>
    7f88:	f000 001f 	and.w	r0, r0, #31
    7f8c:	280f      	cmp	r0, #15
    7f8e:	d1f8      	bne.n	7f82 <start_rf_state+0x8a>

	cc2400_strobe(SRX);
    7f90:	2062      	movs	r0, #98	; 0x62
    7f92:	f000 fb90 	bl	86b6 <cc2400_strobe>
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
    7f96:	2302      	movs	r3, #2
    7f98:	7023      	strb	r3, [r4, #0]
    7f9a:	bd10      	pop	{r4, pc}
    7f9c:	10000448 	.word	0x10000448
    7fa0:	2009c098 	.word	0x2009c098
    7fa4:	40030004 	.word	0x40030004
    7fa8:	2009c09c 	.word	0x2009c09c

00007fac <start_jamming_state>:
		cc2400_strobe(SRFOFF);
		ssp_stop();
	}
}

static void start_jamming_state(ego_fsm_state_t *state) {
    7fac:	b510      	push	{r4, lr}
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    7fae:	f647 71ff 	movw	r1, #32767	; 0x7fff
		cc2400_strobe(SRFOFF);
		ssp_stop();
	}
}

static void start_jamming_state(ego_fsm_state_t *state) {
    7fb2:	4604      	mov	r4, r0
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    7fb4:	200d      	movs	r0, #13
    7fb6:	f000 fad6 	bl	8566 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    7fba:	2012      	movs	r0, #18
    7fbc:	f642 3122 	movw	r1, #11042	; 0x2b22
    7fc0:	f000 fad1 	bl	8566 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    7fc4:	2014      	movs	r0, #20
    7fc6:	f243 314b 	movw	r1, #13131	; 0x334b
    7fca:	f000 facc 	bl	8566 <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    7fce:	2020      	movs	r0, #32
    7fd0:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    7fd4:	f000 fac7 	bl	8566 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    7fd8:	4b1a      	ldr	r3, [pc, #104]	; (8044 <start_jamming_state+0x98>)
    7fda:	2002      	movs	r0, #2
    7fdc:	8819      	ldrh	r1, [r3, #0]
    7fde:	b289      	uxth	r1, r1
    7fe0:	f000 fac1 	bl	8566 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    7fe4:	2003      	movs	r0, #3
    7fe6:	2126      	movs	r1, #38	; 0x26
    7fe8:	f000 fabd 	bl	8566 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    7fec:	2021      	movs	r0, #33	; 0x21
    7fee:	2103      	movs	r1, #3
    7ff0:	f000 fab9 	bl	8566 <cc2400_set>
	cc2400_set(FREND, 0xf);
    7ff4:	2005      	movs	r0, #5
    7ff6:	210f      	movs	r1, #15
    7ff8:	f000 fab5 	bl	8566 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7ffc:	f000 fb54 	bl	86a8 <cc2400_status>
    8000:	0642      	lsls	r2, r0, #25
    8002:	d5fb      	bpl.n	7ffc <start_jamming_state+0x50>

	cc2400_strobe(SFSON);
    8004:	2061      	movs	r0, #97	; 0x61
    8006:	f000 fb56 	bl	86b6 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    800a:	f000 fb4d 	bl	86a8 <cc2400_status>
    800e:	0743      	lsls	r3, r0, #29
    8010:	d5fb      	bpl.n	800a <start_jamming_state+0x5e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8012:	200e      	movs	r0, #14
    8014:	f000 fa9e 	bl	8554 <cc2400_get>
    8018:	f000 001f 	and.w	r0, r0, #31
    801c:	280f      	cmp	r0, #15
    801e:	d1f8      	bne.n	8012 <start_jamming_state+0x66>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8020:	4b09      	ldr	r3, [pc, #36]	; (8048 <start_jamming_state+0x9c>)
    8022:	2280      	movs	r2, #128	; 0x80
    8024:	601a      	str	r2, [r3, #0]
#endif

	cc2400_strobe(STX);
    8026:	2063      	movs	r0, #99	; 0x63
    8028:	f000 fb45 	bl	86b6 <cc2400_strobe>
	TXLED_SET;
    802c:	4b07      	ldr	r3, [pc, #28]	; (804c <start_jamming_state+0xa0>)
    802e:	f44f 7280 	mov.w	r2, #256	; 0x100
    8032:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    8034:	2305      	movs	r3, #5
    8036:	7023      	strb	r3, [r4, #0]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    8038:	69a3      	ldr	r3, [r4, #24]
    803a:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    803c:	f644 6320 	movw	r3, #20000	; 0x4e20
    8040:	60e3      	str	r3, [r4, #12]
    8042:	bd10      	pop	{r4, pc}
    8044:	10000448 	.word	0x10000448
    8048:	2009c058 	.word	0x2009c058
    804c:	2009c038 	.word	0x2009c038

00008050 <sleep_state>:
		ssp_stop();
		state->timer_active = 1;
	}
}

static void sleep_state(ego_fsm_state_t *state) {
    8050:	b510      	push	{r4, lr}
    8052:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    8054:	f7ff ff22 	bl	7e9c <sleep_elapsed>
    8058:	b1c0      	cbz	r0, 808c <sleep_state+0x3c>
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    805a:	6863      	ldr	r3, [r4, #4]
		channel = channels[state->channel_index];

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    805c:	4620      	mov	r0, r4
}

static void sleep_state(ego_fsm_state_t *state) {
	if (sleep_elapsed(state)) {
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    805e:	1c5a      	adds	r2, r3, #1
    8060:	4b0b      	ldr	r3, [pc, #44]	; (8090 <sleep_state+0x40>)
		channel = channels[state->channel_index];

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    8062:	2107      	movs	r1, #7
}

static void sleep_state(ego_fsm_state_t *state) {
	if (sleep_elapsed(state)) {
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    8064:	4013      	ands	r3, r2
    8066:	2b00      	cmp	r3, #0
    8068:	bfbc      	itt	lt
    806a:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
    806e:	f063 0303 	ornlt	r3, r3, #3
		channel = channels[state->channel_index];
    8072:	4a08      	ldr	r2, [pc, #32]	; (8094 <sleep_state+0x44>)
}

static void sleep_state(ego_fsm_state_t *state) {
	if (sleep_elapsed(state)) {
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    8074:	bfb8      	it	lt
    8076:	3301      	addlt	r3, #1
		channel = channels[state->channel_index];
    8078:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
}

static void sleep_state(ego_fsm_state_t *state) {
	if (sleep_elapsed(state)) {
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    807c:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    807e:	4b06      	ldr	r3, [pc, #24]	; (8098 <sleep_state+0x48>)
    8080:	801a      	strh	r2, [r3, #0]

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    8082:	f7ff fef5 	bl	7e70 <sleep_ms>
		state->timer_active = 1;
    8086:	2301      	movs	r3, #1
    8088:	6123      	str	r3, [r4, #16]

		state->state = EGO_ST_START_RX;
    808a:	7023      	strb	r3, [r4, #0]
    808c:	bd10      	pop	{r4, pc}
    808e:	bf00      	nop
    8090:	80000003 	.word	0x80000003
    8094:	00009b5c 	.word	0x00009b5c
    8098:	10000448 	.word	0x10000448

0000809c <jam_sleep_state>:
		state->state = EGO_ST_SLEEP;
		sleep_ms_anchor(state, 6);
	}
}

static void jam_sleep_state(ego_fsm_state_t *state) {
    809c:	b510      	push	{r4, lr}
    809e:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    80a0:	f7ff fefc 	bl	7e9c <sleep_elapsed>
    80a4:	b130      	cbz	r0, 80b4 <jam_sleep_state+0x18>
		state->state = EGO_ST_START_RX;
    80a6:	2301      	movs	r3, #1
    80a8:	7023      	strb	r3, [r4, #0]
		state->timer_active = 1;
    80aa:	6123      	str	r3, [r4, #16]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    80ac:	69a3      	ldr	r3, [r4, #24]
    80ae:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    80b0:	4b01      	ldr	r3, [pc, #4]	; (80b8 <jam_sleep_state+0x1c>)
    80b2:	60e3      	str	r3, [r4, #12]
    80b4:	bd10      	pop	{r4, pc}
    80b6:	bf00      	nop
    80b8:	0001adb0 	.word	0x0001adb0

000080bc <jamming_state>:

	state->state = EGO_ST_JAMMING;
	sleep_ms_anchor(state, 2);
}

void jamming_state(ego_fsm_state_t *state) {
    80bc:	b510      	push	{r4, lr}
    80be:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    80c0:	f7ff feec 	bl	7e9c <sleep_elapsed>
    80c4:	b310      	cbz	r0, 810c <jamming_state+0x50>
		cc2400_strobe(SRFOFF);
    80c6:	2064      	movs	r0, #100	; 0x64
    80c8:	f000 faf5 	bl	86b6 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
		PAEN_CLR;
    80cc:	4b10      	ldr	r3, [pc, #64]	; (8110 <jamming_state+0x54>)
    80ce:	2280      	movs	r2, #128	; 0x80
    80d0:	601a      	str	r2, [r3, #0]
#endif
		TXLED_CLR;
    80d2:	f44f 7280 	mov.w	r2, #256	; 0x100
    80d6:	f843 2c20 	str.w	r2, [r3, #-32]

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    80da:	6863      	ldr	r3, [r4, #4]
    80dc:	1c5a      	adds	r2, r3, #1
    80de:	4b0d      	ldr	r3, [pc, #52]	; (8114 <jamming_state+0x58>)
    80e0:	4013      	ands	r3, r2
    80e2:	2b00      	cmp	r3, #0
    80e4:	bfbc      	itt	lt
    80e6:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
    80ea:	f063 0303 	ornlt	r3, r3, #3
		channel = channels[state->channel_index];
    80ee:	4a0a      	ldr	r2, [pc, #40]	; (8118 <jamming_state+0x5c>)
		PAEN_CLR;
#endif
		TXLED_CLR;

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    80f0:	bfb8      	it	lt
    80f2:	3301      	addlt	r3, #1
		channel = channels[state->channel_index];
    80f4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		PAEN_CLR;
#endif
		TXLED_CLR;

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    80f8:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    80fa:	4b08      	ldr	r3, [pc, #32]	; (811c <jamming_state+0x60>)
    80fc:	801a      	strh	r2, [r3, #0]

		state->state = EGO_ST_SLEEP;
    80fe:	2303      	movs	r3, #3
    8100:	7023      	strb	r3, [r4, #0]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    8102:	69a3      	ldr	r3, [r4, #24]
    8104:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    8106:	f64e 2360 	movw	r3, #60000	; 0xea60
    810a:	60e3      	str	r3, [r4, #12]
    810c:	bd10      	pop	{r4, pc}
    810e:	bf00      	nop
    8110:	2009c05c 	.word	0x2009c05c
    8114:	80000003 	.word	0x80000003
    8118:	00009b5c 	.word	0x00009b5c
    811c:	10000448 	.word	0x10000448

00008120 <continuous_cap_state>:
// continuous cap states (reuses START_RX state)
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

static void continuous_cap_state(ego_fsm_state_t *state) {
    8120:	b510      	push	{r4, lr}
    8122:	b08a      	sub	sp, #40	; 0x28
	ego_packet_t packet = {
    8124:	2100      	movs	r1, #0
    8126:	2228      	movs	r2, #40	; 0x28
    8128:	4668      	mov	r0, sp
    812a:	f7fc f825 	bl	4178 <memset>
		.rxtime = CLK100NS,
    812e:	f640 4135 	movw	r1, #3125	; 0xc35
    8132:	4b16      	ldr	r3, [pc, #88]	; (818c <continuous_cap_state+0x6c>)
    8134:	681a      	ldr	r2, [r3, #0]
    8136:	4b16      	ldr	r3, [pc, #88]	; (8190 <continuous_cap_state+0x70>)
    8138:	f3c2 0213 	ubfx	r2, r2, #0, #20
    813c:	681b      	ldr	r3, [r3, #0]
    813e:	fb01 3302 	mla	r3, r1, r2, r3
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

static void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    8142:	9309      	str	r3, [sp, #36]	; 0x24
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    8144:	f000 fab0 	bl	86a8 <cc2400_status>
static void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
		.rxtime = CLK100NS,
	};

	if (sync_received()) {
    8148:	06c2      	lsls	r2, r0, #27
    814a:	d51d      	bpl.n	8188 <continuous_cap_state+0x68>
		RXLED_SET;
    814c:	4b11      	ldr	r3, [pc, #68]	; (8194 <continuous_cap_state+0x74>)
    814e:	2410      	movs	r4, #16
    8150:	601c      	str	r4, [r3, #0]
		do_rx(&packet);
    8152:	4668      	mov	r0, sp
    8154:	f7ff fe7a 	bl	7e4c <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    8158:	2006      	movs	r0, #6
    815a:	4669      	mov	r1, sp
    815c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    815e:	f7fc ff6f 	bl	5040 <enqueue_with_ts>
		RXLED_CLR;
    8162:	4b0d      	ldr	r3, [pc, #52]	; (8198 <continuous_cap_state+0x78>)

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    8164:	2061      	movs	r0, #97	; 0x61

	if (sync_received()) {
		RXLED_SET;
		do_rx(&packet);
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
		RXLED_CLR;
    8166:	601c      	str	r4, [r3, #0]

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    8168:	f000 faa5 	bl	86b6 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    816c:	f000 fa9c 	bl	86a8 <cc2400_status>
    8170:	0743      	lsls	r3, r0, #29
    8172:	d5fb      	bpl.n	816c <continuous_cap_state+0x4c>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8174:	200e      	movs	r0, #14
    8176:	f000 f9ed 	bl	8554 <cc2400_get>
    817a:	f000 001f 	and.w	r0, r0, #31
    817e:	280f      	cmp	r0, #15
    8180:	d1f8      	bne.n	8174 <continuous_cap_state+0x54>
		cc2400_strobe(SRX);
    8182:	2062      	movs	r0, #98	; 0x62
    8184:	f000 fa97 	bl	86b6 <cc2400_strobe>
	}
}
    8188:	b00a      	add	sp, #40	; 0x28
    818a:	bd10      	pop	{r4, pc}
    818c:	10000bc4 	.word	0x10000bc4
    8190:	40004008 	.word	0x40004008
    8194:	2009c038 	.word	0x2009c038
    8198:	2009c03c 	.word	0x2009c03c

0000819c <jam_cap_state>:

// jammer states
static void jam_cap_state(ego_fsm_state_t *state) {
    819c:	b510      	push	{r4, lr}
    819e:	4604      	mov	r4, r0
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    81a0:	f000 fa82 	bl	86a8 <cc2400_status>
	}
}

// jammer states
static void jam_cap_state(ego_fsm_state_t *state) {
	if (sync_received()) {
    81a4:	06c3      	lsls	r3, r0, #27
    81a6:	d50e      	bpl.n	81c6 <jam_cap_state+0x2a>
		state->state = EGO_ST_START_JAMMING;
		state->packet_observed = 1;
		state->anchor = CLK100NS;
    81a8:	f640 4135 	movw	r1, #3125	; 0xc35
}

// jammer states
static void jam_cap_state(ego_fsm_state_t *state) {
	if (sync_received()) {
		state->state = EGO_ST_START_JAMMING;
    81ac:	2304      	movs	r3, #4
    81ae:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 1;
    81b0:	2301      	movs	r3, #1
    81b2:	6163      	str	r3, [r4, #20]
		state->anchor = CLK100NS;
    81b4:	4b10      	ldr	r3, [pc, #64]	; (81f8 <jam_cap_state+0x5c>)
    81b6:	681a      	ldr	r2, [r3, #0]
    81b8:	4b10      	ldr	r3, [pc, #64]	; (81fc <jam_cap_state+0x60>)
    81ba:	f3c2 0213 	ubfx	r2, r2, #0, #20
    81be:	681b      	ldr	r3, [r3, #0]
    81c0:	fb01 3302 	mla	r3, r1, r2, r3
    81c4:	61a3      	str	r3, [r4, #24]
	}
	if (state->timer_active && sleep_elapsed(state)) {
    81c6:	6923      	ldr	r3, [r4, #16]
    81c8:	b15b      	cbz	r3, 81e2 <jam_cap_state+0x46>
    81ca:	4620      	mov	r0, r4
    81cc:	f7ff fe66 	bl	7e9c <sleep_elapsed>
    81d0:	b138      	cbz	r0, 81e2 <jam_cap_state+0x46>
		state->state = EGO_ST_START_JAMMING;
    81d2:	2304      	movs	r3, #4
    81d4:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 0;
    81d6:	2300      	movs	r3, #0
    81d8:	6163      	str	r3, [r4, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    81da:	4620      	mov	r0, r4
    81dc:	210b      	movs	r1, #11
    81de:	f7ff fe47 	bl	7e70 <sleep_ms>
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
    81e2:	7823      	ldrb	r3, [r4, #0]
    81e4:	2b02      	cmp	r3, #2
    81e6:	d006      	beq.n	81f6 <jam_cap_state+0x5a>
		cc2400_strobe(SRFOFF);
    81e8:	2064      	movs	r0, #100	; 0x64
    81ea:	f000 fa64 	bl	86b6 <cc2400_strobe>
		ssp_stop();
	}
}
    81ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
		cc2400_strobe(SRFOFF);
		ssp_stop();
    81f2:	f7ff be1d 	b.w	7e30 <ssp_stop>
    81f6:	bd10      	pop	{r4, pc}
    81f8:	10000bc4 	.word	0x10000bc4
    81fc:	40004008 	.word	0x40004008

00008200 <cap_state>:
static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
    8200:	b530      	push	{r4, r5, lr}
    8202:	b08b      	sub	sp, #44	; 0x2c
	ego_packet_t packet = {
    8204:	2100      	movs	r1, #0
static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
    8206:	4604      	mov	r4, r0
	ego_packet_t packet = {
    8208:	2228      	movs	r2, #40	; 0x28
    820a:	4668      	mov	r0, sp
    820c:	f7fb ffb4 	bl	4178 <memset>
		.rxtime = CLK100NS,
    8210:	f640 4135 	movw	r1, #3125	; 0xc35
    8214:	4b1a      	ldr	r3, [pc, #104]	; (8280 <cap_state+0x80>)
	};

	if (sleep_elapsed(state)) {
    8216:	4620      	mov	r0, r4
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
		.rxtime = CLK100NS,
    8218:	681a      	ldr	r2, [r3, #0]
    821a:	4b1a      	ldr	r3, [pc, #104]	; (8284 <cap_state+0x84>)
    821c:	f3c2 0213 	ubfx	r2, r2, #0, #20
    8220:	681b      	ldr	r3, [r3, #0]
    8222:	fb01 3302 	mla	r3, r1, r2, r3
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    8226:	9309      	str	r3, [sp, #36]	; 0x24
		.rxtime = CLK100NS,
	};

	if (sleep_elapsed(state)) {
    8228:	f7ff fe38 	bl	7e9c <sleep_elapsed>
    822c:	b128      	cbz	r0, 823a <cap_state+0x3a>
		sleep_ms(state, 4);
    822e:	4620      	mov	r0, r4
    8230:	2104      	movs	r1, #4
    8232:	f7ff fe1d 	bl	7e70 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    8236:	2303      	movs	r3, #3
    8238:	7023      	strb	r3, [r4, #0]
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    823a:	f000 fa35 	bl	86a8 <cc2400_status>
	if (sleep_elapsed(state)) {
		sleep_ms(state, 4);
		state->state = EGO_ST_SLEEP;
	}

	if (sync_received()) {
    823e:	06c3      	lsls	r3, r0, #27
    8240:	d512      	bpl.n	8268 <cap_state+0x68>
		RXLED_SET;
    8242:	4b11      	ldr	r3, [pc, #68]	; (8288 <cap_state+0x88>)
    8244:	2510      	movs	r5, #16
    8246:	601d      	str	r5, [r3, #0]
		do_rx(&packet);
    8248:	4668      	mov	r0, sp
    824a:	f7ff fdff 	bl	7e4c <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    824e:	4669      	mov	r1, sp
    8250:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8252:	2006      	movs	r0, #6
    8254:	f7fc fef4 	bl	5040 <enqueue_with_ts>
		RXLED_CLR;
    8258:	4b0c      	ldr	r3, [pc, #48]	; (828c <cap_state+0x8c>)

		sleep_ms(state, 6);
    825a:	4620      	mov	r0, r4

	if (sync_received()) {
		RXLED_SET;
		do_rx(&packet);
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
		RXLED_CLR;
    825c:	601d      	str	r5, [r3, #0]

		sleep_ms(state, 6);
    825e:	2106      	movs	r1, #6
    8260:	f7ff fe06 	bl	7e70 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    8264:	2303      	movs	r3, #3
    8266:	7023      	strb	r3, [r4, #0]
	}

	// kill RF on state change
	if (state->state != EGO_ST_CAP) {
    8268:	7823      	ldrb	r3, [r4, #0]
    826a:	2b02      	cmp	r3, #2
    826c:	d006      	beq.n	827c <cap_state+0x7c>
		cc2400_strobe(SRFOFF);
    826e:	2064      	movs	r0, #100	; 0x64
    8270:	f000 fa21 	bl	86b6 <cc2400_strobe>
		ssp_stop();
    8274:	f7ff fddc 	bl	7e30 <ssp_stop>
		state->timer_active = 1;
    8278:	2301      	movs	r3, #1
    827a:	6123      	str	r3, [r4, #16]
	}
}
    827c:	b00b      	add	sp, #44	; 0x2c
    827e:	bd30      	pop	{r4, r5, pc}
    8280:	10000bc4 	.word	0x10000bc4
    8284:	40004008 	.word	0x40004008
    8288:	2009c038 	.word	0x2009c038
    828c:	2009c03c 	.word	0x2009c03c

00008290 <ego_main>:
		state->timer_active = 1;
		sleep_ms_anchor(state, 11);
	}
}

void ego_main(ego_mode_t mode) {
    8290:	b530      	push	{r4, r5, lr}
    8292:	b089      	sub	sp, #36	; 0x24
    8294:	4604      	mov	r4, r0
	const ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    8296:	2100      	movs	r1, #0
    8298:	a801      	add	r0, sp, #4
    829a:	221c      	movs	r2, #28
    829c:	f7fb ff6c 	bl	4178 <memset>
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    82a0:	2c01      	cmp	r4, #1
    82a2:	4d14      	ldr	r5, [pc, #80]	; (82f4 <ego_main+0x64>)
    82a4:	d005      	beq.n	82b2 <ego_main+0x22>
    82a6:	d306      	bcc.n	82b6 <ego_main+0x26>
    82a8:	2c02      	cmp	r4, #2
    82aa:	d006      	beq.n	82ba <ego_main+0x2a>
		case EGO_JAM:
			handler = jam_handler;
			break;
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    82ac:	2300      	movs	r3, #0
    82ae:	702b      	strb	r3, [r5, #0]
    82b0:	e01d      	b.n	82ee <ego_main+0x5e>
	switch (mode) {
		case EGO_FOLLOW:
			handler = follow_handler;
			break;
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
    82b2:	4c11      	ldr	r4, [pc, #68]	; (82f8 <ego_main+0x68>)
    82b4:	e002      	b.n	82bc <ego_main+0x2c>
		jamming_state,
	};

	switch (mode) {
		case EGO_FOLLOW:
			handler = follow_handler;
    82b6:	4c11      	ldr	r4, [pc, #68]	; (82fc <ego_main+0x6c>)
    82b8:	e000      	b.n	82bc <ego_main+0x2c>
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
			break;
#ifdef TX_ENABLE
		case EGO_JAM:
			handler = jam_handler;
    82ba:	4c11      	ldr	r4, [pc, #68]	; (8300 <ego_main+0x70>)
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
}

static void ego_init(void) {
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    82bc:	4b11      	ldr	r3, [pc, #68]	; (8304 <ego_main+0x74>)
    82be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    82c2:	601a      	str	r2, [r3, #0]

	dio_ssp_init();
    82c4:	f000 f8c0 	bl	8448 <dio_ssp_init>
	}

	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
    82c8:	782b      	ldrb	r3, [r5, #0]
    82ca:	2b0d      	cmp	r3, #13
    82cc:	d106      	bne.n	82dc <ego_main+0x4c>
			break;
		handler[state.state](&state);
    82ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
    82d2:	a801      	add	r0, sp, #4
    82d4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    82d8:	4798      	blx	r3
	}
    82da:	e7f5      	b.n	82c8 <ego_main+0x38>

	dio_ssp_init();
}

static void ego_deinit(void) {
	cc2400_strobe(SRFOFF);
    82dc:	2064      	movs	r0, #100	; 0x64
    82de:	f000 f9ea 	bl	86b6 <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    82e2:	f7ff fda5 	bl	7e30 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    82e6:	4b08      	ldr	r3, [pc, #32]	; (8308 <ego_main+0x78>)
    82e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    82ec:	601a      	str	r2, [r3, #0]
			break;
		handler[state.state](&state);
	}

	ego_deinit();
}
    82ee:	b009      	add	sp, #36	; 0x24
    82f0:	bd30      	pop	{r4, r5, pc}
    82f2:	bf00      	nop
    82f4:	10000a2e 	.word	0x10000a2e
    82f8:	00009b80 	.word	0x00009b80
    82fc:	00009b64 	.word	0x00009b64
    8300:	00009b98 	.word	0x00009b98
    8304:	e000e100 	.word	0xe000e100
    8308:	e000e180 	.word	0xe000e180

0000830c <USB_IRQHandler>:
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
	USBHwISR();
    830c:	f000 bce4 	b.w	8cd8 <USBHwISR>

00008310 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    8310:	b508      	push	{r3, lr}
    8312:	4a0d      	ldr	r2, [pc, #52]	; (8348 <Reset_Handler+0x38>)
    8314:	4b0d      	ldr	r3, [pc, #52]	; (834c <Reset_Handler+0x3c>)
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    8316:	490e      	ldr	r1, [pc, #56]	; (8350 <Reset_Handler+0x40>)
    8318:	428b      	cmp	r3, r1
    831a:	d204      	bcs.n	8326 <Reset_Handler+0x16>
	{
		*dest++ = *src++;
    831c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    8320:	f843 1b04 	str.w	r1, [r3], #4
    8324:	e7f7      	b.n	8316 <Reset_Handler+0x6>
    8326:	4b0b      	ldr	r3, [pc, #44]	; (8354 <Reset_Handler+0x44>)
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    8328:	4a0b      	ldr	r2, [pc, #44]	; (8358 <Reset_Handler+0x48>)
    832a:	4293      	cmp	r3, r2
    832c:	d203      	bcs.n	8336 <Reset_Handler+0x26>
	{
		*src++ = 0;
    832e:	2200      	movs	r2, #0
    8330:	f843 2b04 	str.w	r2, [r3], #4
    8334:	e7f8      	b.n	8328 <Reset_Handler+0x18>
	}

	__libc_init_array();
    8336:	f7fb fef7 	bl	4128 <__libc_init_array>

	// Set the vector table location.
	SCB_VTOR = (uint32_t)&_interrupt_vector_table;
    833a:	4b08      	ldr	r3, [pc, #32]	; (835c <Reset_Handler+0x4c>)
    833c:	4a08      	ldr	r2, [pc, #32]	; (8360 <Reset_Handler+0x50>)
    833e:	601a      	str	r2, [r3, #0]

	main();
    8340:	f7fe fdbc 	bl	6ebc <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    8344:	e7fe      	b.n	8344 <Reset_Handler+0x34>
    8346:	bf00      	nop
    8348:	00009bfc 	.word	0x00009bfc
    834c:	10000020 	.word	0x10000020
    8350:	100009fd 	.word	0x100009fd
    8354:	10000a00 	.word	0x10000a00
    8358:	10003354 	.word	0x10003354
    835c:	e000ed08 	.word	0xe000ed08
    8360:	00004000 	.word	0x00004000

00008364 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    8364:	e7fe      	b.n	8364 <ADC_IRQHandler>
    8366:	0000      	movs	r0, r0

00008368 <spi_delay>:
	cc2400_spi(16, out);
}

static volatile u32 delay_counter;
static void spi_delay() {
       delay_counter = 10;
    8368:	4b04      	ldr	r3, [pc, #16]	; (837c <spi_delay+0x14>)
    836a:	220a      	movs	r2, #10
    836c:	601a      	str	r2, [r3, #0]
       while (--delay_counter);
    836e:	681a      	ldr	r2, [r3, #0]
    8370:	3a01      	subs	r2, #1
    8372:	601a      	str	r2, [r3, #0]
    8374:	2a00      	cmp	r2, #0
    8376:	d1fa      	bne.n	836e <spi_delay+0x6>
}
    8378:	4770      	bx	lr
    837a:	bf00      	nop
    837c:	10000b04 	.word	0x10000b04

00008380 <rbit>:
}

/* efficiently reverse the bits of a 32-bit word */
u32 rbit(u32 value) {
  u32 result = 0;
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    8380:	fa90 f0a0 	rbit	r0, r0
  return result;
}
    8384:	4770      	bx	lr
    8386:	0000      	movs	r0, r0

00008388 <wait_us>:
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    8388:	0883      	lsrs	r3, r0, #2
    838a:	eb03 03d0 	add.w	r3, r3, r0, lsr #3
    838e:	eb03 1390 	add.w	r3, r3, r0, lsr #6
    8392:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
    8396:	eb03 2390 	add.w	r3, r3, r0, lsr #10
    839a:	eb03 20d0 	add.w	r0, r3, r0, lsr #11
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    839e:	4b04      	ldr	r3, [pc, #16]	; (83b0 <wait_us+0x28>)
    83a0:	6058      	str	r0, [r3, #4]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    83a2:	685a      	ldr	r2, [r3, #4]
    83a4:	3a01      	subs	r2, #1
    83a6:	605a      	str	r2, [r3, #4]
    83a8:	2a00      	cmp	r2, #0
    83aa:	d1fa      	bne.n	83a2 <wait_us+0x1a>
}
    83ac:	4770      	bx	lr
    83ae:	bf00      	nop
    83b0:	10000b04 	.word	0x10000b04

000083b4 <wait>:
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    83b4:	4b01      	ldr	r3, [pc, #4]	; (83bc <wait+0x8>)
    83b6:	4358      	muls	r0, r3
    83b8:	f7ff bfe6 	b.w	8388 <wait_us>
    83bc:	000f4240 	.word	0x000f4240

000083c0 <all_pins_off>:
}

void all_pins_off(void)
{
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    83c0:	4a10      	ldr	r2, [pc, #64]	; (8404 <all_pins_off+0x44>)
    83c2:	2300      	movs	r3, #0
    83c4:	6013      	str	r3, [r2, #0]
	PINSEL1 = 0;
    83c6:	6053      	str	r3, [r2, #4]
	PINSEL2 = 0;
    83c8:	6093      	str	r3, [r2, #8]
	PINSEL3 = 0;
    83ca:	60d3      	str	r3, [r2, #12]
	PINSEL4 = 0;
    83cc:	6113      	str	r3, [r2, #16]
	PINSEL7 = 0;
    83ce:	61d3      	str	r3, [r2, #28]
	PINSEL9 = 0;
    83d0:	6253      	str	r3, [r2, #36]	; 0x24
	PINSEL10 = 0;
    83d2:	6293      	str	r3, [r2, #40]	; 0x28

	/* configure all pins as inputs */
	FIO0DIR = 0;
    83d4:	4a0c      	ldr	r2, [pc, #48]	; (8408 <all_pins_off+0x48>)
    83d6:	6013      	str	r3, [r2, #0]
	FIO1DIR = 0;
    83d8:	6213      	str	r3, [r2, #32]
	FIO2DIR = 0;
    83da:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3DIR = 0;
    83dc:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = 0;
    83de:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/* pull-up on every pin */
	PINMODE0 = 0;
    83e2:	4a0a      	ldr	r2, [pc, #40]	; (840c <all_pins_off+0x4c>)
    83e4:	6013      	str	r3, [r2, #0]
	PINMODE1 = 0;
    83e6:	6053      	str	r3, [r2, #4]
	PINMODE2 = 0;
    83e8:	6093      	str	r3, [r2, #8]
	PINMODE3 = 0;
    83ea:	60d3      	str	r3, [r2, #12]
	PINMODE4 = 0;
    83ec:	6113      	str	r3, [r2, #16]
	PINMODE7 = 0;
    83ee:	61d3      	str	r3, [r2, #28]
	PINMODE9 = 0;
    83f0:	6253      	str	r3, [r2, #36]	; 0x24

	/* set all outputs low */
	FIO0PIN = 0;
    83f2:	4a07      	ldr	r2, [pc, #28]	; (8410 <all_pins_off+0x50>)
    83f4:	6013      	str	r3, [r2, #0]
	FIO1PIN = 0;
    83f6:	6213      	str	r3, [r2, #32]
	FIO2PIN = 0;
    83f8:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3PIN = 0;
    83fa:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4PIN = 0;
    83fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    8400:	4770      	bx	lr
    8402:	bf00      	nop
    8404:	4002c000 	.word	0x4002c000
    8408:	2009c000 	.word	0x2009c000
    840c:	4002c040 	.word	0x4002c040
    8410:	2009c014 	.word	0x2009c014

00008414 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    8414:	b508      	push	{r3, lr}
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    8416:	f7ff ffd3 	bl	83c0 <all_pins_off>
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    841a:	f24c 7112 	movw	r1, #50962	; 0xc712
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    841e:	4a09      	ldr	r2, [pc, #36]	; (8444 <gpio_init+0x30>)
    8420:	2300      	movs	r3, #0
    8422:	6013      	str	r3, [r2, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    8424:	6211      	str	r1, [r2, #32]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    8426:	f240 11b1 	movw	r1, #433	; 0x1b1
    842a:	6411      	str	r1, [r2, #64]	; 0x40
	FIO3DIR = 0;
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    842c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
	FIO3DIR = 0;
    8430:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    8432:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    8436:	6153      	str	r3, [r2, #20]
	FIO1PIN = 0;
    8438:	6353      	str	r3, [r2, #52]	; 0x34
	FIO2PIN = 0;
    843a:	6553      	str	r3, [r2, #84]	; 0x54
	FIO3PIN = 0;
    843c:	6753      	str	r3, [r2, #116]	; 0x74
	FIO4PIN = 0;
    843e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    8442:	bd08      	pop	{r3, pc}
    8444:	2009c000 	.word	0x2009c000

00008448 <dio_ssp_init>:
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    8448:	4b11      	ldr	r3, [pc, #68]	; (8490 <dio_ssp_init+0x48>)
    844a:	681a      	ldr	r2, [r3, #0]
    844c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
    8450:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    8454:	601a      	str	r2, [r3, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    8456:	681a      	ldr	r2, [r3, #0]
    8458:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    845c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    8460:	601a      	str	r2, [r3, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    8462:	681a      	ldr	r2, [r3, #0]
    8464:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    8468:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    846c:	601a      	str	r2, [r3, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    846e:	681a      	ldr	r2, [r3, #0]
    8470:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    8474:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    8478:	601a      	str	r2, [r3, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    847a:	4b06      	ldr	r3, [pc, #24]	; (8494 <dio_ssp_init+0x4c>)
    847c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8480:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    8482:	4b05      	ldr	r3, [pc, #20]	; (8498 <dio_ssp_init+0x50>)
    8484:	22c7      	movs	r2, #199	; 0xc7
    8486:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    8488:	220c      	movs	r2, #12
    848a:	605a      	str	r2, [r3, #4]
    848c:	4770      	bx	lr
    848e:	bf00      	nop
    8490:	4002c000 	.word	0x4002c000
    8494:	2009c098 	.word	0x2009c098
    8498:	40030000 	.word	0x40030000

0000849c <atest_init>:
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    849c:	4a09      	ldr	r2, [pc, #36]	; (84c4 <atest_init+0x28>)
    849e:	6813      	ldr	r3, [r2, #0]
    84a0:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    84a4:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    84a6:	4a08      	ldr	r2, [pc, #32]	; (84c8 <atest_init+0x2c>)
    84a8:	6813      	ldr	r3, [r2, #0]
    84aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    84ae:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    84b0:	4b06      	ldr	r3, [pc, #24]	; (84cc <atest_init+0x30>)
    84b2:	681a      	ldr	r2, [r3, #0]
    84b4:	f442 1220 	orr.w	r2, r2, #2621440	; 0x280000
    84b8:	601a      	str	r2, [r3, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    84ba:	681a      	ldr	r2, [r3, #0]
    84bc:	f422 12a0 	bic.w	r2, r2, #1310720	; 0x140000
    84c0:	601a      	str	r2, [r3, #0]
    84c2:	4770      	bx	lr
    84c4:	4002c004 	.word	0x4002c004
    84c8:	2009c000 	.word	0x2009c000
    84cc:	4002c044 	.word	0x4002c044

000084d0 <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    84d0:	b530      	push	{r4, r5, lr}
	u32 msb = 1 << (len - 1);
    84d2:	2501      	movs	r5, #1
    84d4:	1e43      	subs	r3, r0, #1
    84d6:	409d      	lsls	r5, r3

	/* start transaction by dropping CSN */
	CSN_CLR;
    84d8:	4b0d      	ldr	r3, [pc, #52]	; (8510 <cc2400_spi+0x40>)
    84da:	2220      	movs	r2, #32

	while (len--) {
    84dc:	3801      	subs	r0, #1
    84de:	b2c0      	uxtb	r0, r0
    84e0:	28ff      	cmp	r0, #255	; 0xff

		SCLK_SET;
		if (MISO)
			data |= 1;

		SCLK_CLR;
    84e2:	601a      	str	r2, [r3, #0]
    84e4:	4c0b      	ldr	r4, [pc, #44]	; (8514 <cc2400_spi+0x44>)
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    84e6:	d00f      	beq.n	8508 <cc2400_spi+0x38>
		if (data & msb)
    84e8:	4229      	tst	r1, r5
    84ea:	f04f 0201 	mov.w	r2, #1
			MOSI_SET;
    84ee:	bf14      	ite	ne
    84f0:	6022      	strne	r2, [r4, #0]
		else
			MOSI_CLR;
    84f2:	601a      	streq	r2, [r3, #0]
		data <<= 1;

		SCLK_SET;
    84f4:	2210      	movs	r2, #16
    84f6:	6022      	str	r2, [r4, #0]
		if (MISO)
    84f8:	4c07      	ldr	r4, [pc, #28]	; (8518 <cc2400_spi+0x48>)
	while (len--) {
		if (data & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		data <<= 1;
    84fa:	0049      	lsls	r1, r1, #1

		SCLK_SET;
		if (MISO)
    84fc:	6824      	ldr	r4, [r4, #0]
    84fe:	07a4      	lsls	r4, r4, #30
			data |= 1;
    8500:	bf48      	it	mi
    8502:	f041 0101 	orrmi.w	r1, r1, #1
    8506:	e7e9      	b.n	84dc <cc2400_spi+0xc>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    8508:	2320      	movs	r3, #32
    850a:	6023      	str	r3, [r4, #0]

	return data;
}
    850c:	4608      	mov	r0, r1
    850e:	bd30      	pop	{r4, r5, pc}
    8510:	2009c05c 	.word	0x2009c05c
    8514:	2009c058 	.word	0x2009c058
    8518:	2009c054 	.word	0x2009c054

0000851c <cc2400_init>:
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
}

void cc2400_init()
{
    851c:	b510      	push	{r4, lr}
#else
	atest_init();
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    851e:	4c0a      	ldr	r4, [pc, #40]	; (8548 <cc2400_init+0x2c>)
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    8520:	f7ff ffbc 	bl	849c <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    8524:	f44f 7300 	mov.w	r3, #512	; 0x200
    8528:	6023      	str	r3, [r4, #0]
	wait_us(50);
    852a:	2032      	movs	r0, #50	; 0x32
    852c:	f7ff ff2c 	bl	8388 <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    8530:	4b06      	ldr	r3, [pc, #24]	; (854c <cc2400_init+0x30>)
    8532:	2220      	movs	r2, #32
    8534:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    8536:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    853a:	6023      	str	r3, [r4, #0]

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    853c:	2018      	movs	r0, #24
    853e:	4904      	ldr	r1, [pc, #16]	; (8550 <cc2400_init+0x34>)
	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
}
    8540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    8544:	f7ff bfc4 	b.w	84d0 <cc2400_spi>
    8548:	2009c038 	.word	0x2009c038
    854c:	2009c058 	.word	0x2009c058
    8550:	000d7fff 	.word	0x000d7fff

00008554 <cc2400_get>:
	return data;
}

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    8554:	b508      	push	{r3, lr}
	u32 in;

	u32 out = (reg | 0x80) << 16;
    8556:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(24, out);
    855a:	0409      	lsls	r1, r1, #16
    855c:	2018      	movs	r0, #24
    855e:	f7ff ffb7 	bl	84d0 <cc2400_spi>
	return in & 0xFFFF;
}
    8562:	b280      	uxth	r0, r0
    8564:	bd08      	pop	{r3, pc}

00008566 <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
    8566:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	cc2400_spi(24, out);
    856a:	2018      	movs	r0, #24
    856c:	f7ff bfb0 	b.w	84d0 <cc2400_spi>

00008570 <cc2400_get8>:
}

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    8570:	b508      	push	{r3, lr}
	u16 in;

	u16 out = (reg | 0x80) << 8;
    8572:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(16, out);
    8576:	0209      	lsls	r1, r1, #8
    8578:	2010      	movs	r0, #16
    857a:	f7ff ffa9 	bl	84d0 <cc2400_spi>
	return in & 0xFF;
}
    857e:	b2c0      	uxtb	r0, r0
    8580:	bd08      	pop	{r3, pc}

00008582 <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
	u32 out = (reg << 8) | val;
    8582:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	cc2400_spi(16, out);
    8586:	2010      	movs	r0, #16
    8588:	f7ff bfa2 	b.w	84d0 <cc2400_spi>

0000858c <cc2400_fifo_write>:
       while (--delay_counter);
}


/* write multiple bytes to SPI */
void cc2400_fifo_write(u8 len, u8 *data) {
    858c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8 msb = 1 << 7;
	u8 reg = FIFOREG;
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    858e:	4b1f      	ldr	r3, [pc, #124]	; (860c <cc2400_fifo_write+0x80>)
    8590:	2220      	movs	r2, #32
    8592:	601a      	str	r2, [r3, #0]


/* write multiple bytes to SPI */
void cc2400_fifo_write(u8 len, u8 *data) {
	u8 msb = 1 << 7;
	u8 reg = FIFOREG;
    8594:	2570      	movs	r5, #112	; 0x70
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    8596:	2208      	movs	r2, #8
    8598:	4c1d      	ldr	r4, [pc, #116]	; (8610 <cc2400_fifo_write+0x84>)

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
    859a:	f015 0f80 	tst.w	r5, #128	; 0x80
    859e:	f04f 0601 	mov.w	r6, #1
    85a2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
			MOSI_SET;
    85a6:	bf14      	ite	ne
    85a8:	6026      	strne	r6, [r4, #0]
		else
			MOSI_CLR;
    85aa:	601e      	streq	r6, [r3, #0]
		reg <<= 1;
    85ac:	006d      	lsls	r5, r5, #1
		SCLK_SET;
    85ae:	2610      	movs	r6, #16
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    85b0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
		SCLK_SET;
    85b4:	6026      	str	r6, [r4, #0]
	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    85b6:	b2ed      	uxtb	r5, r5
		SCLK_SET;
		SCLK_CLR;
    85b8:	601e      	str	r6, [r3, #0]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    85ba:	d1ed      	bne.n	8598 <cc2400_fifo_write+0xc>
    85bc:	460e      	mov	r6, r1
    85be:	1a72      	subs	r2, r6, r1
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    85c0:	b2d2      	uxtb	r2, r2
    85c2:	4282      	cmp	r2, r0
    85c4:	d214      	bcs.n	85f0 <cc2400_fifo_write+0x64>
		temp = data[i];
    85c6:	f816 5b01 	ldrb.w	r5, [r6], #1
    85ca:	2208      	movs	r2, #8
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
    85cc:	f015 0f80 	tst.w	r5, #128	; 0x80
    85d0:	f04f 0701 	mov.w	r7, #1
    85d4:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
				MOSI_SET;
    85d8:	bf14      	ite	ne
    85da:	6027      	strne	r7, [r4, #0]
			else
				MOSI_CLR;
    85dc:	601f      	streq	r7, [r3, #0]
			temp <<= 1;
    85de:	006d      	lsls	r5, r5, #1
			SCLK_SET;
    85e0:	2710      	movs	r7, #16
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    85e2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
			if (temp & msb)
				MOSI_SET;
			else
				MOSI_CLR;
			temp <<= 1;
			SCLK_SET;
    85e6:	6027      	str	r7, [r4, #0]
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
				MOSI_SET;
			else
				MOSI_CLR;
			temp <<= 1;
    85e8:	b2ed      	uxtb	r5, r5
			SCLK_SET;
			SCLK_CLR;
    85ea:	601f      	str	r7, [r3, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    85ec:	d1ee      	bne.n	85cc <cc2400_fifo_write+0x40>
    85ee:	e7e6      	b.n	85be <cc2400_fifo_write+0x32>
    85f0:	2208      	movs	r2, #8
    85f2:	3a01      	subs	r2, #1
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
		SCLK_SET;
    85f4:	2110      	movs	r1, #16
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    85f6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		SCLK_SET;
    85fa:	6021      	str	r1, [r4, #0]
		SCLK_CLR;
    85fc:	6019      	str	r1, [r3, #0]
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    85fe:	d1f8      	bne.n	85f2 <cc2400_fifo_write+0x66>
		SCLK_SET;
		SCLK_CLR;
	}
	
	spi_delay();
    8600:	f7ff feb2 	bl	8368 <spi_delay>
	/* end transaction by raising CSN */
	CSN_SET;
    8604:	4b02      	ldr	r3, [pc, #8]	; (8610 <cc2400_fifo_write+0x84>)
    8606:	2220      	movs	r2, #32
    8608:	601a      	str	r2, [r3, #0]
    860a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    860c:	2009c05c 	.word	0x2009c05c
    8610:	2009c058 	.word	0x2009c058

00008614 <cc2400_fifo_read>:
}

/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
    8614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;
    8618:	4d20      	ldr	r5, [pc, #128]	; (869c <cc2400_fifo_read+0x88>)
    861a:	2320      	movs	r3, #32
    861c:	602b      	str	r3, [r5, #0]
/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
	u8 msb = 1 << 7;
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;
    861e:	22f0      	movs	r2, #240	; 0xf0

	/* start transaction by dropping CSN */
	CSN_CLR;
    8620:	2308      	movs	r3, #8
    8622:	f8df 8080 	ldr.w	r8, [pc, #128]	; 86a4 <cc2400_fifo_read+0x90>

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
    8626:	f012 0f80 	tst.w	r2, #128	; 0x80
    862a:	f04f 0401 	mov.w	r4, #1
    862e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
			MOSI_SET;
    8632:	bf14      	ite	ne
    8634:	f8c8 4000 	strne.w	r4, [r8]
		else
			MOSI_CLR;
    8638:	602c      	streq	r4, [r5, #0]
		reg <<= 1;
    863a:	0052      	lsls	r2, r2, #1
		SCLK_SET;
    863c:	2410      	movs	r4, #16
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    863e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
		SCLK_SET;
    8642:	f8c8 4000 	str.w	r4, [r8]
	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    8646:	b2d2      	uxtb	r2, r2
		SCLK_SET;
		SCLK_CLR;
    8648:	602c      	str	r4, [r5, #0]
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    864a:	d1ea      	bne.n	8622 <cc2400_fifo_read+0xe>
    864c:	3801      	subs	r0, #1
    864e:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
    8652:	180e      	adds	r6, r1, r0
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    8654:	45b1      	cmp	r9, r6
    8656:	d01a      	beq.n	868e <cc2400_fifo_read+0x7a>
    8658:	2708      	movs	r7, #8
    865a:	2400      	movs	r4, #0
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
    865c:	f7ff fe84 	bl	8368 <spi_delay>
			SCLK_SET;
    8660:	2310      	movs	r3, #16
    8662:	f8c8 3000 	str.w	r3, [r8]
			temp <<= 1;
			if (MISO)
    8666:	4b0e      	ldr	r3, [pc, #56]	; (86a0 <cc2400_fifo_read+0x8c>)
	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
			SCLK_SET;
			temp <<= 1;
    8668:	0064      	lsls	r4, r4, #1
			if (MISO)
    866a:	681b      	ldr	r3, [r3, #0]
	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
			SCLK_SET;
			temp <<= 1;
    866c:	b2e4      	uxtb	r4, r4
			if (MISO)
    866e:	079b      	lsls	r3, r3, #30
    8670:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
				temp |= 1;
    8674:	bf48      	it	mi
    8676:	f044 0401 	orrmi.w	r4, r4, #1
			spi_delay();
    867a:	f7ff fe75 	bl	8368 <spi_delay>
			SCLK_CLR;
    867e:	2310      	movs	r3, #16
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
    8680:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
			SCLK_SET;
			temp <<= 1;
			if (MISO)
				temp |= 1;
			spi_delay();
			SCLK_CLR;
    8684:	602b      	str	r3, [r5, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
    8686:	d1e9      	bne.n	865c <cc2400_fifo_read+0x48>
			if (MISO)
				temp |= 1;
			spi_delay();
			SCLK_CLR;
		}
		buf[i] = temp;
    8688:	f809 4f01 	strb.w	r4, [r9, #1]!
    868c:	e7e2      	b.n	8654 <cc2400_fifo_read+0x40>
	}

	/* end transaction by raising CSN */
	spi_delay();
    868e:	f7ff fe6b 	bl	8368 <spi_delay>
	CSN_SET;
    8692:	2320      	movs	r3, #32
    8694:	f8c8 3000 	str.w	r3, [r8]
    8698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    869c:	2009c05c 	.word	0x2009c05c
    86a0:	2009c054 	.word	0x2009c054
    86a4:	2009c058 	.word	0x2009c058

000086a8 <cc2400_status>:
}

/* get the status */
u8 cc2400_status()
{
    86a8:	b508      	push	{r3, lr}
	return cc2400_spi(8, 0);
    86aa:	2100      	movs	r1, #0
    86ac:	2008      	movs	r0, #8
    86ae:	f7ff ff0f 	bl	84d0 <cc2400_spi>
}
    86b2:	b2c0      	uxtb	r0, r0
    86b4:	bd08      	pop	{r3, pc}

000086b6 <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    86b6:	b508      	push	{r3, lr}
    86b8:	4601      	mov	r1, r0
	return cc2400_spi(8, reg);
    86ba:	2008      	movs	r0, #8
    86bc:	f7ff ff08 	bl	84d0 <cc2400_spi>
}
    86c0:	b2c0      	uxtb	r0, r0
    86c2:	bd08      	pop	{r3, pc}

000086c4 <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    86c4:	b508      	push	{r3, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    86c6:	2018      	movs	r0, #24
    86c8:	2100      	movs	r1, #0
    86ca:	f7ff ff01 	bl	84d0 <cc2400_spi>
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
    86ce:	2000      	movs	r0, #0
    86d0:	f7ff ff40 	bl	8554 <cc2400_get>
    86d4:	2800      	cmp	r0, #0
    86d6:	d1fa      	bne.n	86ce <cc2400_reset+0xa>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    86d8:	2018      	movs	r0, #24
    86da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    86de:	f7ff fef7 	bl	84d0 <cc2400_spi>
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
	cc2400_set(MAIN, 0x8000);
	while (cc2400_get(MAIN) != 0x8000);
    86e2:	2000      	movs	r0, #0
    86e4:	f7ff ff36 	bl	8554 <cc2400_get>
    86e8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    86ec:	d1f9      	bne.n	86e2 <cc2400_reset+0x1e>
}
    86ee:	bd08      	pop	{r3, pc}

000086f0 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    86f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    86f4:	f244 023a 	movw	r2, #16442	; 0x403a
    86f8:	4b3e      	ldr	r3, [pc, #248]	; (87f4 <clock_start+0x104>)

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    86fa:	4f3f      	ldr	r7, [pc, #252]	; (87f8 <clock_start+0x108>)

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    86fc:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    86fe:	4d3f      	ldr	r5, [pc, #252]	; (87fc <clock_start+0x10c>)
{
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    8700:	2300      	movs	r3, #0
    8702:	603b      	str	r3, [r7, #0]

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    8704:	682b      	ldr	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    8706:	4c3e      	ldr	r4, [pc, #248]	; (8800 <clock_start+0x110>)

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    8708:	f023 0302 	bic.w	r3, r3, #2
    870c:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    870e:	23aa      	movs	r3, #170	; 0xaa
    8710:	6023      	str	r3, [r4, #0]
    8712:	2355      	movs	r3, #85	; 0x55
    8714:	6023      	str	r3, [r4, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    8716:	4e3b      	ldr	r6, [pc, #236]	; (8804 <clock_start+0x114>)
    8718:	6833      	ldr	r3, [r6, #0]
    871a:	0198      	lsls	r0, r3, #6
    871c:	d4fb      	bmi.n	8716 <clock_start+0x26>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    871e:	682b      	ldr	r3, [r5, #0]
    8720:	f023 0301 	bic.w	r3, r3, #1
    8724:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    8726:	23aa      	movs	r3, #170	; 0xaa
    8728:	6023      	str	r3, [r4, #0]
    872a:	2355      	movs	r3, #85	; 0x55
    872c:	6023      	str	r3, [r4, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    872e:	6833      	ldr	r3, [r6, #0]
    8730:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    8734:	d1fb      	bne.n	872e <clock_start+0x3e>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    8736:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8828 <clock_start+0x138>
    873a:	f8c8 3000 	str.w	r3, [r8]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    873e:	f7ff ffc1 	bl	86c4 <cc2400_reset>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    8742:	2018      	movs	r0, #24
    8744:	4930      	ldr	r1, [pc, #192]	; (8808 <clock_start+0x118>)
    8746:	f7ff fec3 	bl	84d0 <cc2400_spi>
	CCLKCFG = 0;

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
	cc2400_strobe(SXOSCON);
    874a:	2060      	movs	r0, #96	; 0x60
    874c:	f7ff ffb3 	bl	86b6 <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8750:	f7ff ffaa 	bl	86a8 <cc2400_status>
    8754:	0641      	lsls	r1, r0, #25
    8756:	d5fb      	bpl.n	8750 <clock_start+0x60>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    8758:	4b2c      	ldr	r3, [pc, #176]	; (880c <clock_start+0x11c>)
    875a:	2220      	movs	r2, #32
    875c:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    875e:	681a      	ldr	r2, [r3, #0]
    8760:	0652      	lsls	r2, r2, #25
    8762:	d5fc      	bpl.n	875e <clock_start+0x6e>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    8764:	4b2a      	ldr	r3, [pc, #168]	; (8810 <clock_start+0x120>)
    8766:	2208      	movs	r2, #8
    8768:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    876a:	2200      	movs	r2, #0
    876c:	605a      	str	r2, [r3, #4]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    876e:	2301      	movs	r3, #1
    8770:	603b      	str	r3, [r7, #0]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    8772:	4a28      	ldr	r2, [pc, #160]	; (8814 <clock_start+0x124>)
    8774:	4b28      	ldr	r3, [pc, #160]	; (8818 <clock_start+0x128>)
	PLL0FEED_SEQUENCE;
    8776:	21aa      	movs	r1, #170	; 0xaa

	/* switch to main oscillator */
	CLKSRCSEL = 1;

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    8778:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    877a:	2255      	movs	r2, #85	; 0x55
    877c:	6021      	str	r1, [r4, #0]
    877e:	6022      	str	r2, [r4, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    8780:	682b      	ldr	r3, [r5, #0]
    8782:	f043 0301 	orr.w	r3, r3, #1
    8786:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    8788:	6021      	str	r1, [r4, #0]
    878a:	6022      	str	r2, [r4, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    878c:	6833      	ldr	r3, [r6, #0]
    878e:	01df      	lsls	r7, r3, #7
    8790:	d5fc      	bpl.n	878c <clock_start+0x9c>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    8792:	2303      	movs	r3, #3
    8794:	f8c8 3000 	str.w	r3, [r8]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    8798:	682b      	ldr	r3, [r5, #0]
    879a:	f043 0302 	orr.w	r3, r3, #2
    879e:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    87a0:	23aa      	movs	r3, #170	; 0xaa
    87a2:	6023      	str	r3, [r4, #0]
    87a4:	2355      	movs	r3, #85	; 0x55
    87a6:	6023      	str	r3, [r4, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    87a8:	6833      	ldr	r3, [r6, #0]
    87aa:	019d      	lsls	r5, r3, #6
    87ac:	d5fc      	bpl.n	87a8 <clock_start+0xb8>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    87ae:	4b1b      	ldr	r3, [pc, #108]	; (881c <clock_start+0x12c>)
    87b0:	2222      	movs	r2, #34	; 0x22
    87b2:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    87b4:	24aa      	movs	r4, #170	; 0xaa
    87b6:	3308      	adds	r3, #8
    87b8:	2055      	movs	r0, #85	; 0x55

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    87ba:	4a19      	ldr	r2, [pc, #100]	; (8820 <clock_start+0x130>)
	PLL0FEED_SEQUENCE;
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
	PLL1FEED_SEQUENCE;
    87bc:	601c      	str	r4, [r3, #0]
    87be:	6018      	str	r0, [r3, #0]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    87c0:	6811      	ldr	r1, [r2, #0]
    87c2:	f041 0101 	orr.w	r1, r1, #1
    87c6:	6011      	str	r1, [r2, #0]
	PLL1FEED_SEQUENCE;
    87c8:	601c      	str	r4, [r3, #0]
    87ca:	6018      	str	r0, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    87cc:	4915      	ldr	r1, [pc, #84]	; (8824 <clock_start+0x134>)
    87ce:	6808      	ldr	r0, [r1, #0]
    87d0:	05c4      	lsls	r4, r0, #23
    87d2:	d5fb      	bpl.n	87cc <clock_start+0xdc>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    87d4:	6808      	ldr	r0, [r1, #0]
    87d6:	0540      	lsls	r0, r0, #21
    87d8:	d5fc      	bpl.n	87d4 <clock_start+0xe4>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    87da:	6810      	ldr	r0, [r2, #0]
    87dc:	f040 0002 	orr.w	r0, r0, #2
    87e0:	6010      	str	r0, [r2, #0]
	PLL1FEED_SEQUENCE;
    87e2:	22aa      	movs	r2, #170	; 0xaa
    87e4:	601a      	str	r2, [r3, #0]
    87e6:	2255      	movs	r2, #85	; 0x55
    87e8:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    87ea:	680b      	ldr	r3, [r1, #0]
    87ec:	059b      	lsls	r3, r3, #22
    87ee:	d5fc      	bpl.n	87ea <clock_start+0xfa>
}
    87f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    87f4:	400fc000 	.word	0x400fc000
    87f8:	400fc10c 	.word	0x400fc10c
    87fc:	400fc080 	.word	0x400fc080
    8800:	400fc08c 	.word	0x400fc08c
    8804:	400fc088 	.word	0x400fc088
    8808:	00081570 	.word	0x00081570
    880c:	400fc1a0 	.word	0x400fc1a0
    8810:	400fc1a8 	.word	0x400fc1a8
    8814:	00010018 	.word	0x00010018
    8818:	400fc084 	.word	0x400fc084
    881c:	400fc0a4 	.word	0x400fc0a4
    8820:	400fc0a0 	.word	0x400fc0a0
    8824:	400fc0a8 	.word	0x400fc0a8
    8828:	400fc104 	.word	0x400fc104

0000882c <ubertooth_init>:
/*
 * Every application that uses the main oscillator (including any that use both
 * USB and the CC2400) should start with this.
 */
void ubertooth_init()
{
    882c:	b508      	push	{r3, lr}
	gpio_init();
    882e:	f7ff fdf1 	bl	8414 <gpio_init>
	cc2400_init();
    8832:	f7ff fe73 	bl	851c <cc2400_init>
	clock_start();
}
    8836:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */
void ubertooth_init()
{
	gpio_init();
	cc2400_init();
	clock_start();
    883a:	f7ff bf59 	b.w	86f0 <clock_start>
    883e:	0000      	movs	r0, r0

00008840 <reset>:
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
}

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    8840:	b508      	push	{r3, lr}
	all_pins_off();
    8842:	f7ff fdbd 	bl	83c0 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    8846:	4b09      	ldr	r3, [pc, #36]	; (886c <reset+0x2c>)
    8848:	2202      	movs	r2, #2
    884a:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    884c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8850:	6813      	ldr	r3, [r2, #0]
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    8852:	4807      	ldr	r0, [pc, #28]	; (8870 <reset+0x30>)
{
	all_pins_off();

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    8854:	f043 0303 	orr.w	r3, r3, #3
    8858:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    885a:	4b06      	ldr	r3, [pc, #24]	; (8874 <reset+0x34>)
    885c:	22aa      	movs	r2, #170	; 0xaa
    885e:	601a      	str	r2, [r3, #0]
    8860:	2255      	movs	r2, #85	; 0x55
    8862:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
}
    8864:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    8868:	f7ff bd8e 	b.w	8388 <wait_us>
    886c:	2009c03c 	.word	0x2009c03c
    8870:	000f4240 	.word	0x000f4240
    8874:	40000008 	.word	0x40000008

00008878 <get_part_num>:
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    8878:	b530      	push	{r4, r5, lr}
    887a:	b08b      	sub	sp, #44	; 0x2c
    887c:	4604      	mov	r4, r0
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    887e:	2336      	movs	r3, #54	; 0x36
    8880:	a80a      	add	r0, sp, #40	; 0x28
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    8882:	460d      	mov	r5, r1
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    8884:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    8888:	a905      	add	r1, sp, #20
    888a:	4b08      	ldr	r3, [pc, #32]	; (88ac <get_part_num+0x34>)
    888c:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    888e:	9b05      	ldr	r3, [sp, #20]
    8890:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    8892:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    8894:	0a1a      	lsrs	r2, r3, #8
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
    8896:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    8898:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    889a:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    889c:	0e1b      	lsrs	r3, r3, #24
    889e:	7123      	strb	r3, [r4, #4]
	*len = 5;
    88a0:	2305      	movs	r3, #5
	command[0] = 54; /* read part number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
    88a2:	70e2      	strb	r2, [r4, #3]
	buffer[4] = (result[1] >> 24) & 0xFF;
	*len = 5;
    88a4:	602b      	str	r3, [r5, #0]
	
}
    88a6:	b00b      	add	sp, #44	; 0x2c
    88a8:	bd30      	pop	{r4, r5, pc}
    88aa:	bf00      	nop
    88ac:	1fff1ff1 	.word	0x1fff1ff1

000088b0 <get_device_serial>:

void get_device_serial(uint8_t *buffer, int *len)
{
    88b0:	b530      	push	{r4, r5, lr}
    88b2:	b08b      	sub	sp, #44	; 0x2c
    88b4:	4604      	mov	r4, r0
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    88b6:	233a      	movs	r3, #58	; 0x3a
    88b8:	a80a      	add	r0, sp, #40	; 0x28
	*len = 5;
	
}

void get_device_serial(uint8_t *buffer, int *len)
{
    88ba:	460d      	mov	r5, r1
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    88bc:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    88c0:	a905      	add	r1, sp, #20
    88c2:	4b14      	ldr	r3, [pc, #80]	; (8914 <get_device_serial+0x64>)
    88c4:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    88c6:	9b05      	ldr	r3, [sp, #20]
    88c8:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    88ca:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    88cc:	0a1a      	lsrs	r2, r3, #8
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
    88ce:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    88d0:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    88d2:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    88d4:	0e1b      	lsrs	r3, r3, #24
    88d6:	7123      	strb	r3, [r4, #4]
	buffer[5] = result[2] & 0xFF;
    88d8:	9b07      	ldr	r3, [sp, #28]
	command[0] = 58; /* read device serial number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
    88da:	70e2      	strb	r2, [r4, #3]
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
    88dc:	0a1a      	lsrs	r2, r3, #8
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
    88de:	7163      	strb	r3, [r4, #5]
	buffer[6] = (result[2] >> 8) & 0xFF;
    88e0:	71a2      	strb	r2, [r4, #6]
	buffer[7] = (result[2] >> 16) & 0xFF;
    88e2:	0c1a      	lsrs	r2, r3, #16
	buffer[8] = (result[2] >> 24) & 0xFF;
    88e4:	0e1b      	lsrs	r3, r3, #24
    88e6:	7223      	strb	r3, [r4, #8]
	buffer[9] = result[3] & 0xFF;
    88e8:	9b08      	ldr	r3, [sp, #32]
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
    88ea:	71e2      	strb	r2, [r4, #7]
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
    88ec:	0a1a      	lsrs	r2, r3, #8
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
    88ee:	7263      	strb	r3, [r4, #9]
	buffer[10] = (result[3] >> 8) & 0xFF;
    88f0:	72a2      	strb	r2, [r4, #10]
	buffer[11] = (result[3] >> 16) & 0xFF;
    88f2:	0c1a      	lsrs	r2, r3, #16
	buffer[12] = (result[3] >> 24) & 0xFF;
    88f4:	0e1b      	lsrs	r3, r3, #24
    88f6:	7323      	strb	r3, [r4, #12]
	buffer[13] = result[4] & 0xFF;
    88f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
    88fa:	72e2      	strb	r2, [r4, #11]
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
	buffer[14] = (result[4] >> 8) & 0xFF;
    88fc:	0a1a      	lsrs	r2, r3, #8
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
    88fe:	7363      	strb	r3, [r4, #13]
	buffer[14] = (result[4] >> 8) & 0xFF;
    8900:	73a2      	strb	r2, [r4, #14]
	buffer[15] = (result[4] >> 16) & 0xFF;
    8902:	0c1a      	lsrs	r2, r3, #16
	buffer[16] = (result[4] >> 24) & 0xFF;
    8904:	0e1b      	lsrs	r3, r3, #24
    8906:	7423      	strb	r3, [r4, #16]
	*len = 17;
    8908:	2311      	movs	r3, #17
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
	buffer[14] = (result[4] >> 8) & 0xFF;
	buffer[15] = (result[4] >> 16) & 0xFF;
    890a:	73e2      	strb	r2, [r4, #15]
	buffer[16] = (result[4] >> 24) & 0xFF;
	*len = 17;
    890c:	602b      	str	r3, [r5, #0]
}
    890e:	b00b      	add	sp, #44	; 0x2c
    8910:	bd30      	pop	{r4, r5, pc}
    8912:	bf00      	nop
    8914:	1fff1ff1 	.word	0x1fff1ff1

00008918 <set_isp>:

void set_isp(void)
{
    8918:	b500      	push	{lr}
    891a:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 57;
    891c:	2339      	movs	r3, #57	; 0x39
    891e:	a80a      	add	r0, sp, #40	; 0x28
    8920:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    8924:	a905      	add	r1, sp, #20
    8926:	4b02      	ldr	r3, [pc, #8]	; (8930 <set_isp+0x18>)
    8928:	4798      	blx	r3
}
    892a:	b00b      	add	sp, #44	; 0x2c
    892c:	f85d fb04 	ldr.w	pc, [sp], #4
    8930:	1fff1ff1 	.word	0x1fff1ff1

00008934 <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    8934:	b538      	push	{r3, r4, r5, lr}
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    8936:	4c08      	ldr	r4, [pc, #32]	; (8958 <DataIn+0x24>)
	USBHwEPWrite(0x80, pbData, iChunk);
    8938:	2080      	movs	r0, #128	; 0x80
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    893a:	6825      	ldr	r5, [r4, #0]
	USBHwEPWrite(0x80, pbData, iChunk);
    893c:	6861      	ldr	r1, [r4, #4]
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    893e:	2d40      	cmp	r5, #64	; 0x40
    8940:	bfa8      	it	ge
    8942:	2540      	movge	r5, #64	; 0x40
	USBHwEPWrite(0x80, pbData, iChunk);
    8944:	462a      	mov	r2, r5
    8946:	f000 f957 	bl	8bf8 <USBHwEPWrite>
	pbData += iChunk;
    894a:	6863      	ldr	r3, [r4, #4]
    894c:	442b      	add	r3, r5
    894e:	6063      	str	r3, [r4, #4]
	iResidue -= iChunk;
    8950:	6823      	ldr	r3, [r4, #0]
    8952:	1b5d      	subs	r5, r3, r5
    8954:	6025      	str	r5, [r4, #0]
    8956:	bd38      	pop	{r3, r4, r5, pc}
    8958:	10000b0c 	.word	0x10000b0c

0000895c <_HandleRequest.constprop.1>:
	@param [in,out]	*piLen		Pointer to data length
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
    895c:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    895e:	4b11      	ldr	r3, [pc, #68]	; (89a4 <_HandleRequest.constprop.1+0x48>)
    8960:	7a1c      	ldrb	r4, [r3, #8]
    8962:	461d      	mov	r5, r3
    8964:	f3c4 1441 	ubfx	r4, r4, #5, #2
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    8968:	2c02      	cmp	r4, #2
    896a:	d10d      	bne.n	8988 <_HandleRequest.constprop.1+0x2c>
		BOOL fFilterStatus = FALSE;
    896c:	2200      	movs	r2, #0
    896e:	a902      	add	r1, sp, #8
    8970:	f841 2d04 	str.w	r2, [r1, #-4]!
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    8974:	f103 0008 	add.w	r0, r3, #8
    8978:	f103 0210 	add.w	r2, r3, #16
    897c:	3304      	adds	r3, #4
    897e:	f000 fa69 	bl	8e54 <USBFilterOsVendorMessage>
    8982:	b108      	cbz	r0, 8988 <_HandleRequest.constprop.1+0x2c>
			return fFilterStatus;
    8984:	9801      	ldr	r0, [sp, #4]
    8986:	e00a      	b.n	899e <_HandleRequest.constprop.1+0x42>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    8988:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    898c:	6963      	ldr	r3, [r4, #20]
	if (pfnHandler == NULL) {
    898e:	b12b      	cbz	r3, 899c <_HandleRequest.constprop.1+0x40>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
	}

	return pfnHandler(pSetup, piLen, ppbData);
    8990:	4805      	ldr	r0, [pc, #20]	; (89a8 <_HandleRequest.constprop.1+0x4c>)
    8992:	f100 0108 	add.w	r1, r0, #8
    8996:	1f02      	subs	r2, r0, #4
    8998:	4798      	blx	r3
    899a:	e000      	b.n	899e <_HandleRequest.constprop.1+0x42>
	}
	
	pfnHandler = apfnReqHandlers[iType];
	if (pfnHandler == NULL) {
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    899c:	4618      	mov	r0, r3
	}

	return pfnHandler(pSetup, piLen, ppbData);
}
    899e:	b003      	add	sp, #12
    89a0:	bd30      	pop	{r4, r5, pc}
    89a2:	bf00      	nop
    89a4:	10000b0c 	.word	0x10000b0c
    89a8:	10000b14 	.word	0x10000b14

000089ac <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    89ac:	b510      	push	{r4, lr}
	int iChunk, iType;

	if (bEP == 0x00) {
    89ae:	2800      	cmp	r0, #0
    89b0:	d14a      	bne.n	8a48 <USBHandleControlTransfer+0x9c>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    89b2:	f001 0304 	and.w	r3, r1, #4
    89b6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    89ba:	4c25      	ldr	r4, [pc, #148]	; (8a50 <USBHandleControlTransfer+0xa4>)
    89bc:	b30b      	cbz	r3, 8a02 <USBHandleControlTransfer+0x56>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    89be:	2208      	movs	r2, #8
    89c0:	f104 0108 	add.w	r1, r4, #8
    89c4:	f000 f94c 	bl	8c60 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    89c8:	7a22      	ldrb	r2, [r4, #8]
    89ca:	f3c2 1341 	ubfx	r3, r2, #5, #2
			pbData = apbDataStore[iType];
    89ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    89d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    89d4:	6063      	str	r3, [r4, #4]
			iResidue = Setup.wLength;
    89d6:	89e3      	ldrh	r3, [r4, #14]
    89d8:	6023      	str	r3, [r4, #0]
			iLen = Setup.wLength;
    89da:	6123      	str	r3, [r4, #16]

			if ((Setup.wLength == 0) ||
    89dc:	b10b      	cbz	r3, 89e2 <USBHandleControlTransfer+0x36>
    89de:	09d3      	lsrs	r3, r2, #7
    89e0:	d034      	beq.n	8a4c <USBHandleControlTransfer+0xa0>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    89e2:	f7ff ffbb 	bl	895c <_HandleRequest.constprop.1>
    89e6:	b928      	cbnz	r0, 89f4 <USBHandleControlTransfer+0x48>
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    89e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void StallControlPipe(U8 bEPStat)
{
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    89ec:	2080      	movs	r0, #128	; 0x80
    89ee:	2101      	movs	r1, #1
    89f0:	f000 b8f6 	b.w	8be0 <USBHwEPStall>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
					return;
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    89f4:	89e2      	ldrh	r2, [r4, #14]
    89f6:	6923      	ldr	r3, [r4, #16]
    89f8:	429a      	cmp	r2, r3
    89fa:	bfd4      	ite	le
    89fc:	6022      	strle	r2, [r4, #0]
    89fe:	6023      	strgt	r3, [r4, #0]
    8a00:	e019      	b.n	8a36 <USBHandleControlTransfer+0x8a>
				// send first part (possibly a zero-length status message)
				DataIn();
			}
		}
		else {		
			if (iResidue > 0) {
    8a02:	6822      	ldr	r2, [r4, #0]
    8a04:	2a00      	cmp	r2, #0
    8a06:	dd1a      	ble.n	8a3e <USBHandleControlTransfer+0x92>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    8a08:	6861      	ldr	r1, [r4, #4]
    8a0a:	f000 f929 	bl	8c60 <USBHwEPRead>
				if (iChunk < 0) {
    8a0e:	2800      	cmp	r0, #0
    8a10:	dbea      	blt.n	89e8 <USBHandleControlTransfer+0x3c>
					StallControlPipe(bEPStat);
					return;
				}
				pbData += iChunk;
    8a12:	6863      	ldr	r3, [r4, #4]
    8a14:	4403      	add	r3, r0
    8a16:	6063      	str	r3, [r4, #4]
				iResidue -= iChunk;
    8a18:	6823      	ldr	r3, [r4, #0]
    8a1a:	1a18      	subs	r0, r3, r0
    8a1c:	6020      	str	r0, [r4, #0]
				if (iResidue == 0) {
    8a1e:	b9a8      	cbnz	r0, 8a4c <USBHandleControlTransfer+0xa0>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    8a20:	7a23      	ldrb	r3, [r4, #8]
    8a22:	f3c3 1341 	ubfx	r3, r3, #5, #2
					pbData = apbDataStore[iType];
    8a26:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    8a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a2c:	6063      	str	r3, [r4, #4]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    8a2e:	f7ff ff95 	bl	895c <_HandleRequest.constprop.1>
    8a32:	2800      	cmp	r0, #0
    8a34:	d0d8      	beq.n	89e8 <USBHandleControlTransfer+0x3c>
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    8a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
						return;
					}
					// send status to host
					DataIn();
    8a3a:	f7ff bf7b 	b.w	8934 <DataIn>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    8a3e:	460a      	mov	r2, r1
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    8a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					DataIn();
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    8a44:	f000 b90c 	b.w	8c60 <USBHwEPRead>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    8a48:	2880      	cmp	r0, #128	; 0x80
    8a4a:	d0f4      	beq.n	8a36 <USBHandleControlTransfer+0x8a>
    8a4c:	bd10      	pop	{r4, pc}
    8a4e:	bf00      	nop
    8a50:	10000b0c 	.word	0x10000b0c

00008a54 <USBRegisterRequestHandler>:
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    8a54:	4b02      	ldr	r3, [pc, #8]	; (8a60 <USBRegisterRequestHandler+0xc>)
    8a56:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8a5a:	6141      	str	r1, [r0, #20]
	apbDataStore[iType] = pbDataStore;
    8a5c:	6242      	str	r2, [r0, #36]	; 0x24
    8a5e:	4770      	bx	lr
    8a60:	10000b0c 	.word	0x10000b0c

00008a64 <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    8a64:	4770      	bx	lr
    8a66:	0000      	movs	r0, r0

00008a68 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    8a68:	b510      	push	{r4, lr}
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    8a6a:	4c0e      	ldr	r4, [pc, #56]	; (8aa4 <USBInit+0x3c>)
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
	// init hardware
	USBHwInit();
    8a6c:	f000 f99a 	bl	8da4 <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    8a70:	480d      	ldr	r0, [pc, #52]	; (8aa8 <USBInit+0x40>)
    8a72:	f000 f87f 	bl	8b74 <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    8a76:	4621      	mov	r1, r4
    8a78:	2000      	movs	r0, #0
    8a7a:	f000 f861 	bl	8b40 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    8a7e:	4621      	mov	r1, r4
    8a80:	2080      	movs	r0, #128	; 0x80
    8a82:	f000 f85d 	bl	8b40 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    8a86:	2000      	movs	r0, #0
    8a88:	2140      	movs	r1, #64	; 0x40
    8a8a:	f000 f83b 	bl	8b04 <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    8a8e:	2080      	movs	r0, #128	; 0x80
    8a90:	2140      	movs	r1, #64	; 0x40
    8a92:	f000 f837 	bl	8b04 <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    8a96:	2000      	movs	r0, #0
    8a98:	4904      	ldr	r1, [pc, #16]	; (8aac <USBInit+0x44>)
    8a9a:	4a05      	ldr	r2, [pc, #20]	; (8ab0 <USBInit+0x48>)
    8a9c:	f7ff ffda 	bl	8a54 <USBRegisterRequestHandler>

	return TRUE;
}
    8aa0:	2001      	movs	r0, #1
    8aa2:	bd10      	pop	{r4, pc}
    8aa4:	000089ad 	.word	0x000089ad
    8aa8:	00008a65 	.word	0x00008a65
    8aac:	00008f4d 	.word	0x00008f4d
    8ab0:	10000b40 	.word	0x10000b40

00008ab4 <Wait4DevInt>:
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    8ab4:	4b03      	ldr	r3, [pc, #12]	; (8ac4 <Wait4DevInt+0x10>)
    8ab6:	681b      	ldr	r3, [r3, #0]
    8ab8:	4003      	ands	r3, r0
    8aba:	4283      	cmp	r3, r0
    8abc:	d1fa      	bne.n	8ab4 <Wait4DevInt>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    8abe:	4b02      	ldr	r3, [pc, #8]	; (8ac8 <Wait4DevInt+0x14>)
    8ac0:	6018      	str	r0, [r3, #0]
    8ac2:	4770      	bx	lr
    8ac4:	5000c200 	.word	0x5000c200
    8ac8:	5000c208 	.word	0x5000c208

00008acc <USBHwCmd>:
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    8acc:	4b04      	ldr	r3, [pc, #16]	; (8ae0 <USBHwCmd+0x14>)
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    8ace:	0400      	lsls	r0, r0, #16
    8ad0:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    8ad4:	2230      	movs	r2, #48	; 0x30
    8ad6:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    8ad8:	6098      	str	r0, [r3, #8]
    Wait4DevInt(CCEMTY);
    8ada:	2010      	movs	r0, #16
    8adc:	f7ff bfea 	b.w	8ab4 <Wait4DevInt>
    8ae0:	5000c208 	.word	0x5000c208

00008ae4 <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    8ae4:	b510      	push	{r4, lr}
    8ae6:	460c      	mov	r4, r1
    // write command code
    USBHwCmd(bCmd);
    8ae8:	f7ff fff0 	bl	8acc <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    8aec:	0424      	lsls	r4, r4, #16
    8aee:	4b04      	ldr	r3, [pc, #16]	; (8b00 <USBHwCmdWrite+0x1c>)
    8af0:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    8af4:	601c      	str	r4, [r3, #0]
    Wait4DevInt(CCEMTY);
    8af6:	2010      	movs	r0, #16
}
    8af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // write command code
    USBHwCmd(bCmd);

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    Wait4DevInt(CCEMTY);
    8afc:	f7ff bfda 	b.w	8ab4 <Wait4DevInt>
    8b00:	5000c210 	.word	0x5000c210

00008b04 <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    8b04:	b510      	push	{r4, lr}
    int idx;
    
    idx = EP2IDX(bEP);
    8b06:	f000 040f 	and.w	r4, r0, #15
    8b0a:	09c0      	lsrs	r0, r0, #7
    8b0c:	ea40 0444 	orr.w	r4, r0, r4, lsl #1
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    USBReEp |= (1 << idx);
    8b10:	4809      	ldr	r0, [pc, #36]	; (8b38 <USBHwEPConfig+0x34>)
    8b12:	2301      	movs	r3, #1
    8b14:	6802      	ldr	r2, [r0, #0]
    8b16:	40a3      	lsls	r3, r4
    8b18:	4313      	orrs	r3, r2
    8b1a:	6003      	str	r3, [r0, #0]
#ifdef LPC17xx
    USBEpIn = idx;
    8b1c:	4b07      	ldr	r3, [pc, #28]	; (8b3c <USBHwEPConfig+0x38>)
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    Wait4DevInt(EP_RLZED);
    8b1e:	f44f 7080 	mov.w	r0, #256	; 0x100
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    USBReEp |= (1 << idx);
#ifdef LPC17xx
    USBEpIn = idx;
    8b22:	601c      	str	r4, [r3, #0]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    8b24:	6059      	str	r1, [r3, #4]
    Wait4DevInt(EP_RLZED);
    8b26:	f7ff ffc5 	bl	8ab4 <Wait4DevInt>
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    8b2a:	f044 0040 	orr.w	r0, r4, #64	; 0x40
    8b2e:	2100      	movs	r1, #0
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);

    // enable EP
    USBHwEPEnable(idx, TRUE);
}
    8b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    8b34:	f7ff bfd6 	b.w	8ae4 <USBHwCmdWrite>
    8b38:	5000c244 	.word	0x5000c244
    8b3c:	5000c248 	.word	0x5000c248

00008b40 <USBHwRegisterEPIntHandler>:
    idx = EP2IDX(bEP);

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    8b40:	4a09      	ldr	r2, [pc, #36]	; (8b68 <USBHwRegisterEPIntHandler+0x28>)
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    int idx;
    
    idx = EP2IDX(bEP);
    8b42:	f000 030f 	and.w	r3, r0, #15

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    8b46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    8b4a:	4908      	ldr	r1, [pc, #32]	; (8b6c <USBHwRegisterEPIntHandler+0x2c>)
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    int idx;
    
    idx = EP2IDX(bEP);
    8b4c:	09c0      	lsrs	r0, r0, #7

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    8b4e:	680a      	ldr	r2, [r1, #0]
    idx = EP2IDX(bEP);

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    8b50:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    8b54:	2301      	movs	r3, #1
    8b56:	4083      	lsls	r3, r0
    8b58:	4313      	orrs	r3, r2
    USBDevIntEn |= EP_SLOW;
    8b5a:	4a05      	ldr	r2, [pc, #20]	; (8b70 <USBHwRegisterEPIntHandler+0x30>)

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    8b5c:	600b      	str	r3, [r1, #0]
    USBDevIntEn |= EP_SLOW;
    8b5e:	6813      	ldr	r3, [r2, #0]
    8b60:	f043 0304 	orr.w	r3, r3, #4
    8b64:	6013      	str	r3, [r2, #0]
    8b66:	4770      	bx	lr
    8b68:	10000b48 	.word	0x10000b48
    8b6c:	5000c234 	.word	0x5000c234
    8b70:	5000c204 	.word	0x5000c204

00008b74 <USBHwRegisterDevIntHandler>:
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    _pfnDevIntHandler = pfnHandler;
    8b74:	4b03      	ldr	r3, [pc, #12]	; (8b84 <USBHwRegisterDevIntHandler+0x10>)
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    8b76:	4a04      	ldr	r2, [pc, #16]	; (8b88 <USBHwRegisterDevIntHandler+0x14>)
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    _pfnDevIntHandler = pfnHandler;
    8b78:	6418      	str	r0, [r3, #64]	; 0x40
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    8b7a:	6813      	ldr	r3, [r2, #0]
    8b7c:	f043 0308 	orr.w	r3, r3, #8
    8b80:	6013      	str	r3, [r2, #0]
    8b82:	4770      	bx	lr
    8b84:	10000b48 	.word	0x10000b48
    8b88:	5000c204 	.word	0x5000c204

00008b8c <USBHwSetAddress>:
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    8b8c:	f040 0180 	orr.w	r1, r0, #128	; 0x80
    8b90:	20d0      	movs	r0, #208	; 0xd0
    8b92:	f7ff bfa7 	b.w	8ae4 <USBHwCmdWrite>

00008b96 <USBHwConnect>:
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    8b96:	1c01      	adds	r1, r0, #0
    8b98:	bf18      	it	ne
    8b9a:	2101      	movne	r1, #1
    8b9c:	20fe      	movs	r0, #254	; 0xfe
    8b9e:	f7ff bfa1 	b.w	8ae4 <USBHwCmdWrite>

00008ba2 <USBHwNakIntEnable>:
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    8ba2:	4601      	mov	r1, r0
    8ba4:	20f3      	movs	r0, #243	; 0xf3
    8ba6:	f7ff bf9d 	b.w	8ae4 <USBHwCmdWrite>
    8baa:	0000      	movs	r0, r0

00008bac <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    8bac:	b510      	push	{r4, lr}
    int idx = EP2IDX(bEP);
    8bae:	f000 040f 	and.w	r4, r0, #15
    8bb2:	09c0      	lsrs	r0, r0, #7
    8bb4:	ea40 0444 	orr.w	r4, r0, r4, lsl #1
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    8bb8:	4620      	mov	r0, r4
    8bba:	f7ff ff87 	bl	8acc <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8bbe:	0424      	lsls	r4, r4, #16
    8bc0:	4b05      	ldr	r3, [pc, #20]	; (8bd8 <USBHwEPGetStatus+0x2c>)
    8bc2:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    8bc6:	601c      	str	r4, [r3, #0]
    Wait4DevInt(CDFULL);
    8bc8:	2020      	movs	r0, #32
    8bca:	f7ff ff73 	bl	8ab4 <Wait4DevInt>
    return USBCmdData;
    8bce:	4b03      	ldr	r3, [pc, #12]	; (8bdc <USBHwEPGetStatus+0x30>)
    8bd0:	6818      	ldr	r0, [r3, #0]
U8  USBHwEPGetStatus(U8 bEP)
{
    int idx = EP2IDX(bEP);

    return USBHwCmdRead(CMD_EP_SELECT | idx);
}
    8bd2:	b2c0      	uxtb	r0, r0
    8bd4:	bd10      	pop	{r4, pc}
    8bd6:	bf00      	nop
    8bd8:	5000c210 	.word	0x5000c210
    8bdc:	5000c214 	.word	0x5000c214

00008be0 <USBHwEPStall>:
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    int idx = EP2IDX(bEP);
    8be0:	f000 030f 	and.w	r3, r0, #15
    8be4:	09c0      	lsrs	r0, r0, #7
    8be6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    8bea:	3100      	adds	r1, #0
    8bec:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    8bf0:	bf18      	it	ne
    8bf2:	2101      	movne	r1, #1
    8bf4:	f7ff bf76 	b.w	8ae4 <USBHwCmdWrite>

00008bf8 <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    8bf8:	b538      	push	{r3, r4, r5, lr}
    8bfa:	4615      	mov	r5, r2
    U32 idx;
    
    idx = EP2IDX(bEP);
    8bfc:	f000 030f 	and.w	r3, r0, #15
    8c00:	09c0      	lsrs	r0, r0, #7
    8c02:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    8c06:	4a13      	ldr	r2, [pc, #76]	; (8c54 <USBHwEPWrite+0x5c>)
    8c08:	009b      	lsls	r3, r3, #2
    8c0a:	f043 0302 	orr.w	r3, r3, #2
    8c0e:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    8c10:	4b11      	ldr	r3, [pc, #68]	; (8c58 <USBHwEPWrite+0x60>)
    8c12:	601d      	str	r5, [r3, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    8c14:	6813      	ldr	r3, [r2, #0]
    8c16:	3104      	adds	r1, #4
    8c18:	f013 0302 	ands.w	r3, r3, #2
    8c1c:	d010      	beq.n	8c40 <USBHwEPWrite+0x48>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    8c1e:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    8c22:	f811 4c01 	ldrb.w	r4, [r1, #-1]
    8c26:	041b      	lsls	r3, r3, #16
    8c28:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    8c2c:	f811 4c04 	ldrb.w	r4, [r1, #-4]
    8c30:	4323      	orrs	r3, r4
    8c32:	f811 4c03 	ldrb.w	r4, [r1, #-3]
    8c36:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    8c3a:	4c08      	ldr	r4, [pc, #32]	; (8c5c <USBHwEPWrite+0x64>)
    8c3c:	6023      	str	r3, [r4, #0]
    8c3e:	e7e9      	b.n	8c14 <USBHwEPWrite+0x1c>
        pbBuf += 4;
    }

    USBCtrl = 0;
    8c40:	4a04      	ldr	r2, [pc, #16]	; (8c54 <USBHwEPWrite+0x5c>)
    8c42:	6013      	str	r3, [r2, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    8c44:	f7ff ff42 	bl	8acc <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    8c48:	20fa      	movs	r0, #250	; 0xfa
    8c4a:	f7ff ff3f 	bl	8acc <USBHwCmd>
    
    return iLen;
}
    8c4e:	4628      	mov	r0, r5
    8c50:	bd38      	pop	{r3, r4, r5, pc}
    8c52:	bf00      	nop
    8c54:	5000c228 	.word	0x5000c228
    8c58:	5000c224 	.word	0x5000c224
    8c5c:	5000c21c 	.word	0x5000c21c

00008c60 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    8c60:	b570      	push	{r4, r5, r6, lr}
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    8c62:	4c17      	ldr	r4, [pc, #92]	; (8cc0 <USBHwEPRead+0x60>)
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    8c64:	f000 030f 	and.w	r3, r0, #15
    8c68:	4626      	mov	r6, r4
    8c6a:	09c0      	lsrs	r0, r0, #7
    8c6c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    8c70:	009b      	lsls	r3, r3, #2
    8c72:	f043 0301 	orr.w	r3, r3, #1
    8c76:	6023      	str	r3, [r4, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    8c78:	4b12      	ldr	r3, [pc, #72]	; (8cc4 <USBHwEPRead+0x64>)
    8c7a:	681b      	ldr	r3, [r3, #0]
    } while ((dwLen & PKT_RDY) == 0);
    8c7c:	051d      	lsls	r5, r3, #20
    8c7e:	d5fb      	bpl.n	8c78 <USBHwEPRead+0x18>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    8c80:	055c      	lsls	r4, r3, #21
    8c82:	d51a      	bpl.n	8cba <USBHwEPRead+0x5a>
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    8c84:	2500      	movs	r5, #0
    for (i = 0; i < dwLen; i++) {
    8c86:	462c      	mov	r4, r5
    if ((dwLen & DV) == 0) {
        return -1;
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    8c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    8c8c:	429c      	cmp	r4, r3
    8c8e:	d00b      	beq.n	8ca8 <USBHwEPRead+0x48>
        if ((i % 4) == 0) {
    8c90:	f014 0f03 	tst.w	r4, #3
            dwData = USBRxData;
    8c94:	bf04      	itt	eq
    8c96:	4d0c      	ldreq	r5, [pc, #48]	; (8cc8 <USBHwEPRead+0x68>)
    8c98:	682d      	ldreq	r5, [r5, #0]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    8c9a:	b111      	cbz	r1, 8ca2 <USBHwEPRead+0x42>
    8c9c:	4294      	cmp	r4, r2
            pbBuf[i] = dwData & 0xFF;
    8c9e:	bf38      	it	cc
    8ca0:	550d      	strbcc	r5, [r1, r4]
        }
        dwData >>= 8;
    8ca2:	0a2d      	lsrs	r5, r5, #8
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    8ca4:	3401      	adds	r4, #1
    8ca6:	e7f1      	b.n	8c8c <USBHwEPRead+0x2c>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    8ca8:	2300      	movs	r3, #0
    8caa:	6033      	str	r3, [r6, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    8cac:	f7ff ff0e 	bl	8acc <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    8cb0:	20f2      	movs	r0, #242	; 0xf2
    8cb2:	f7ff ff0b 	bl	8acc <USBHwCmd>
    
    return dwLen;
    8cb6:	4620      	mov	r0, r4
    8cb8:	bd70      	pop	{r4, r5, r6, pc}
        dwLen = USBRxPLen;
    } while ((dwLen & PKT_RDY) == 0);
    
    // packet valid?
    if ((dwLen & DV) == 0) {
        return -1;
    8cba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    
    return dwLen;
}
    8cbe:	bd70      	pop	{r4, r5, r6, pc}
    8cc0:	5000c228 	.word	0x5000c228
    8cc4:	5000c220 	.word	0x5000c220
    8cc8:	5000c218 	.word	0x5000c218

00008ccc <USBHwConfigDevice>:
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    8ccc:	1c01      	adds	r1, r0, #0
    8cce:	bf18      	it	ne
    8cd0:	2101      	movne	r1, #1
    8cd2:	20d8      	movs	r0, #216	; 0xd8
    8cd4:	f7ff bf06 	b.w	8ae4 <USBHwCmdWrite>

00008cd8 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    8cd8:	b538      	push	{r3, r4, r5, lr}

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    8cda:	4b29      	ldr	r3, [pc, #164]	; (8d80 <USBHwISR+0xa8>)
    8cdc:	681c      	ldr	r4, [r3, #0]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    8cde:	07e1      	lsls	r1, r4, #31
    8ce0:	d511      	bpl.n	8d06 <USBHwISR+0x2e>
        // clear int
        USBDevIntClr = FRAME;
    8ce2:	2201      	movs	r2, #1
    8ce4:	609a      	str	r2, [r3, #8]
        // call handler
        if (_pfnFrameHandler != NULL) {
    8ce6:	4b27      	ldr	r3, [pc, #156]	; (8d84 <USBHwISR+0xac>)
    8ce8:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    8cea:	b165      	cbz	r5, 8d06 <USBHwISR+0x2e>
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    8cec:	20f5      	movs	r0, #245	; 0xf5
    8cee:	f7ff feed 	bl	8acc <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8cf2:	4b25      	ldr	r3, [pc, #148]	; (8d88 <USBHwISR+0xb0>)
    8cf4:	4a25      	ldr	r2, [pc, #148]	; (8d8c <USBHwISR+0xb4>)
    Wait4DevInt(CDFULL);
    8cf6:	2020      	movs	r0, #32
{
    // write command code
    USBHwCmd(bCmd);
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8cf8:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    8cfa:	f7ff fedb 	bl	8ab4 <Wait4DevInt>
    return USBCmdData;
    8cfe:	4b24      	ldr	r3, [pc, #144]	; (8d90 <USBHwISR+0xb8>)
    8d00:	6818      	ldr	r0, [r3, #0]
        // clear int
        USBDevIntClr = FRAME;
        // call handler
        if (_pfnFrameHandler != NULL) {
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
            _pfnFrameHandler(wFrame);
    8d02:	b2c0      	uxtb	r0, r0
    8d04:	47a8      	blx	r5
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    8d06:	0722      	lsls	r2, r4, #28
    8d08:	d517      	bpl.n	8d3a <USBHwISR+0x62>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    8d0a:	4b22      	ldr	r3, [pc, #136]	; (8d94 <USBHwISR+0xbc>)
    8d0c:	2208      	movs	r2, #8
    8d0e:	601a      	str	r2, [r3, #0]
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    8d10:	20fe      	movs	r0, #254	; 0xfe
    8d12:	f7ff fedb 	bl	8acc <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8d16:	4b1c      	ldr	r3, [pc, #112]	; (8d88 <USBHwISR+0xb0>)
    8d18:	4a1f      	ldr	r2, [pc, #124]	; (8d98 <USBHwISR+0xc0>)
    Wait4DevInt(CDFULL);
    8d1a:	2020      	movs	r0, #32
{
    // write command code
    USBHwCmd(bCmd);
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    8d1c:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    8d1e:	f7ff fec9 	bl	8ab4 <Wait4DevInt>
    return USBCmdData;
    8d22:	4b1b      	ldr	r3, [pc, #108]	; (8d90 <USBHwISR+0xb8>)
    8d24:	6818      	ldr	r0, [r3, #0]
    8d26:	b2c0      	uxtb	r0, r0
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    8d28:	f010 0f1a 	tst.w	r0, #26
    8d2c:	d005      	beq.n	8d3a <USBHwISR+0x62>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    8d2e:	4b15      	ldr	r3, [pc, #84]	; (8d84 <USBHwISR+0xac>)
    8d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8d32:	b113      	cbz	r3, 8d3a <USBHwISR+0x62>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    8d34:	f000 0015 	and.w	r0, r0, #21
    8d38:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    8d3a:	0763      	lsls	r3, r4, #29
    8d3c:	d51e      	bpl.n	8d7c <USBHwISR+0xa4>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    8d3e:	4b15      	ldr	r3, [pc, #84]	; (8d94 <USBHwISR+0xbc>)
    8d40:	2204      	movs	r2, #4
    8d42:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    8d44:	2400      	movs	r4, #0
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
    8d46:	4a15      	ldr	r2, [pc, #84]	; (8d9c <USBHwISR+0xc4>)
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
            dwIntBit = (1 << i);
    8d48:	2301      	movs	r3, #1
            if (USBEpIntSt & dwIntBit) {
    8d4a:	6812      	ldr	r2, [r2, #0]
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
            dwIntBit = (1 << i);
    8d4c:	40a3      	lsls	r3, r4
            if (USBEpIntSt & dwIntBit) {
    8d4e:	4213      	tst	r3, r2
    8d50:	d011      	beq.n	8d76 <USBHwISR+0x9e>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    8d52:	4a13      	ldr	r2, [pc, #76]	; (8da0 <USBHwISR+0xc8>)
                Wait4DevInt(CDFULL);
    8d54:	2020      	movs	r0, #32
        // check all endpoints
        for (i = 0; i < 32; i++) {
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    8d56:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    8d58:	f7ff feac 	bl	8ab4 <Wait4DevInt>
                bEPStat = USBCmdData;
    8d5c:	4b0c      	ldr	r3, [pc, #48]	; (8d90 <USBHwISR+0xb8>)
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    8d5e:	1060      	asrs	r0, r4, #1
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
                Wait4DevInt(CDFULL);
                bEPStat = USBCmdData;
    8d60:	6819      	ldr	r1, [r3, #0]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    8d62:	4b08      	ldr	r3, [pc, #32]	; (8d84 <USBHwISR+0xac>)
    8d64:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    8d68:	b12b      	cbz	r3, 8d76 <USBHwISR+0x9e>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    8d6a:	ea40 10c4 	orr.w	r0, r0, r4, lsl #7
    8d6e:	b2c0      	uxtb	r0, r0
    8d70:	f001 011f 	and.w	r1, r1, #31
    8d74:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    8d76:	3401      	adds	r4, #1
    8d78:	2c20      	cmp	r4, #32
    8d7a:	d1e4      	bne.n	8d46 <USBHwISR+0x6e>
    8d7c:	bd38      	pop	{r3, r4, r5, pc}
    8d7e:	bf00      	nop
    8d80:	5000c200 	.word	0x5000c200
    8d84:	10000b48 	.word	0x10000b48
    8d88:	5000c210 	.word	0x5000c210
    8d8c:	00f50200 	.word	0x00f50200
    8d90:	5000c214 	.word	0x5000c214
    8d94:	5000c208 	.word	0x5000c208
    8d98:	00fe0200 	.word	0x00fe0200
    8d9c:	5000c230 	.word	0x5000c230
    8da0:	5000c238 	.word	0x5000c238

00008da4 <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    8da4:	b508      	push	{r3, lr}
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    8da6:	4a25      	ldr	r2, [pc, #148]	; (8e3c <USBHwInit+0x98>)
    8da8:	6813      	ldr	r3, [r2, #0]
    8daa:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    8dae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    8db2:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    8db4:	f852 3c04 	ldr.w	r3, [r2, #-4]
    8db8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    8dbc:	f043 0310 	orr.w	r3, r3, #16
    8dc0:	f842 3c04 	str.w	r3, [r2, #-4]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    8dc4:	f852 3c04 	ldr.w	r3, [r2, #-4]
    8dc8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    8dcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    8dd0:	f842 3c04 	str.w	r3, [r2, #-4]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    8dd4:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    8dd8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    8ddc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    8de0:	f842 3c0c 	str.w	r3, [r2, #-12]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    8de4:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    8de8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    8dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    8df0:	f842 3c0c 	str.w	r3, [r2, #-12]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    8df4:	f502 2250 	add.w	r2, r2, #851968	; 0xd0000
    8df8:	32b4      	adds	r2, #180	; 0xb4
    8dfa:	6813      	ldr	r3, [r2, #0]
    8dfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8e00:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    8e02:	4a0f      	ldr	r2, [pc, #60]	; (8e40 <USBHwInit+0x9c>)
    8e04:	6813      	ldr	r3, [r2, #0]
    8e06:	f043 0312 	orr.w	r3, r3, #18
    8e0a:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    8e0c:	4b0d      	ldr	r3, [pc, #52]	; (8e44 <USBHwInit+0xa0>)
    8e0e:	681a      	ldr	r2, [r3, #0]
    8e10:	0791      	lsls	r1, r2, #30
    8e12:	d5fb      	bpl.n	8e0c <USBHwInit+0x68>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    8e14:	681a      	ldr	r2, [r3, #0]
    8e16:	06d2      	lsls	r2, r2, #27
    8e18:	d5fc      	bpl.n	8e14 <USBHwInit+0x70>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    8e1a:	4b0b      	ldr	r3, [pc, #44]	; (8e48 <USBHwInit+0xa4>)
    8e1c:	2000      	movs	r0, #0
    USBDevIntClr = 0xFFFFFFFF;
    8e1e:	4a0b      	ldr	r2, [pc, #44]	; (8e4c <USBHwInit+0xa8>)
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    8e20:	6018      	str	r0, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    8e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8e26:	6013      	str	r3, [r2, #0]
    USBDevIntPri = 0;
    8e28:	6250      	str	r0, [r2, #36]	; 0x24

    USBEpIntEn = 0;
    8e2a:	62d0      	str	r0, [r2, #44]	; 0x2c
    USBEpIntClr = 0xFFFFFFFF;
    8e2c:	6313      	str	r3, [r2, #48]	; 0x30
    USBEpIntPri = 0;
    8e2e:	4b08      	ldr	r3, [pc, #32]	; (8e50 <USBHwInit+0xac>)
    8e30:	6018      	str	r0, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    8e32:	f7ff feb6 	bl	8ba2 <USBHwNakIntEnable>
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
}
    8e36:	2001      	movs	r0, #1
    8e38:	bd08      	pop	{r3, pc}
    8e3a:	bf00      	nop
    8e3c:	4002c010 	.word	0x4002c010
    8e40:	5000cff4 	.word	0x5000cff4
    8e44:	5000cff8 	.word	0x5000cff8
    8e48:	5000c204 	.word	0x5000c204
    8e4c:	5000c208 	.word	0x5000c208
    8e50:	5000c240 	.word	0x5000c240

00008e54 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    8e54:	b570      	push	{r4, r5, r6, lr}
	if(bMsVendorIndex == 0)	{
    8e56:	4c16      	ldr	r4, [pc, #88]	; (8eb0 <USBFilterOsVendorMessage+0x5c>)
    8e58:	7825      	ldrb	r5, [r4, #0]
    8e5a:	2400      	movs	r4, #0
    8e5c:	b315      	cbz	r5, 8ea4 <USBFilterOsVendorMessage+0x50>
		// Feature is disabled.
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    8e5e:	7846      	ldrb	r6, [r0, #1]
    8e60:	42ae      	cmp	r6, r5
    8e62:	d121      	bne.n	8ea8 <USBFilterOsVendorMessage+0x54>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    8e64:	600c      	str	r4, [r1, #0]
	
		int iRequestLength = pSetup->wLength;
    8e66:	88c6      	ldrh	r6, [r0, #6]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    8e68:	8844      	ldrh	r4, [r0, #2]
	
		switch (pSetup->wIndex) {
    8e6a:	8880      	ldrh	r0, [r0, #4]
    8e6c:	2804      	cmp	r0, #4
    8e6e:	d005      	beq.n	8e7c <USBFilterOsVendorMessage+0x28>
    8e70:	2805      	cmp	r0, #5
    8e72:	d11b      	bne.n	8eac <USBFilterOsVendorMessage+0x58>
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
			break;
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    8e74:	480f      	ldr	r0, [pc, #60]	; (8eb4 <USBFilterOsVendorMessage+0x60>)
    8e76:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    8e78:	2092      	movs	r0, #146	; 0x92
    8e7a:	e002      	b.n	8e82 <USBFilterOsVendorMessage+0x2e>
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    8e7c:	480e      	ldr	r0, [pc, #56]	; (8eb8 <USBFilterOsVendorMessage+0x64>)
    8e7e:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    8e80:	2028      	movs	r0, #40	; 0x28
			break;
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    8e82:	6010      	str	r0, [r2, #0]
		default:
			return TRUE;
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    8e84:	0a20      	lsrs	r0, r4, #8
		if (*piLen < iPageOffset) {
    8e86:	6814      	ldr	r4, [r2, #0]
		default:
			return TRUE;
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    8e88:	0400      	lsls	r0, r0, #16
		if (*piLen < iPageOffset) {
    8e8a:	4284      	cmp	r4, r0
    8e8c:	db0e      	blt.n	8eac <USBFilterOsVendorMessage+0x58>
			// Not enough data for the requested offset.
			return TRUE;
		}
		*ppbData += iPageOffset;
    8e8e:	681d      	ldr	r5, [r3, #0]
    8e90:	4405      	add	r5, r0
		*piLen -= iPageOffset;
    8e92:	1a20      	subs	r0, r4, r0
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
		}
		*ppbData += iPageOffset;
    8e94:	601d      	str	r5, [r3, #0]
    8e96:	42b0      	cmp	r0, r6
    8e98:	bfd4      	ite	le
    8e9a:	6010      	strle	r0, [r2, #0]
    8e9c:	6016      	strgt	r6, [r2, #0]
		if (*piLen > iRequestLength) {
			// Clip data longer than the requested length
			*piLen = iRequestLength;
		}
	
		*pfSuccess = TRUE;
    8e9e:	2001      	movs	r0, #1
    8ea0:	6008      	str	r0, [r1, #0]
		return TRUE;
    8ea2:	bd70      	pop	{r4, r5, r6, pc}
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
	if(bMsVendorIndex == 0)	{
		// Feature is disabled.
		return FALSE;
    8ea4:	4628      	mov	r0, r5
    8ea6:	bd70      	pop	{r4, r5, r6, pc}
    8ea8:	4620      	mov	r0, r4
    8eaa:	bd70      	pop	{r4, r5, r6, pc}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
    8eac:	2001      	movs	r0, #1
		return TRUE;
	}
	
	// These are not the requests you are looking for
	return FALSE;
}
    8eae:	bd70      	pop	{r4, r5, r6, pc}
    8eb0:	10000b90 	.word	0x10000b90
    8eb4:	10000959 	.word	0x10000959
    8eb8:	00009bb4 	.word	0x00009bb4

00008ebc <USBRegisterWinusbInterface>:
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
	bMsVendorIndex = bVendorRequestIndex;
    8ebc:	4b08      	ldr	r3, [pc, #32]	; (8ee0 <USBRegisterWinusbInterface+0x24>)
    8ebe:	7018      	strb	r0, [r3, #0]
	
	if(!pcInterfaceGuid) {
    8ec0:	b161      	cbz	r1, 8edc <USBRegisterWinusbInterface+0x20>
    8ec2:	4b08      	ldr	r3, [pc, #32]	; (8ee4 <USBRegisterWinusbInterface+0x28>)
    8ec4:	1e4a      	subs	r2, r1, #1
    8ec6:	3125      	adds	r1, #37	; 0x25
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
		if(!pcInterfaceGuid[i]) break;
    8ec8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    8ecc:	b118      	cbz	r0, 8ed6 <USBRegisterWinusbInterface+0x1a>
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    8ece:	428a      	cmp	r2, r1
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    8ed0:	f803 0b02 	strb.w	r0, [r3], #2
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    8ed4:	d1f8      	bne.n	8ec8 <USBRegisterWinusbInterface+0xc>
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    8ed6:	2200      	movs	r2, #0
    8ed8:	701a      	strb	r2, [r3, #0]
	pbWriteCursor[2] = 0;
    8eda:	709a      	strb	r2, [r3, #2]
    8edc:	4770      	bx	lr
    8ede:	bf00      	nop
    8ee0:	10000b90 	.word	0x10000b90
    8ee4:	1000099b 	.word	0x1000099b

00008ee8 <USBRegisterDescriptors>:

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(U8 *pabDescriptors)
{
	pabDescrip = pabDescriptors;
    8ee8:	4b01      	ldr	r3, [pc, #4]	; (8ef0 <USBRegisterDescriptors+0x8>)
    8eea:	6058      	str	r0, [r3, #4]
    8eec:	4770      	bx	lr
    8eee:	bf00      	nop
    8ef0:	10000b90 	.word	0x10000b90

00008ef4 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    8ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    8ef6:	0a06      	lsrs	r6, r0, #8
	bIndex = GET_DESC_INDEX(wTypeIndex);
	
    if (bType == DESC_STRING &&
    8ef8:	2e03      	cmp	r6, #3
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
	bIndex = GET_DESC_INDEX(wTypeIndex);
    8efa:	b2c4      	uxtb	r4, r0
    8efc:	4811      	ldr	r0, [pc, #68]	; (8f44 <USBGetDescriptor+0x50>)
	
    if (bType == DESC_STRING &&
    8efe:	d108      	bne.n	8f12 <USBGetDescriptor+0x1e>
    8f00:	2cee      	cmp	r4, #238	; 0xee
    8f02:	d106      	bne.n	8f12 <USBGetDescriptor+0x1e>
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    8f04:	4910      	ldr	r1, [pc, #64]	; (8f48 <USBGetDescriptor+0x54>)
    8f06:	7800      	ldrb	r0, [r0, #0]
	
	*ppbData = abOsStringDescriptor;
    8f08:	3192      	adds	r1, #146	; 0x92
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    8f0a:	7408      	strb	r0, [r1, #16]
	
	*ppbData = abOsStringDescriptor;
    8f0c:	6019      	str	r1, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    8f0e:	2312      	movs	r3, #18
    8f10:	e012      	b.n	8f38 <USBGetDescriptor+0x44>
            return TRUE;
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    8f12:	6841      	ldr	r1, [r0, #4]
	iCurIndex = 0;
    8f14:	2500      	movs	r5, #0
	
	while (pab[DESC_bLength] != 0) {
    8f16:	e001      	b.n	8f1c <USBGetDescriptor+0x28>
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
			}
			iCurIndex++;
    8f18:	3501      	adds	r5, #1
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    8f1a:	4401      	add	r1, r0
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    8f1c:	7808      	ldrb	r0, [r1, #0]
    8f1e:	b180      	cbz	r0, 8f42 <USBGetDescriptor+0x4e>
		if (pab[DESC_bDescriptorType] == bType) {
    8f20:	784f      	ldrb	r7, [r1, #1]
    8f22:	42b7      	cmp	r7, r6
    8f24:	d1f9      	bne.n	8f1a <USBGetDescriptor+0x26>
			if (iCurIndex == bIndex) {
    8f26:	42a5      	cmp	r5, r4
    8f28:	d1f6      	bne.n	8f18 <USBGetDescriptor+0x24>
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    8f2a:	2e02      	cmp	r6, #2
	
	while (pab[DESC_bLength] != 0) {
		if (pab[DESC_bDescriptorType] == bType) {
			if (iCurIndex == bIndex) {
				// set data pointer
				*ppbData = pab;
    8f2c:	6019      	str	r1, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    8f2e:	d106      	bne.n	8f3e <USBGetDescriptor+0x4a>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    8f30:	78c8      	ldrb	r0, [r1, #3]
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    8f32:	788b      	ldrb	r3, [r1, #2]
    8f34:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    8f38:	6013      	str	r3, [r2, #0]
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
    8f3a:	2001      	movs	r0, #1
    8f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    8f3e:	780b      	ldrb	r3, [r1, #0]
    8f40:	e7fa      	b.n	8f38 <USBGetDescriptor+0x44>
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
}
    8f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f44:	10000b90 	.word	0x10000b90
    8f48:	10000959 	.word	0x10000959

00008f4c <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    8f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    8f50:	4e4b      	ldr	r6, [pc, #300]	; (9080 <USBHandleStandardRequest+0x134>)
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    8f52:	4605      	mov	r5, r0
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    8f54:	68b3      	ldr	r3, [r6, #8]
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    8f56:	460f      	mov	r7, r1
    8f58:	4614      	mov	r4, r2
    8f5a:	46b0      	mov	r8, r6
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    8f5c:	b943      	cbnz	r3, 8f70 <USBHandleStandardRequest+0x24>
		return TRUE;
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    8f5e:	7828      	ldrb	r0, [r5, #0]
    8f60:	f000 061f 	and.w	r6, r0, #31
    8f64:	2e01      	cmp	r6, #1
    8f66:	d055      	beq.n	9014 <USBHandleStandardRequest+0xc8>
    8f68:	d306      	bcc.n	8f78 <USBHandleStandardRequest+0x2c>
    8f6a:	2e02      	cmp	r6, #2
    8f6c:	d064      	beq.n	9038 <USBHandleStandardRequest+0xec>
    8f6e:	e083      	b.n	9078 <USBHandleStandardRequest+0x12c>
	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    8f70:	4798      	blx	r3
    8f72:	2800      	cmp	r0, #0
    8f74:	d0f3      	beq.n	8f5e <USBHandleStandardRequest+0x12>
    8f76:	e04a      	b.n	900e <USBHandleStandardRequest+0xc2>
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    8f78:	786a      	ldrb	r2, [r5, #1]

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;
    8f7a:	6823      	ldr	r3, [r4, #0]

	switch (pSetup->bRequest) {
    8f7c:	2a09      	cmp	r2, #9
    8f7e:	d87b      	bhi.n	9078 <USBHandleStandardRequest+0x12c>
    8f80:	e8df f002 	tbb	[pc, r2]
    8f84:	7a7a7a05 	.word	0x7a7a7a05
    8f88:	7a0d097a 	.word	0x7a0d097a
    8f8c:	1c15      	.short	0x1c15
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    8f8e:	2200      	movs	r2, #0
    8f90:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    8f92:	705a      	strb	r2, [r3, #1]
    8f94:	e047      	b.n	9026 <USBHandleStandardRequest+0xda>
		*piLen = 2;
		break;
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    8f96:	78a8      	ldrb	r0, [r5, #2]
    8f98:	f7ff fdf8 	bl	8b8c <USBHwSetAddress>
    8f9c:	e037      	b.n	900e <USBHandleStandardRequest+0xc2>
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    8f9e:	8868      	ldrh	r0, [r5, #2]
    8fa0:	88a9      	ldrh	r1, [r5, #4]
    8fa2:	463a      	mov	r2, r7
    8fa4:	4623      	mov	r3, r4
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    8fa6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		USBHwSetAddress(pSetup->wValue);
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    8faa:	f7ff bfa3 	b.w	8ef4 <USBGetDescriptor>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    8fae:	f898 200c 	ldrb.w	r2, [r8, #12]
		*piLen = 1;
    8fb2:	2001      	movs	r0, #1
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    8fb4:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    8fb6:	6038      	str	r0, [r7, #0]
    8fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		break;

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    8fbc:	78ae      	ldrb	r6, [r5, #2]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    8fbe:	b90e      	cbnz	r6, 8fc4 <USBHandleStandardRequest+0x78>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    8fc0:	4630      	mov	r0, r6
    8fc2:	e01f      	b.n	9004 <USBHandleStandardRequest+0xb8>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;
    8fc4:	27ff      	movs	r7, #255	; 0xff
		USBHwConfigDevice(FALSE);
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
    8fc6:	46b9      	mov	r9, r7
		// unconfigure device
		USBHwConfigDevice(FALSE);
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    8fc8:	f8d8 4004 	ldr.w	r4, [r8, #4]
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    8fcc:	7823      	ldrb	r3, [r4, #0]
    8fce:	b1c3      	cbz	r3, 9002 <USBHandleStandardRequest+0xb6>

			switch (pab[DESC_bDescriptorType]) {
    8fd0:	7863      	ldrb	r3, [r4, #1]
    8fd2:	2b04      	cmp	r3, #4
    8fd4:	d006      	beq.n	8fe4 <USBHandleStandardRequest+0x98>
    8fd6:	2b05      	cmp	r3, #5
    8fd8:	d006      	beq.n	8fe8 <USBHandleStandardRequest+0x9c>
    8fda:	2b02      	cmp	r3, #2
    8fdc:	d10e      	bne.n	8ffc <USBHandleStandardRequest+0xb0>

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    8fde:	f894 9005 	ldrb.w	r9, [r4, #5]
    8fe2:	e00b      	b.n	8ffc <USBHandleStandardRequest+0xb0>
				break;

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    8fe4:	78e7      	ldrb	r7, [r4, #3]
    8fe6:	e009      	b.n	8ffc <USBHandleStandardRequest+0xb0>
				break;

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    8fe8:	45b1      	cmp	r9, r6
    8fea:	d107      	bne.n	8ffc <USBHandleStandardRequest+0xb0>
    8fec:	b937      	cbnz	r7, 8ffc <USBHandleStandardRequest+0xb0>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    8fee:	7961      	ldrb	r1, [r4, #5]
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    8ff0:	7923      	ldrb	r3, [r4, #4]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    8ff2:	78a0      	ldrb	r0, [r4, #2]
    8ff4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    8ff8:	f7ff fd84 	bl	8b04 <USBHwEPConfig>

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    8ffc:	7823      	ldrb	r3, [r4, #0]
    8ffe:	441c      	add	r4, r3
    9000:	e7e4      	b.n	8fcc <USBHandleStandardRequest+0x80>
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    9002:	2001      	movs	r0, #1
    9004:	f7ff fe62 	bl	8ccc <USBHwConfigDevice>
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    9008:	886b      	ldrh	r3, [r5, #2]
    900a:	f888 300c 	strb.w	r3, [r8, #12]
	default:
		DBG("Illegal device req %d\n", pSetup->bRequest);
		return FALSE;
	}
	
	return TRUE;
    900e:	2001      	movs	r0, #1
    9010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    9014:	786b      	ldrb	r3, [r5, #1]
    9016:	6822      	ldr	r2, [r4, #0]
    9018:	2b0a      	cmp	r3, #10
    901a:	d006      	beq.n	902a <USBHandleStandardRequest+0xde>
    901c:	2b0b      	cmp	r3, #11
    901e:	d007      	beq.n	9030 <USBHandleStandardRequest+0xe4>
    9020:	bb53      	cbnz	r3, 9078 <USBHandleStandardRequest+0x12c>

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    9022:	7013      	strb	r3, [r2, #0]
		pbData[1] = 0;
    9024:	7053      	strb	r3, [r2, #1]
		*piLen = 2;
    9026:	2302      	movs	r3, #2
    9028:	e004      	b.n	9034 <USBHandleStandardRequest+0xe8>
		// not defined for interface
		return FALSE;
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    902a:	2300      	movs	r3, #0
    902c:	7013      	strb	r3, [r2, #0]
    902e:	e016      	b.n	905e <USBHandleStandardRequest+0x112>
		*piLen = 1;
		break;
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    9030:	886b      	ldrh	r3, [r5, #2]
    9032:	bb0b      	cbnz	r3, 9078 <USBHandleStandardRequest+0x12c>
			return FALSE;
		}
		*piLen = 0;
    9034:	603b      	str	r3, [r7, #0]
    9036:	e7ea      	b.n	900e <USBHandleStandardRequest+0xc2>
    9038:	f8d4 8000 	ldr.w	r8, [r4]
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    903c:	786c      	ldrb	r4, [r5, #1]
    903e:	2c01      	cmp	r4, #1
    9040:	d00f      	beq.n	9062 <USBHandleStandardRequest+0x116>
    9042:	d302      	bcc.n	904a <USBHandleStandardRequest+0xfe>
    9044:	2c03      	cmp	r4, #3
    9046:	d010      	beq.n	906a <USBHandleStandardRequest+0x11e>
    9048:	e016      	b.n	9078 <USBHandleStandardRequest+0x12c>
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    904a:	7928      	ldrb	r0, [r5, #4]
    904c:	f7ff fdae 	bl	8bac <USBHwEPGetStatus>
		pbData[1] = 0;
    9050:	2300      	movs	r3, #0
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    9052:	f3c0 0040 	ubfx	r0, r0, #1, #1
    9056:	f888 0000 	strb.w	r0, [r8]
		pbData[1] = 0;
    905a:	f888 3001 	strb.w	r3, [r8, #1]
		*piLen = 2;
    905e:	603e      	str	r6, [r7, #0]
    9060:	e7d5      	b.n	900e <USBHandleStandardRequest+0xc2>
		break;
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    9062:	8869      	ldrh	r1, [r5, #2]
    9064:	b941      	cbnz	r1, 9078 <USBHandleStandardRequest+0x12c>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    9066:	7928      	ldrb	r0, [r5, #4]
    9068:	e003      	b.n	9072 <USBHandleStandardRequest+0x126>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    906a:	886b      	ldrh	r3, [r5, #2]
    906c:	b923      	cbnz	r3, 9078 <USBHandleStandardRequest+0x12c>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    906e:	7928      	ldrb	r0, [r5, #4]
    9070:	2101      	movs	r1, #1
    9072:	f7ff fdb5 	bl	8be0 <USBHwEPStall>
    9076:	e7ca      	b.n	900e <USBHandleStandardRequest+0xc2>
		break;
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
			return FALSE;
    9078:	2000      	movs	r0, #0
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    907a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    907e:	bf00      	nop
    9080:	10000b90 	.word	0x10000b90

00009084 <__aeabi_llsl>:
    9084:	4091      	lsls	r1, r2
    9086:	1c03      	adds	r3, r0, #0
    9088:	4090      	lsls	r0, r2
    908a:	469c      	mov	ip, r3
    908c:	3a20      	subs	r2, #32
    908e:	4093      	lsls	r3, r2
    9090:	4319      	orrs	r1, r3
    9092:	4252      	negs	r2, r2
    9094:	4663      	mov	r3, ip
    9096:	40d3      	lsrs	r3, r2
    9098:	4319      	orrs	r1, r3
    909a:	4770      	bx	lr

0000909c <memcmp>:
    909c:	2a03      	cmp	r2, #3
    909e:	b470      	push	{r4, r5, r6}
    90a0:	d926      	bls.n	90f0 <memcmp+0x54>
    90a2:	ea40 0301 	orr.w	r3, r0, r1
    90a6:	079b      	lsls	r3, r3, #30
    90a8:	d011      	beq.n	90ce <memcmp+0x32>
    90aa:	7804      	ldrb	r4, [r0, #0]
    90ac:	780d      	ldrb	r5, [r1, #0]
    90ae:	42ac      	cmp	r4, r5
    90b0:	d122      	bne.n	90f8 <memcmp+0x5c>
    90b2:	4402      	add	r2, r0
    90b4:	1c43      	adds	r3, r0, #1
    90b6:	e005      	b.n	90c4 <memcmp+0x28>
    90b8:	f813 4b01 	ldrb.w	r4, [r3], #1
    90bc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    90c0:	42ac      	cmp	r4, r5
    90c2:	d119      	bne.n	90f8 <memcmp+0x5c>
    90c4:	4293      	cmp	r3, r2
    90c6:	d1f7      	bne.n	90b8 <memcmp+0x1c>
    90c8:	2000      	movs	r0, #0
    90ca:	bc70      	pop	{r4, r5, r6}
    90cc:	4770      	bx	lr
    90ce:	460c      	mov	r4, r1
    90d0:	4603      	mov	r3, r0
    90d2:	681e      	ldr	r6, [r3, #0]
    90d4:	6825      	ldr	r5, [r4, #0]
    90d6:	4618      	mov	r0, r3
    90d8:	42ae      	cmp	r6, r5
    90da:	4621      	mov	r1, r4
    90dc:	f103 0304 	add.w	r3, r3, #4
    90e0:	f104 0404 	add.w	r4, r4, #4
    90e4:	d104      	bne.n	90f0 <memcmp+0x54>
    90e6:	3a04      	subs	r2, #4
    90e8:	2a03      	cmp	r2, #3
    90ea:	4618      	mov	r0, r3
    90ec:	4621      	mov	r1, r4
    90ee:	d8f0      	bhi.n	90d2 <memcmp+0x36>
    90f0:	2a00      	cmp	r2, #0
    90f2:	d1da      	bne.n	90aa <memcmp+0xe>
    90f4:	4610      	mov	r0, r2
    90f6:	e7e8      	b.n	90ca <memcmp+0x2e>
    90f8:	1b60      	subs	r0, r4, r5
    90fa:	bc70      	pop	{r4, r5, r6}
    90fc:	4770      	bx	lr
    90fe:	bf00      	nop

00009100 <memcpy>:
    9100:	4684      	mov	ip, r0
    9102:	ea41 0300 	orr.w	r3, r1, r0
    9106:	f013 0303 	ands.w	r3, r3, #3
    910a:	d149      	bne.n	91a0 <memcpy+0xa0>
    910c:	3a40      	subs	r2, #64	; 0x40
    910e:	d323      	bcc.n	9158 <memcpy+0x58>
    9110:	680b      	ldr	r3, [r1, #0]
    9112:	6003      	str	r3, [r0, #0]
    9114:	684b      	ldr	r3, [r1, #4]
    9116:	6043      	str	r3, [r0, #4]
    9118:	688b      	ldr	r3, [r1, #8]
    911a:	6083      	str	r3, [r0, #8]
    911c:	68cb      	ldr	r3, [r1, #12]
    911e:	60c3      	str	r3, [r0, #12]
    9120:	690b      	ldr	r3, [r1, #16]
    9122:	6103      	str	r3, [r0, #16]
    9124:	694b      	ldr	r3, [r1, #20]
    9126:	6143      	str	r3, [r0, #20]
    9128:	698b      	ldr	r3, [r1, #24]
    912a:	6183      	str	r3, [r0, #24]
    912c:	69cb      	ldr	r3, [r1, #28]
    912e:	61c3      	str	r3, [r0, #28]
    9130:	6a0b      	ldr	r3, [r1, #32]
    9132:	6203      	str	r3, [r0, #32]
    9134:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    9136:	6243      	str	r3, [r0, #36]	; 0x24
    9138:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    913a:	6283      	str	r3, [r0, #40]	; 0x28
    913c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    913e:	62c3      	str	r3, [r0, #44]	; 0x2c
    9140:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    9142:	6303      	str	r3, [r0, #48]	; 0x30
    9144:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    9146:	6343      	str	r3, [r0, #52]	; 0x34
    9148:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    914a:	6383      	str	r3, [r0, #56]	; 0x38
    914c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    914e:	63c3      	str	r3, [r0, #60]	; 0x3c
    9150:	3040      	adds	r0, #64	; 0x40
    9152:	3140      	adds	r1, #64	; 0x40
    9154:	3a40      	subs	r2, #64	; 0x40
    9156:	d2db      	bcs.n	9110 <memcpy+0x10>
    9158:	3230      	adds	r2, #48	; 0x30
    915a:	d30b      	bcc.n	9174 <memcpy+0x74>
    915c:	680b      	ldr	r3, [r1, #0]
    915e:	6003      	str	r3, [r0, #0]
    9160:	684b      	ldr	r3, [r1, #4]
    9162:	6043      	str	r3, [r0, #4]
    9164:	688b      	ldr	r3, [r1, #8]
    9166:	6083      	str	r3, [r0, #8]
    9168:	68cb      	ldr	r3, [r1, #12]
    916a:	60c3      	str	r3, [r0, #12]
    916c:	3010      	adds	r0, #16
    916e:	3110      	adds	r1, #16
    9170:	3a10      	subs	r2, #16
    9172:	d2f3      	bcs.n	915c <memcpy+0x5c>
    9174:	320c      	adds	r2, #12
    9176:	d305      	bcc.n	9184 <memcpy+0x84>
    9178:	f851 3b04 	ldr.w	r3, [r1], #4
    917c:	f840 3b04 	str.w	r3, [r0], #4
    9180:	3a04      	subs	r2, #4
    9182:	d2f9      	bcs.n	9178 <memcpy+0x78>
    9184:	3204      	adds	r2, #4
    9186:	d008      	beq.n	919a <memcpy+0x9a>
    9188:	07d2      	lsls	r2, r2, #31
    918a:	bf1c      	itt	ne
    918c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    9190:	f800 3b01 	strbne.w	r3, [r0], #1
    9194:	d301      	bcc.n	919a <memcpy+0x9a>
    9196:	880b      	ldrh	r3, [r1, #0]
    9198:	8003      	strh	r3, [r0, #0]
    919a:	4660      	mov	r0, ip
    919c:	4770      	bx	lr
    919e:	bf00      	nop
    91a0:	2a08      	cmp	r2, #8
    91a2:	d313      	bcc.n	91cc <memcpy+0xcc>
    91a4:	078b      	lsls	r3, r1, #30
    91a6:	d0b1      	beq.n	910c <memcpy+0xc>
    91a8:	f010 0303 	ands.w	r3, r0, #3
    91ac:	d0ae      	beq.n	910c <memcpy+0xc>
    91ae:	f1c3 0304 	rsb	r3, r3, #4
    91b2:	1ad2      	subs	r2, r2, r3
    91b4:	07db      	lsls	r3, r3, #31
    91b6:	bf1c      	itt	ne
    91b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
    91bc:	f800 3b01 	strbne.w	r3, [r0], #1
    91c0:	d3a4      	bcc.n	910c <memcpy+0xc>
    91c2:	f831 3b02 	ldrh.w	r3, [r1], #2
    91c6:	f820 3b02 	strh.w	r3, [r0], #2
    91ca:	e79f      	b.n	910c <memcpy+0xc>
    91cc:	3a04      	subs	r2, #4
    91ce:	d3d9      	bcc.n	9184 <memcpy+0x84>
    91d0:	3a01      	subs	r2, #1
    91d2:	f811 3b01 	ldrb.w	r3, [r1], #1
    91d6:	f800 3b01 	strb.w	r3, [r0], #1
    91da:	d2f9      	bcs.n	91d0 <memcpy+0xd0>
    91dc:	780b      	ldrb	r3, [r1, #0]
    91de:	7003      	strb	r3, [r0, #0]
    91e0:	784b      	ldrb	r3, [r1, #1]
    91e2:	7043      	strb	r3, [r0, #1]
    91e4:	788b      	ldrb	r3, [r1, #2]
    91e6:	7083      	strb	r3, [r0, #2]
    91e8:	4660      	mov	r0, ip
    91ea:	4770      	bx	lr

000091ec <strlen>:
    91ec:	f020 0103 	bic.w	r1, r0, #3
    91f0:	f010 0003 	ands.w	r0, r0, #3
    91f4:	f1c0 0000 	rsb	r0, r0, #0
    91f8:	f851 3b04 	ldr.w	r3, [r1], #4
    91fc:	f100 0c04 	add.w	ip, r0, #4
    9200:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    9204:	f06f 0200 	mvn.w	r2, #0
    9208:	bf1c      	itt	ne
    920a:	fa22 f20c 	lsrne.w	r2, r2, ip
    920e:	4313      	orrne	r3, r2
    9210:	f04f 0c01 	mov.w	ip, #1
    9214:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    9218:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    921c:	eba3 020c 	sub.w	r2, r3, ip
    9220:	ea22 0203 	bic.w	r2, r2, r3
    9224:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    9228:	bf04      	itt	eq
    922a:	f851 3b04 	ldreq.w	r3, [r1], #4
    922e:	3004      	addeq	r0, #4
    9230:	d0f4      	beq.n	921c <strlen+0x30>
    9232:	f1c2 0100 	rsb	r1, r2, #0
    9236:	ea02 0201 	and.w	r2, r2, r1
    923a:	fab2 f282 	clz	r2, r2
    923e:	f1c2 021f 	rsb	r2, r2, #31
    9242:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    9246:	4770      	bx	lr
    9248:	00000043 	.word	0x00000043

0000924c <_global_impure_ptr>:
    924c:	10000020                                 ...

00009250 <whitening_index>:
    9250:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    9260:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    9270:	5a541b28 662f703f                       (.TZ?p/f

00009278 <whitening>:
    9278:	01010101 01000100 00000100 00010000     ................
    9288:	01000101 00010101 01010100 00010000     ................
    9298:	01010001 01010000 00000000 00010100     ................
    92a8:	01000101 01010100 00000100 00010100     ................
    92b8:	00000100 00000100 00000000 01000001     ................
    92c8:	01010000 00000100 01010101 01010100     ................
    92d8:	00000000 01010101 00010101 01010000     ................
    92e8:	01010001 01000000 00000100 75010001              ...............

000092f7 <compile_info>:
    92f7:	72656275 746f6f74 69672068 65312d74     ubertooth git-1e
    9307:	33343865 28202a34 73656861 406d6168     e8434* (ahesham@
    9317:	73656861 296d6168 75685420 72704120     ahesham) Thu Apr
    9327:	20373220 353a3231 39343a33 54444520      27 12:53:49 EDT
    9337:	31303220 00000037 bcb24000                        2017....

00009340 <whitening_word>:
    9340:	c3bcb240 5f4a371f 9a9cf685 44c5d6c1     @....7J_.......D
    9350:	e1de5920 afa51b8f cd4e7b42 2262eb60      Y......B{N.`.b"
    9360:	f0ef2c90 57d28dc7 66a73da1 113175b0     .,.....W.=.f.u1.
    9370:	bcb24089 4a371fc3 9cf6855f c5d6c19a     .@....7J_.......
    9380:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    9390:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    93a0:	3da157d2 75b066a7 96481131 46e3f877     .W.=.f.u1.H.w..F
    93b0:	9ed0abe9 bad83353 cb240898 a371fc3b     ....S3....$.;.q.
    93c0:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    93d0:	42afa51b 60cd4e7b 902262eb c7f0ef2c     ...B{N.`.b".,...
    93e0:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    93f0:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    9400:	3f877964 0abe946e 833539ed 40898bad     dy.?n....95....@
    9410:	1fc3bcb2 855f4a37 c19a9cf6 2044c5d6     ....7J_.......D 
    9420:	8fe1de59 42afa51b 60cd4e7b 902262eb     Y......B{N.`.b".
    9430:	40898bad 1fc3bcb2 855f4a37 c19a9cf6     ...@....7J_.....
    9440:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    9450:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    9460:	c19a9cf6 2044c5d6 8fe1de59 42afa51b     ......D Y......B
    9470:	60cd4e7b 902262eb c7f0ef2c a157d28d     {N.`.b".,.....W.
    9480:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    9490:	be946e3f 3539ed0a 898bad83 c3bcb240     ?n....95....@...
    94a0:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    94b0:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    94c0:	3bcb2408 f4a371fc a9cf6855 4c5d6c19     .$.;.q..Uh...l]L
    94d0:	1de59204 fa51b8fe d4e7b42a 262eb60c     ......Q.*......&
    94e0:	0ef2c902 7d28dc7f 6a73da15 13175b06     ......(}..sj.[..
    94f0:	44c5d6c1 e1de5920 afa51b8f cd4e7b42     ...D Y......B{N.
    9500:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    9510:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    9520:	c5d6c19a de592044 a51b8fe1 4e7b42af     ....D Y......B{N
    9530:	62eb60cd ef2c9022 d28dc7f0 a73da157     .`.b".,.....W.=.
    9540:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    9550:	bad83353 cb240898 a371fc3b cf6855f4     S3....$.;.q..Uh.
    9560:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    9570:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    9580:	c7f0ef2c a157d28d b066a73d 48113175     ,.....W.=.f.u1.H
    9590:	e3f87796 d0abe946 d833539e 240898ba     .w..F....S3....$
    95a0:	71fc3bcb 6855f4a3 6c19a9cf 92044c5d     .;.q..Uh...l]L..
    95b0:	b8fe1de5 b42afa51 b60cd4e7 c902262e     ....Q.*......&..
    95c0:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    95d0:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    95e0:	39ed0abe 8bad8335 bcb24089 4a371fc3     ...95....@....7J
    95f0:	9cf6855f c5d6c19a de592044 a51b8fe1     _.......D Y.....
    9600:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    9610:	46e3f877 9ed0abe9 bad83353 cb240898     w..F....S3....$.
    9620:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    9630:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    9640:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    9650:	19a9cf68 044c5d6c fe1de592 2afa51b8     h...l]L......Q.*
    9660:	0cd4e7b4 02262eb6 7f0ef2c9 157d28dc     ......&......(}.
    9670:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    9680:	262eb60c 0ef2c902 7d28dc7f 6a73da15     ...&......(}..sj
    9690:	13175b06 87796481 be946e3f 3539ed0a     .[...dy.?n....95
    96a0:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    96b0:	66a73da1 113175b0 f8779648 abe946e3     .=.f.u1.H.w..F..
    96c0:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    96d0:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    96e0:	592044c5 1b8fe1de 7b42afa5 eb60cd4e     .D Y......B{N.`.
    96f0:	2c902262 8dc7f0ef 3da157d2 75b066a7     b".,.....W.=.f.u
    9700:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    9710:	e7b42afa 2eb60cd4 f2c90226 28dc7f0e     .*......&......(
    9720:	73da157d 175b066a 79648113 946e3f87     }..sj.[...dy.?n.
    9730:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    9740:	d833539e 240898ba 71fc3bcb 6855f4a3     .S3....$.;.q..Uh
    9750:	6c19a9cf 92044c5d b8fe1de5 b42afa51     ...l]L......Q.*.
    9760:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    9770:	98bad833 3bcb2408 f4a371fc a9cf6855     3....$.;.q..Uh..
    9780:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    9790:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    97a0:	a73da157 3175b066 77964811 e946e3f8     W.=.f.u1.H.w..F.
    97b0:	539ed0ab 98bad833 3bcb2408 f4a371fc     ...S3....$.;.q..
    97c0:	cb240898 a371fc3b cf6855f4 5d6c19a9     ..$.;.q..Uh...l]
    97d0:	e592044c 51b8fe1d e7b42afa 2eb60cd4     L......Q.*......
    97e0:	f2c90226 28dc7f0e 73da157d 175b066a     &......(}..sj.[.
    97f0:	b42afa51 b60cd4e7 c902262e dc7f0ef2     Q.*......&......
    9800:	da157d28 5b066a73 64811317 6e3f8779     (}..sj.[...dy.?n
    9810:	ed0abe94 ad833539 b240898b 371fc3bc     ....95....@....7
    9820:	3539ed0a 898bad83 c3bcb240 5f4a371f     ..95....@....7J_
    9830:	9a9cf685 44c5d6c1 e1de5920 afa51b8f     .......D Y......
    9840:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    9850:	4a371fc3 9cf6855f c5d6c19a de592044     ..7J_.......D Y.
    9860:	a51b8fe1 4e7b42af 62eb60cd ef2c9022     .....B{N.`.b".,.
    9870:	d28dc7f0 a73da157 3175b066 77964811     ....W.=.f.u1.H.w
    9880:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    9890:	1b8fe1de 7b42afa5 eb60cd4e 2c902262     ......B{N.`.b".,
    98a0:	8dc7f0ef 3da157d2 75b066a7 96481131     .....W.=.f.u1.H.
    98b0:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    98c0:	240898ba 71fc3bcb 6855f4a3 6c19a9cf     ...$.;.q..Uh...l
    98d0:	92044c5d b8fe1de5 b42afa51 b60cd4e7     ]L......Q.*.....
    98e0:	c902262e dc7f0ef2 da157d28 5b066a73     .&......(}..sj.[
    98f0:	64811317 6e3f8779 ed0abe94 ad833539     ...dy.?n....95..
    9900:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    9910:	b60cd4e7 c902262e dc7f0ef2 da157d28     .....&......(}..
    9920:	5b066a73 64811317 6e3f8779 ed0abe94     sj.[...dy.?n....
    9930:	ad833539 b240898b 371fc3bc f6855f4a     95....@....7J_..
    9940:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    9950:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    9960:	0898bad8 fc3bcb24 55f4a371 19a9cf68     ....$.;.q..Uh...
    9970:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    9980:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    9990:	175b066a 79648113 946e3f87 39ed0abe     j.[...dy.?n....9
    99a0:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    99b0:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    99c0:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    99d0:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    99e0:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    99f0:	28dc7f0e 73da157d 175b066a 79648113     ...(}..sj.[...dy
    9a00:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    9a10:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    9a20:	77964811 e946e3f8 539ed0ab 98bad833     .H.w..F....S3...
    9a30:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    9a40:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    9a50:	6855f4a3 6c19a9cf 92044c5d b8fe1de5     ..Uh...l]L......
    9a60:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    9a70:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    9a80:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    9a90:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    9aa0:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    9ab0:	57d28dc7 66a73da1 113175b0 f8779648     ...W.=.f.u1.H.w.

00009ac0 <hop_interval_lut>:
    9ac0:	19130100 101f0f1c 1b1a210e 05081422     .........!.."...
    9ad0:	02231807 1d201e0d 0b0a0311 06151704     ..#... .........
    9ae0:	120c0916 00000024 00000001 00000001     ....$...........
    9af0:	00000001 00000001 ffff0900 ffffffff     ................
    9b00:	ff050102 096cffff 099e0985 2d746967     ......l.....git-
    9b10:	38656531 2a343334 01020000                       1ee8434*.

00009b19 <index1.3940>:
    9b19:	03010200 03000100 01020001 03010100              ..............

00009b27 <index2.3941>:
    9b27:	04020301 04020304 03040304 387b0203     ..............{8
    9b37:	37346361 2d383861 36326363 6161342d     ac47a88-cc26-4aa
    9b47:	38382d39 342d6237 38616332 37306663     9-887b-42ca8cf07
    9b57:	7d333661 72096800                                a63}.

00009b5c <channels>:
    9b5c:	09720968 09a50977                       h.r.w...

00009b64 <follow_handler.4031>:
    9b64:	00007ed9 00007ef9 00008201 00008051     .~...~......Q...
    9b74:	00007ed5 00007ed5 00007ed5              .~...~...~..

00009b80 <continuous_rx_handler.4032>:
    9b80:	00007ef1 00007ef9 00008121 00007ed5     .~...~..!....~..
    9b90:	00007ed5 00007ed5                       .~...~..

00009b98 <jam_handler.4033>:
    9b98:	00007ed9 00007ef9 0000819d 0000809d     .~...~..........
    9ba8:	00007fad 000080bd                       ........

00009bb0 <iap_entry>:
    9bb0:	1fff1ff1                                ....

00009bb4 <abExtendedOsFeatureDescriptor>:
    9bb4:	00000028 00040100 00000001 00000000     (...............
    9bc4:	49570100 4253554e 00000000 00000000     ..WINUSB........
    9bd4:	00000000 00000000                       ........

00009bdc <_init>:
    9bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9bde:	bf00      	nop
    9be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9be2:	bc08      	pop	{r3}
    9be4:	469e      	mov	lr, r3
    9be6:	4770      	bx	lr

00009be8 <__init_array_start>:
    9be8:	00004215 	.word	0x00004215

00009bec <__frame_dummy_init_array_entry>:
    9bec:	000040f1                                .@..

00009bf0 <_fini>:
    9bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9bf2:	bf00      	nop
    9bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9bf6:	bc08      	pop	{r3}
    9bf8:	469e      	mov	lr, r3
    9bfa:	4770      	bx	lr

00009bfc <__fini_array_start>:
    9bfc:	000040cd 	.word	0x000040cd

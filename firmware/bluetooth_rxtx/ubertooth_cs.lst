ARM GAS  /var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ubertooth_cs.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.cs_threshold_calc_and_set,"ax",%progbits
  19              		.align	1
  20              		.global	cs_threshold_calc_and_set
  21              		.thumb
  22              		.thumb_func
  24              	cs_threshold_calc_and_set:
  25              	.LFB1:
  26              		.file 1 "ubertooth_cs.c"
   1:ubertooth_cs.c **** /*
   2:ubertooth_cs.c ****  * Copyright 2015 Hannes Ellinger
   3:ubertooth_cs.c ****  *
   4:ubertooth_cs.c ****  * This file is part of Project Ubertooth.
   5:ubertooth_cs.c ****  *
   6:ubertooth_cs.c ****  * This program is free software; you can redistribute it and/or modify
   7:ubertooth_cs.c ****  * it under the terms of the GNU General Public License as published by
   8:ubertooth_cs.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:ubertooth_cs.c ****  * any later version.
  10:ubertooth_cs.c ****  *
  11:ubertooth_cs.c ****  * This program is distributed in the hope that it will be useful,
  12:ubertooth_cs.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:ubertooth_cs.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:ubertooth_cs.c ****  * GNU General Public License for more details.
  15:ubertooth_cs.c ****  *
  16:ubertooth_cs.c ****  * You should have received a copy of the GNU General Public License
  17:ubertooth_cs.c ****  * along with this program; see the file COPYING.  If not, write to
  18:ubertooth_cs.c ****  * the Free Software Foundation, Inc., 51 Franklin Street,
  19:ubertooth_cs.c ****  * Boston, MA 02110-1301, USA.
  20:ubertooth_cs.c ****  */
  21:ubertooth_cs.c **** 
  22:ubertooth_cs.c **** #include "ubertooth_cs.h"
  23:ubertooth_cs.c **** #include "ubertooth.h"
  24:ubertooth_cs.c **** #include "ubertooth_rssi.h"
  25:ubertooth_cs.c **** 
  26:ubertooth_cs.c **** typedef enum {
  27:ubertooth_cs.c **** 	CS_SAMPLES_1 = 1,
  28:ubertooth_cs.c **** 	CS_SAMPLES_2 = 2,
  29:ubertooth_cs.c **** 	CS_SAMPLES_4 = 3,
  30:ubertooth_cs.c **** 	CS_SAMPLES_8 = 4,
  31:ubertooth_cs.c **** } cs_samples_t;
  32:ubertooth_cs.c **** 
ARM GAS  /var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s 			page 2


  33:ubertooth_cs.c **** #define CS_THRESHOLD_DEFAULT (int8_t)(-120)
  34:ubertooth_cs.c **** 
  35:ubertooth_cs.c **** 
  36:ubertooth_cs.c **** /* Set CC2400 carrier sense threshold and store value to
  37:ubertooth_cs.c ****  * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
  38:ubertooth_cs.c ****  * in 4dBm steps, so the provided level is rounded to the nearest
  39:ubertooth_cs.c ****  * multiple of 4 by adding 56. Useful range is -100 to -20. */
  40:ubertooth_cs.c **** static void cs_threshold_set(int8_t level, cs_samples_t samples)
  41:ubertooth_cs.c **** {
  42:ubertooth_cs.c **** 	level = level < -120 ? -120 : level;
  43:ubertooth_cs.c **** 	level = level > -20 ? -20 : level;
  44:ubertooth_cs.c **** 	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | ((uint8_t)samples&3));
  45:ubertooth_cs.c **** 	cs_threshold_cur = level;
  46:ubertooth_cs.c **** 	cs_no_squelch = (level <= -120);
  47:ubertooth_cs.c **** }
  48:ubertooth_cs.c **** 
  49:ubertooth_cs.c **** void cs_threshold_calc_and_set(uint16_t channel)
  50:ubertooth_cs.c **** {
  27              		.loc 1 50 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 38B5     		push	{r3, r4, r5, lr}
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 3, -16
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  51:ubertooth_cs.c **** 	int8_t level;
  52:ubertooth_cs.c **** 
  53:ubertooth_cs.c **** 	/* If threshold is max/avg based (>0), reset here while rx is
  54:ubertooth_cs.c **** 	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
  55:ubertooth_cs.c **** 	 * channel is known to be in the BT band, i.e., rssi_iir has a
  56:ubertooth_cs.c **** 	 * value for it. */
  57:ubertooth_cs.c **** 	if (cs_threshold_req > 0) {
  38              		.loc 1 57 0
  39 0002 154D     		ldr	r5, .L4
  40 0004 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
  41 0006 63B2     		sxtb	r3, r4
  42 0008 002B     		cmp	r3, #0
  43 000a 05DD     		ble	.L2
  44              	.LBB5:
  58:ubertooth_cs.c **** 		int8_t rssi = rssi_get_avg(channel);
  45              		.loc 1 58 0
  46 000c FFF7FEFF 		bl	rssi_get_avg
  47              	.LVL1:
  48 0010 2C78     		ldrb	r4, [r5]	@ zero_extendqisi2
  49 0012 363C     		subs	r4, r4, #54
  59:ubertooth_cs.c **** 		level = rssi - 54 + cs_threshold_req;
  50              		.loc 1 59 0
  51 0014 2044     		add	r0, r0, r4
  52              	.LVL2:
  53 0016 C4B2     		uxtb	r4, r0
  54              	.LVL3:
  55              	.L2:
  56              	.LBE5:
ARM GAS  /var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s 			page 3


  57              	.LBB6:
  58              	.LBB7:
  42:ubertooth_cs.c **** 	level = level > -20 ? -20 : level;
  59              		.loc 1 42 0
  60 0018 64B2     		sxtb	r4, r4
  61              	.LVL4:
  43:ubertooth_cs.c **** 	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | ((uint8_t)samples&3));
  62              		.loc 1 43 0
  63 001a 6FF07700 		mvn	r0, #119
  64 001e 8442     		cmp	r4, r0
  65 0020 B8BF     		it	lt
  66 0022 0446     		movlt	r4, r0
  67              	.LVL5:
  68 0024 6FF01303 		mvn	r3, #19
  69 0028 9C42     		cmp	r4, r3
  70 002a A8BF     		it	ge
  71 002c 1C46     		movge	r4, r3
  72 002e E4B2     		uxtb	r4, r4
  73              	.LVL6:
  44:ubertooth_cs.c **** 	cs_threshold_cur = level;
  74              		.loc 1 44 0
  75 0030 04F13801 		add	r1, r4, #56
  76 0034 41F00301 		orr	r1, r1, #3
  77 0038 0620     		movs	r0, #6
  78 003a C9B2     		uxtb	r1, r1
  79 003c FFF7FEFF 		bl	cc2400_set
  80              	.LVL7:
  45:ubertooth_cs.c **** 	cs_no_squelch = (level <= -120);
  81              		.loc 1 45 0
  82 0040 064B     		ldr	r3, .L4+4
  83 0042 1C70     		strb	r4, [r3]
  46:ubertooth_cs.c **** }
  84              		.loc 1 46 0
  85 0044 64B2     		sxtb	r4, r4
  86              	.LVL8:
  87 0046 14F1770F 		cmn	r4, #119
  88 004a 054B     		ldr	r3, .L4+8
  89 004c ACBF     		ite	ge
  90 004e 0024     		movge	r4, #0
  91 0050 0124     		movlt	r4, #1
  92 0052 1C70     		strb	r4, [r3]
  93 0054 38BD     		pop	{r3, r4, r5, pc}
  94              	.L5:
  95 0056 00BF     		.align	2
  96              	.L4:
  97 0058 00000000 		.word	cs_threshold_req
  98 005c 00000000 		.word	cs_threshold_cur
  99 0060 00000000 		.word	cs_no_squelch
 100              	.LBE7:
 101              	.LBE6:
 102              		.cfi_endproc
 103              	.LFE1:
 105              		.section	.text.cs_trigger_enable,"ax",%progbits
 106              		.align	1
 107              		.global	cs_trigger_enable
 108              		.thumb
 109              		.thumb_func
ARM GAS  /var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s 			page 4


 111              	cs_trigger_enable:
 112              	.LFB2:
  60:ubertooth_cs.c **** 	} else {
  61:ubertooth_cs.c **** 		level = cs_threshold_req;
  62:ubertooth_cs.c **** 	}
  63:ubertooth_cs.c **** 	cs_threshold_set(level, CS_SAMPLES_4);
  64:ubertooth_cs.c **** }
  65:ubertooth_cs.c **** 
  66:ubertooth_cs.c **** /* CS comes from CC2400 GIO6, which is LPC P2.2, active low. GPIO
  67:ubertooth_cs.c ****  * triggers EINT3, which could be used for other things (but is not
  68:ubertooth_cs.c ****  * currently). TODO - EINT3 should be managed globally, not turned on
  69:ubertooth_cs.c ****  * and off here. */
  70:ubertooth_cs.c **** void cs_trigger_enable(void)
  71:ubertooth_cs.c **** {
 113              		.loc 1 71 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
  72:ubertooth_cs.c **** 	cs_trigger = 0;
 118              		.loc 1 72 0
 119 0000 074B     		ldr	r3, .L7
 120 0002 0022     		movs	r2, #0
 121 0004 1A70     		strb	r2, [r3]
  73:ubertooth_cs.c **** 	ISER0 = ISER0_ISE_EINT3;
 122              		.loc 1 73 0
 123 0006 074B     		ldr	r3, .L7+4
 124 0008 4FF40012 		mov	r2, #2097152
 125 000c 1A60     		str	r2, [r3]
  74:ubertooth_cs.c **** 	IO2IntClr = PIN_GIO6;      // Clear pending
 126              		.loc 1 74 0
 127 000e 064B     		ldr	r3, .L7+8
 128 0010 0422     		movs	r2, #4
 129 0012 1A60     		str	r2, [r3]
  75:ubertooth_cs.c **** 	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
 130              		.loc 1 75 0
 131 0014 054A     		ldr	r2, .L7+12
 132 0016 1368     		ldr	r3, [r2]
 133 0018 43F00403 		orr	r3, r3, #4
 134 001c 1360     		str	r3, [r2]
 135 001e 7047     		bx	lr
 136              	.L8:
 137              		.align	2
 138              	.L7:
 139 0020 00000000 		.word	cs_trigger
 140 0024 00E100E0 		.word	-536813312
 141 0028 AC800240 		.word	1073905836
 142 002c B4800240 		.word	1073905844
 143              		.cfi_endproc
 144              	.LFE2:
 146              		.section	.text.cs_trigger_disable,"ax",%progbits
 147              		.align	1
 148              		.global	cs_trigger_disable
 149              		.thumb
 150              		.thumb_func
 152              	cs_trigger_disable:
 153              	.LFB3:
ARM GAS  /var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s 			page 5


  76:ubertooth_cs.c **** }
  77:ubertooth_cs.c **** 
  78:ubertooth_cs.c **** void cs_trigger_disable(void)
  79:ubertooth_cs.c **** {
 154              		.loc 1 79 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              		@ link register save eliminated.
  80:ubertooth_cs.c **** 	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
 159              		.loc 1 80 0
 160 0000 074A     		ldr	r2, .L10
 161 0002 1368     		ldr	r3, [r2]
 162 0004 23F00403 		bic	r3, r3, #4
 163 0008 1360     		str	r3, [r2]
  81:ubertooth_cs.c **** 	IO2IntClr = PIN_GIO6;      // Clear pending
 164              		.loc 1 81 0
 165 000a 064B     		ldr	r3, .L10+4
 166 000c 0422     		movs	r2, #4
 167 000e 1A60     		str	r2, [r3]
  82:ubertooth_cs.c **** 	ICER0 = ICER0_ICE_EINT3;
 168              		.loc 1 82 0
 169 0010 054B     		ldr	r3, .L10+8
 170 0012 4FF40012 		mov	r2, #2097152
 171 0016 1A60     		str	r2, [r3]
  83:ubertooth_cs.c **** 	cs_trigger = 0;
 172              		.loc 1 83 0
 173 0018 044B     		ldr	r3, .L10+12
 174 001a 0022     		movs	r2, #0
 175 001c 1A70     		strb	r2, [r3]
 176 001e 7047     		bx	lr
 177              	.L11:
 178              		.align	2
 179              	.L10:
 180 0020 B4800240 		.word	1073905844
 181 0024 AC800240 		.word	1073905836
 182 0028 80E100E0 		.word	-536813184
 183 002c 00000000 		.word	cs_trigger
 184              		.cfi_endproc
 185              	.LFE3:
 187              		.section	.text.cs_reset,"ax",%progbits
 188              		.align	1
 189              		.global	cs_reset
 190              		.thumb
 191              		.thumb_func
 193              	cs_reset:
 194              	.LFB4:
  84:ubertooth_cs.c **** }
  85:ubertooth_cs.c **** 
  86:ubertooth_cs.c **** void cs_reset(void)
  87:ubertooth_cs.c **** {
 195              		.loc 1 87 0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 0
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199 0000 08B5     		push	{r3, lr}
 200              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s 			page 6


 201              		.cfi_offset 3, -8
 202              		.cfi_offset 14, -4
  88:ubertooth_cs.c **** 	cs_trigger_disable();
 203              		.loc 1 88 0
 204 0002 FFF7FEFF 		bl	cs_trigger_disable
 205              	.LVL9:
  89:ubertooth_cs.c **** 
  90:ubertooth_cs.c **** 	cs_no_squelch = 0;
 206              		.loc 1 90 0
 207 0006 044B     		ldr	r3, .L13
 208 0008 0022     		movs	r2, #0
 209 000a 1A70     		strb	r2, [r3]
  91:ubertooth_cs.c **** 	cs_threshold_req=CS_THRESHOLD_DEFAULT;
 210              		.loc 1 91 0
 211 000c 034A     		ldr	r2, .L13+4
 212 000e 8823     		movs	r3, #136
 213 0010 1370     		strb	r3, [r2]
  92:ubertooth_cs.c **** 	cs_threshold_cur=CS_THRESHOLD_DEFAULT;
 214              		.loc 1 92 0
 215 0012 034A     		ldr	r2, .L13+8
 216 0014 1370     		strb	r3, [r2]
 217 0016 08BD     		pop	{r3, pc}
 218              	.L14:
 219              		.align	2
 220              	.L13:
 221 0018 00000000 		.word	cs_no_squelch
 222 001c 00000000 		.word	cs_threshold_req
 223 0020 00000000 		.word	cs_threshold_cur
 224              		.cfi_endproc
 225              	.LFE4:
 227              		.comm	rssi_count,1,1
 228              		.comm	rssi_min,1,1
 229              		.comm	rssi_max,1,1
 230              		.comm	cs_trigger,1,1
 231              		.comm	cs_threshold_cur,1,1
 232              		.comm	cs_threshold_req,1,1
 233              		.comm	cs_no_squelch,1,1
 234              		.text
 235              	.Letext0:
 236              		.file 2 "/Users/ahesham/research/Bluetooth/boss/uberCode/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/4
 237              		.file 3 "ubertooth_cs.h"
 238              		.file 4 "ubertooth_rssi.h"
 239              		.file 5 "../common/ubertooth.h"
ARM GAS  /var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ubertooth_cs.c
/var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s:19     .text.cs_threshold_calc_and_set:0000000000000000 $t
/var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s:24     .text.cs_threshold_calc_and_set:0000000000000000 cs_threshold_calc_and_set
/var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s:97     .text.cs_threshold_calc_and_set:0000000000000058 $d
                            *COM*:0000000000000001 cs_threshold_req
                            *COM*:0000000000000001 cs_threshold_cur
                            *COM*:0000000000000001 cs_no_squelch
/var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s:106    .text.cs_trigger_enable:0000000000000000 $t
/var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s:111    .text.cs_trigger_enable:0000000000000000 cs_trigger_enable
/var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s:139    .text.cs_trigger_enable:0000000000000020 $d
                            *COM*:0000000000000001 cs_trigger
/var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s:147    .text.cs_trigger_disable:0000000000000000 $t
/var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s:152    .text.cs_trigger_disable:0000000000000000 cs_trigger_disable
/var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s:180    .text.cs_trigger_disable:0000000000000020 $d
/var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s:188    .text.cs_reset:0000000000000000 $t
/var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s:193    .text.cs_reset:0000000000000000 cs_reset
/var/folders/s6/4bph2j8d1nvcsgz5bgm0yhx00000gn/T//cceyRWrH.s:221    .text.cs_reset:0000000000000018 $d
                            *COM*:0000000000000001 rssi_count
                            *COM*:0000000000000001 rssi_min
                            *COM*:0000000000000001 rssi_max
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
rssi_get_avg
cc2400_set
